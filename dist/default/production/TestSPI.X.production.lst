

Microchip Technology PIC18 LITE Macro Assembler V1.31 build 56723 
                                                                                               Sat Dec  3 21:35:29 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	smallconst
    57  000800                     __psmallconst:
    58                           	opt stack 0
    59  000800  00                 	db	0
    60  000801                     _dpowers:
    61                           	opt stack 0
    62  000801  0001               	dw	1
    63  000803  0000               	dw	0
    64  000805  000A               	dw	10
    65  000807  0000               	dw	0
    66  000809  0064               	dw	100
    67  00080B  0000               	dw	0
    68  00080D  03E8               	dw	1000
    69  00080F  0000               	dw	0
    70  000811  2710               	dw	10000
    71  000813  0000               	dw	0
    72  000815  86A0               	dw	34464
    73  000817  0001               	dw	1
    74  000819  4240               	dw	16960
    75  00081B  000F               	dw	15
    76  00081D  9680               	dw	38528
    77  00081F  0098               	dw	152
    78  000821  E100               	dw	57600
    79  000823  05F5               	dw	1525
    80  000825  CA00               	dw	51712
    81  000827  3B9A               	dw	15258
    82  000829                     __end_of_dpowers:
    83                           	opt stack 0
    84  000829                     __npowers_:
    85                           	opt stack 0
    86  000829  00                 	db	0
    87  00082A  80                 	db	128
    88  00082B  3F                 	db	63
    89  00082C  CD                 	db	205
    90  00082D  CC                 	db	204
    91  00082E  3D                 	db	61
    92  00082F  D7                 	db	215
    93  000830  23                 	db	35
    94  000831  3C                 	db	60
    95  000832  12                 	db	18
    96  000833  83                 	db	131
    97  000834  3A                 	db	58
    98  000835  B7                 	db	183
    99  000836  D1                 	db	209
   100  000837  38                 	db	56
   101  000838  C6                 	db	198
   102  000839  27                 	db	39
   103  00083A  37                 	db	55
   104  00083B  38                 	db	56
   105  00083C  86                 	db	134
   106  00083D  35                 	db	53
   107  00083E  C0                 	db	192
   108  00083F  D6                 	db	214
   109  000840  33                 	db	51
   110  000841  CC                 	db	204
   111  000842  2B                 	db	43
   112  000843  32                 	db	50
   113  000844  70                 	db	112
   114  000845  89                 	db	137
   115  000846  30                 	db	48
   116  000847  E7                 	db	231
   117  000848  DB                 	db	219
   118  000849  2E                 	db	46
   119  00084A  E5                 	db	229
   120  00084B  3C                 	db	60
   121  00084C  1E                 	db	30
   122  00084D  42                 	db	66
   123  00084E  A2                 	db	162
   124  00084F  0D                 	db	13
   125  000850                     __end_of__npowers_:
   126                           	opt stack 0
   127  000850                     __powers_:
   128                           	opt stack 0
   129  000850  00                 	db	0
   130  000851  80                 	db	128
   131  000852  3F                 	db	63
   132  000853  00                 	db	0
   133  000854  20                 	db	32
   134  000855  41                 	db	65
   135  000856  00                 	db	0
   136  000857  C8                 	db	200
   137  000858  42                 	db	66
   138  000859  00                 	db	0
   139  00085A  7A                 	db	122
   140  00085B  44                 	db	68
   141  00085C  40                 	db	64
   142  00085D  1C                 	db	28
   143  00085E  46                 	db	70
   144  00085F  50                 	db	80
   145  000860  C3                 	db	195
   146  000861  47                 	db	71
   147  000862  24                 	db	36
   148  000863  74                 	db	116
   149  000864  49                 	db	73
   150  000865  97                 	db	151
   151  000866  18                 	db	24
   152  000867  4B                 	db	75
   153  000868  BC                 	db	188
   154  000869  BE                 	db	190
   155  00086A  4C                 	db	76
   156  00086B  6B                 	db	107
   157  00086C  6E                 	db	110
   158  00086D  4E                 	db	78
   159  00086E  03                 	db	3
   160  00086F  15                 	db	21
   161  000870  50                 	db	80
   162  000871  79                 	db	121
   163  000872  AD                 	db	173
   164  000873  60                 	db	96
   165  000874  F3                 	db	243
   166  000875  49                 	db	73
   167  000876  71                 	db	113
   168  000877                     __end_of__powers_:
   169                           	opt stack 0
   170  000877                     _ADC_RESOLUTION:
   171                           	opt stack 0
   172  000877  00                 	db	0
   173  000878  A0                 	db	160
   174  000879  3B                 	db	59
   175  00087A                     __end_of_ADC_RESOLUTION:
   176                           	opt stack 0
   177  00087A                     _MAX_TEMP:
   178                           	opt stack 0
   179  00087A  00                 	db	0
   180  00087B  20                 	db	32
   181  00087C  42                 	db	66
   182  00087D                     __end_of_MAX_TEMP:
   183                           	opt stack 0
   184  00087D                     _MIN_TEMP:
   185                           	opt stack 0
   186  00087D  00                 	db	0
   187  00087E  A0                 	db	160
   188  00087F  41                 	db	65
   189  000880                     __end_of_MIN_TEMP:
   190                           	opt stack 0
   191  000880                     _MAX_DUTY_CYCLE:
   192                           	opt stack 0
   193  000880  00FF               	dw	255
   194  000882                     __end_of_MAX_DUTY_CYCLE:
   195                           	opt stack 0
   196  000882                     _MIN_DUTY_CYCLE:
   197                           	opt stack 0
   198  000882  0064               	dw	100
   199  000884                     __end_of_MIN_DUTY_CYCLE:
   200                           	opt stack 0
   201  000884                     log@coeff:
   202                           	opt stack 0
   203  000884  00                 	db	0
   204  000885  00                 	db	0
   205  000886  00                 	db	0
   206  000887  00                 	db	0
   207  000888  80                 	db	128
   208  000889  3F                 	db	63
   209  00088A  F0                 	db	240
   210  00088B  FF                 	db	255
   211  00088C  BE                 	db	190
   212  00088D  E2                 	db	226
   213  00088E  A9                 	db	169
   214  00088F  3E                 	db	62
   215  000890  83                 	db	131
   216  000891  76                 	db	118
   217  000892  BE                 	db	190
   218  000893  AE                 	db	174
   219  000894  2B                 	db	43
   220  000895  3E                 	db	62
   221  000896  3C                 	db	60
   222  000897  C3                 	db	195
   223  000898  BD                 	db	189
   224  000899  D2                 	db	210
   225  00089A  13                 	db	19
   226  00089B  3D                 	db	61
   227  00089C  78                 	db	120
   228  00089D  D3                 	db	211
   229  00089E  BB                 	db	187
   230  00089F                     __end_oflog@coeff:
   231                           	opt stack 0
   232  0000                     _ACTCON	set	4021
   233  0000                     _ADCON0bits	set	4034
   234  0000                     _ADCON1bits	set	4033
   235  0000                     _ADCON2bits	set	4032
   236  0000                     _ADRESH	set	4036
   237  0000                     _ADRESL	set	4035
   238  0000                     _ANSELA	set	3931
   239  0000                     _ANSELAbits	set	3931
   240  0000                     _ANSELB	set	3932
   241  0000                     _ANSELC	set	3933
   242  0000                     _ANSELD	set	3934
   243  0000                     _ANSELE	set	3935
   244  0000                     _CCP1CON	set	4029
   245  0000                     _CCP1CONbits	set	4029
   246  0000                     _CCPR1L	set	4030
   247  0000                     _ECCP1AS	set	4022
   248  0000                     _INTCON2bits	set	4081
   249  0000                     _LATA	set	3977
   250  0000                     _LATB	set	3978
   251  0000                     _LATC	set	3979
   252  0000                     _LATCbits	set	3979
   253  0000                     _LATD	set	3980
   254  0000                     _LATE	set	3981
   255  0000                     _OSCCON	set	4051
   256  0000                     _OSCCON2	set	4050
   257  0000                     _OSCTUNE	set	3995
   258  0000                     _PR2	set	4027
   259  0000                     _PSTR1CON	set	4025
   260  0000                     _SSP1ADD	set	4040
   261  0000                     _SSP1BUF	set	4041
   262  0000                     _SSP1CON1	set	4038
   263  0000                     _SSP1CON1bits	set	4038
   264  0000                     _SSP1STAT	set	4039
   265  0000                     _SSP1STATbits	set	4039
   266  0000                     _T2CON	set	4026
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISAbits	set	3986
   269  0000                     _TRISB	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _TRISCbits	set	3988
   272  0000                     _TRISD	set	3989
   273  0000                     _TRISE	set	3990
   274  00089F                     __stringdata:
   275                           	opt stack 0
   276  00089F                     STR_1:
   277  00089F  25                 	db	37
   278  0008A0  2E                 	db	46
   279  0008A1  31                 	db	49	;'1'
   280  0008A2  66                 	db	102	;'f'
   281  0008A3  00                 	db	0
   282  0008A4                     __end_of__stringdata:
   283                           	opt stack 0
   284                           
   285                           ; #config settings
   286  0008A4  00                 	db	0	; dummy byte at the end
   287  0000                     
   288                           	psect	cinit
   289  002E4E                     __pcinit:
   290                           	opt stack 0
   291  002E4E                     start_initialization:
   292                           	opt stack 0
   293  002E4E                     __initialization:
   294                           	opt stack 0
   295                           
   296                           ; Clear objects allocated to BANK0 (2 bytes)
   297  002E4E  0100               	movlb	0
   298  002E50  6BA5               	clrf	(__pbssBANK0+1)& (0+255),b
   299  002E52  6BA4               	clrf	__pbssBANK0& (0+255),b
   300  002E54                     end_of_initialization:
   301                           	opt stack 0
   302  002E54                     __end_of__initialization:
   303                           	opt stack 0
   304  002E54  0E00               	movlw	low (__Lmediumconst shr (0+16))
   305  002E56  6EF8               	movwf	tblptru,c
   306  002E58  0100               	movlb	0
   307  002E5A  EF4F  F013         	goto	_main	;jump to C main() function
   308                           tblptru	equ	0xFF8
   309                           
   310                           	psect	bssBANK0
   311  0000A4                     __pbssBANK0:
   312                           	opt stack 0
   313  0000A4                     _errno:
   314                           	opt stack 0
   315  0000A4                     	ds	2
   316                           tblptru	equ	0xFF8
   317                           
   318                           	psect	cstackBANK0
   319  000060                     __pcstackBANK0:
   320                           	opt stack 0
   321  000060                     ?_sprintf:
   322                           	opt stack 0
   323  000060                     sprintf@sp:
   324                           	opt stack 0
   325  000060                     set_fan_speed@temp:
   326                           	opt stack 0
   327  000060                     get_temperature@Vout:
   328                           	opt stack 0
   329                           
   330                           ; 3 bytes @ 0x0
   331  000060                     	ds	2
   332  000062                     sprintf@f:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2
   336  000062                     	ds	1
   337  000063                     ??_set_fan_speed:
   338  000063                     get_temperature@Rth:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x3
   342  000063                     	ds	3
   343  000066                     _get_temperature$1698:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x6
   347  000066                     	ds	1
   348  000067                     ??_sprintf:
   349  000067                     set_fan_speed@new_duty_cycle:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x7
   353  000067                     	ds	2
   354  000069                     set_fan_speed@tTemp:
   355                           	opt stack 0
   356  000069                     _get_temperature$1699:
   357                           	opt stack 0
   358                           
   359                           ; 3 bytes @ 0x9
   360  000069                     	ds	3
   361  00006C                     get_temperature@R1:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0xC
   365  00006C                     	ds	1
   366  00006D                     _sprintf$1703:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0xD
   370  00006D                     	ds	1
   371  00006E                     get_temperature@Tn:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0xE
   375  00006E                     	ds	2
   376  000070                     _sprintf$978:
   377                           	opt stack 0
   378                           
   379                           ; 4 bytes @ 0x10
   380  000070                     	ds	1
   381  000071                     get_temperature@R2:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x11
   385  000071                     	ds	2
   386  000073                     get_temperature@Bth:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x13
   390  000073                     	ds	1
   391  000074                     sprintf@ap:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x14
   395  000074                     	ds	1
   396  000075                     get_temperature@temp:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x15
   400  000075                     	ds	1
   401  000076                     sprintf@vd:
   402                           	opt stack 0
   403                           
   404                           ; 4 bytes @ 0x16
   405  000076                     	ds	4
   406  00007A                     sprintf@vd_980:
   407                           	opt stack 0
   408                           
   409                           ; 4 bytes @ 0x1A
   410  00007A                     	ds	4
   411  00007E                     sprintf@flag:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x1E
   415  00007E                     	ds	2
   416  000080                     sprintf@_val:
   417                           	opt stack 0
   418                           
   419                           ; 5 bytes @ 0x20
   420  000080                     	ds	5
   421  000085                     sprintf@integ:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x25
   425  000085                     	ds	3
   426  000088                     sprintf@exp:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x28
   430  000088                     	ds	2
   431  00008A                     sprintf@prec:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2A
   435  00008A                     	ds	2
   436  00008C                     sprintf@fval:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0x2C
   440  00008C                     	ds	3
   441  00008F                     sprintf@c:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x2F
   445  00008F                     	ds	1
   446  000090                     MAX_7221_WRITE_FLOAT@value:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x30
   450  000090                     	ds	3
   451  000093                     ??_MAX_7221_WRITE_FLOAT:
   452                           
   453                           ; 0 bytes @ 0x33
   454  000093                     	ds	4
   455  000097                     MAX_7221_WRITE_FLOAT@dig1:
   456                           	opt stack 0
   457                           
   458                           ; 2 bytes @ 0x37
   459  000097                     	ds	2
   460  000099                     MAX_7221_WRITE_FLOAT@dig2:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x39
   464  000099                     	ds	2
   465  00009B                     MAX_7221_WRITE_FLOAT@digits:
   466                           	opt stack 0
   467                           
   468                           ; 4 bytes @ 0x3B
   469  00009B                     	ds	4
   470  00009F                     main@ticks:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x3F
   474  00009F                     	ds	2
   475  0000A1                     main@temp:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0x41
   479  0000A1                     	ds	3
   480                           tblptru	equ	0xFF8
   481                           
   482                           	psect	cstackCOMRAM
   483  000001                     __pcstackCOMRAM:
   484                           	opt stack 0
   485  000001                     ??_isdigit:
   486  000001                     ?_adc_convert:
   487                           	opt stack 0
   488  000001                     ?___awmod:
   489                           	opt stack 0
   490  000001                     ?___ftpack:
   491                           	opt stack 0
   492  000001                     ?_frexp:
   493                           	opt stack 0
   494  000001                     ?__tdiv_to_l_:
   495                           	opt stack 0
   496  000001                     ?__div_to_l_:
   497                           	opt stack 0
   498  000001                     ?___lldiv:
   499                           	opt stack 0
   500  000001                     ?___llmod:
   501                           	opt stack 0
   502  000001                     SPI1_Exchange8bit@data:
   503                           	opt stack 0
   504  000001                     adc_convert@channel:
   505                           	opt stack 0
   506  000001                     ___awmod@dividend:
   507                           	opt stack 0
   508  000001                     __div_to_l_@f1:
   509                           	opt stack 0
   510  000001                     ___ftpack@arg:
   511                           	opt stack 0
   512  000001                     __tdiv_to_l_@f1:
   513                           	opt stack 0
   514  000001                     ___ftge@ff1:
   515                           	opt stack 0
   516  000001                     frexp@value:
   517                           	opt stack 0
   518  000001                     ___lldiv@dividend:
   519                           	opt stack 0
   520  000001                     ___llmod@dividend:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x0
   524  000001                     	ds	1
   525  000002                     MAX_7221_INTENSITY@value:
   526                           	opt stack 0
   527  000002                     MAX_7221_SCAN_LIMIT@limit:
   528                           	opt stack 0
   529  000002                     _isdigit$1253:
   530                           	opt stack 0
   531  000002                     MAX_7221_WRITE@reg:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x1
   535  000002                     	ds	1
   536  000003                     ??_adc_convert:
   537  000003                     isdigit@c:
   538                           	opt stack 0
   539  000003                     ___awmod@divisor:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x2
   543  000003                     	ds	1
   544  000004                     ___ftpack@exp:
   545                           	opt stack 0
   546  000004                     MAX_7221_WRITE@value:
   547                           	opt stack 0
   548  000004                     frexp@eptr:
   549                           	opt stack 0
   550  000004                     __div_to_l_@f2:
   551                           	opt stack 0
   552  000004                     __tdiv_to_l_@f2:
   553                           	opt stack 0
   554  000004                     ___ftge@ff2:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x3
   558  000004                     	ds	1
   559  000005                     ??___awmod:
   560  000005                     ___ftpack@sign:
   561                           	opt stack 0
   562  000005                     ___lldiv@divisor:
   563                           	opt stack 0
   564  000005                     ___llmod@divisor:
   565                           	opt stack 0
   566                           
   567                           ; 4 bytes @ 0x4
   568  000005                     	ds	1
   569  000006                     ??___ftpack:
   570  000006                     ??_frexp:
   571  000006                     ___awmod@counter:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x5
   575  000006                     	ds	1
   576  000007                     ??__tdiv_to_l_:
   577  000007                     ??__div_to_l_:
   578  000007                     ??___ftge:
   579  000007                     ___awmod@sign:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x6
   583  000007                     	ds	1
   584  000008                     ?___awdiv:
   585                           	opt stack 0
   586  000008                     ___awdiv@dividend:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x7
   590  000008                     	ds	1
   591  000009                     ??___lldiv:
   592  000009                     ??___llmod:
   593  000009                     ?___awtoft:
   594                           	opt stack 0
   595  000009                     ?___lltoft:
   596                           	opt stack 0
   597  000009                     ___awtoft@c:
   598                           	opt stack 0
   599  000009                     ___lltoft@c:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603  000009                     	ds	1
   604  00000A                     ___llmod@counter:
   605                           	opt stack 0
   606  00000A                     ___awdiv@divisor:
   607                           	opt stack 0
   608  00000A                     __tdiv_to_l_@quot:
   609                           	opt stack 0
   610  00000A                     ___lldiv@quotient:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x9
   614  00000A                     	ds	1
   615  00000B                     __div_to_l_@quot:
   616                           	opt stack 0
   617                           
   618                           ; 4 bytes @ 0xA
   619  00000B                     	ds	1
   620  00000C                     ??___awdiv:
   621  00000C                     ??___awtoft:
   622                           
   623                           ; 0 bytes @ 0xB
   624  00000C                     	ds	1
   625  00000D                     ??___lltoft:
   626  00000D                     ___awdiv@counter:
   627                           	opt stack 0
   628  00000D                     ___awtoft@sign:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0xC
   632  00000D                     	ds	1
   633  00000E                     ___awdiv@sign:
   634                           	opt stack 0
   635  00000E                     __tdiv_to_l_@cntr:
   636                           	opt stack 0
   637  00000E                     ___lldiv@counter:
   638                           	opt stack 0
   639                           
   640                           ; 1 bytes @ 0xD
   641  00000E                     	ds	1
   642  00000F                     __div_to_l_@cntr:
   643                           	opt stack 0
   644  00000F                     __tdiv_to_l_@exp1:
   645                           	opt stack 0
   646  00000F                     ___awdiv@quotient:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0xE
   650  00000F                     	ds	1
   651  000010                     __div_to_l_@exp1:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0xF
   655  000010                     	ds	1
   656  000011                     ?___wmul:
   657                           	opt stack 0
   658  000011                     ___lltoft@exp:
   659                           	opt stack 0
   660  000011                     ___wmul@multiplier:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x10
   664  000011                     	ds	2
   665  000013                     ___wmul@multiplicand:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x12
   669  000013                     	ds	2
   670  000015                     ___wmul@product:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x14
   674  000015                     	ds	2
   675  000017                     ?___lwtoft:
   676                           	opt stack 0
   677  000017                     ___lwtoft@c:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x16
   681  000017                     	ds	3
   682  00001A                     ??___lwtoft:
   683                           
   684                           ; 0 bytes @ 0x19
   685  00001A                     	ds	2
   686  00001C                     ?___ftneg:
   687                           	opt stack 0
   688  00001C                     ___ftneg@f1:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x1B
   692  00001C                     	ds	3
   693  00001F                     ?___ftadd:
   694                           	opt stack 0
   695  00001F                     ___ftadd@f1:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x1E
   699  00001F                     	ds	3
   700  000022                     ___ftadd@f2:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x21
   704  000022                     	ds	3
   705  000025                     ??___ftadd:
   706                           
   707                           ; 0 bytes @ 0x24
   708  000025                     	ds	3
   709  000028                     ___ftadd@sign:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x27
   713  000028                     	ds	1
   714  000029                     ___ftadd@exp2:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x28
   718  000029                     	ds	1
   719  00002A                     ___ftadd@exp1:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x29
   723  00002A                     	ds	1
   724  00002B                     ?___ftdiv:
   725                           	opt stack 0
   726  00002B                     ?___ftsub:
   727                           	opt stack 0
   728  00002B                     ___ftdiv@f1:
   729                           	opt stack 0
   730  00002B                     ___ftsub@f1:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x2A
   734  00002B                     	ds	3
   735  00002E                     ___ftdiv@f2:
   736                           	opt stack 0
   737  00002E                     ___ftsub@f2:
   738                           	opt stack 0
   739                           
   740                           ; 3 bytes @ 0x2D
   741  00002E                     	ds	3
   742  000031                     ??___ftdiv:
   743  000031                     ___asftsub@f1p:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x30
   747  000031                     	ds	2
   748  000033                     ___asftsub@f2:
   749                           	opt stack 0
   750                           
   751                           ; 3 bytes @ 0x32
   752  000033                     	ds	1
   753  000034                     ___ftdiv@cntr:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x33
   757  000034                     	ds	1
   758  000035                     ___ftdiv@f3:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x34
   762  000035                     	ds	1
   763  000036                     
   764                           ; 0 bytes @ 0x35
   765  000036                     	ds	2
   766  000038                     ___ftdiv@exp:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x37
   770  000038                     	ds	1
   771  000039                     ___ftdiv@sign:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x38
   775  000039                     	ds	1
   776  00003A                     ?___ftmul:
   777                           	opt stack 0
   778  00003A                     ___ftmul@f1:
   779                           	opt stack 0
   780                           
   781                           ; 3 bytes @ 0x39
   782  00003A                     	ds	3
   783  00003D                     ___ftmul@f2:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x3C
   787  00003D                     	ds	3
   788  000040                     ??___ftmul:
   789                           
   790                           ; 0 bytes @ 0x3F
   791  000040                     	ds	3
   792  000043                     ___ftmul@exp:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x42
   796  000043                     	ds	1
   797  000044                     ___ftmul@f3_as_product:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x43
   801  000044                     	ds	3
   802  000047                     ___ftmul@cntr:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x46
   806  000047                     	ds	1
   807  000048                     ___ftmul@sign:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x47
   811  000048                     	ds	1
   812  000049                     ?_eval_poly:
   813                           	opt stack 0
   814  000049                     ?_fround:
   815                           	opt stack 0
   816  000049                     ?_scale:
   817                           	opt stack 0
   818  000049                     ___asftmul@f1p:
   819                           	opt stack 0
   820  000049                     eval_poly@x:
   821                           	opt stack 0
   822                           
   823                           ; 3 bytes @ 0x48
   824  000049                     	ds	2
   825  00004B                     ___asftmul@f2:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x4A
   829  00004B                     	ds	1
   830  00004C                     eval_poly@d:
   831                           	opt stack 0
   832  00004C                     _fround$1701:
   833                           	opt stack 0
   834  00004C                     _scale$1702:
   835                           	opt stack 0
   836                           
   837                           ; 3 bytes @ 0x4B
   838  00004C                     	ds	2
   839  00004E                     eval_poly@n:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x4D
   843  00004E                     	ds	1
   844  00004F                     scale@scl:
   845                           	opt stack 0
   846  00004F                     _fround$1700:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x4E
   850  00004F                     	ds	1
   851  000050                     ??_eval_poly:
   852  000050                     ?___fttol:
   853                           	opt stack 0
   854  000050                     ___fttol@f1:
   855                           	opt stack 0
   856                           
   857                           ; 3 bytes @ 0x4F
   858  000050                     	ds	2
   859  000052                     fround@prec:
   860                           	opt stack 0
   861  000052                     eval_poly@res:
   862                           	opt stack 0
   863                           
   864                           ; 3 bytes @ 0x51
   865  000052                     	ds	1
   866  000053                     ___asftadd@f1p:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x52
   870  000053                     	ds	1
   871  000054                     ??___fttol:
   872                           
   873                           ; 0 bytes @ 0x53
   874  000054                     	ds	1
   875  000055                     ?_log:
   876                           	opt stack 0
   877  000055                     ___asftadd@f2:
   878                           	opt stack 0
   879  000055                     log@x:
   880                           	opt stack 0
   881                           
   882                           ; 3 bytes @ 0x54
   883  000055                     	ds	3
   884  000058                     log@exponent:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x57
   888  000058                     	ds	1
   889  000059                     ___fttol@sign1:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x58
   893  000059                     	ds	1
   894  00005A                     ?_get_temperature:
   895                           	opt stack 0
   896  00005A                     get_temperature@sensor:
   897                           	opt stack 0
   898  00005A                     ___fttol@lval:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x59
   902  00005A                     	ds	3
   903  00005D                     
   904                           ; 0 bytes @ 0x5C
   905  00005D                     	ds	1
   906  00005E                     ___fttol@exp1:
   907                           	opt stack 0
   908                           
   909                           ; 1 bytes @ 0x5D
   910  00005E                     	ds	1
   911  00005F                     tblptru	equ	0xFF8
   912                           
   913                           ; 0 bytes @ 0x5E
   914 ;;
   915 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   916 ;;
   917 ;; *************** function _main *****************
   918 ;; Defined at:
   919 ;;		line 121 in file "main.c"
   920 ;; Parameters:    Size  Location     Type
   921 ;;		None
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  temp            3   65[BANK0 ] float 
   924 ;;  ticks           2   63[BANK0 ] int 
   925 ;; Return value:  Size  Location     Type
   926 ;;		None               void
   927 ;; Registers used:
   928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   929 ;; Tracked objects:
   930 ;;		On entry : 0/0
   931 ;;		On exit  : 0/0
   932 ;;		Unchanged: 0/0
   933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   934 ;;      Params:         0       0       0       0       0       0       0       0       0
   935 ;;      Locals:         0       5       0       0       0       0       0       0       0
   936 ;;      Temps:          0       0       0       0       0       0       0       0       0
   937 ;;      Totals:         0       5       0       0       0       0       0       0       0
   938 ;;Total ram usage:        5 bytes
   939 ;; Hardware stack levels required when called:    6
   940 ;; This function calls:
   941 ;;		_MAX_7221_INIT
   942 ;;		_MAX_7221_WRITE_FLOAT
   943 ;;		_SPI1_Initialize
   944 ;;		___awmod
   945 ;;		_configure_adc
   946 ;;		_configure_pwm
   947 ;;		_get_temperature
   948 ;;		_init_oscillator
   949 ;;		_init_pins
   950 ;;		_set_fan_speed
   951 ;; This function is called by:
   952 ;;		Startup code after reset
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text0
   957  00269E                     __ptext0:
   958                           	opt stack 0
   959  00269E                     _main:
   960                           	opt stack 25
   961                           
   962                           ;main.c: 123: init_pins();
   963                           
   964                           ;incstack = 0
   965  00269E  ECAD  F015         	call	_init_pins	;wreg free
   966                           
   967                           ;main.c: 124: init_oscillator();
   968  0026A2  EC0C  F017         	call	_init_oscillator	;wreg free
   969                           
   970                           ;main.c: 125: SPI1_Initialize();
   971  0026A6  EC2F  F017         	call	_SPI1_Initialize	;wreg free
   972                           
   973                           ;main.c: 127: float temp = 0;
   974  0026AA  0E00               	movlw	0
   975  0026AC  0100               	movlb	0	; () banked
   976  0026AE  0100               	movlb	0	; () banked
   977  0026B0  6FA1               	movwf	main@temp& (0+255),b
   978  0026B2  0E00               	movlw	0
   979  0026B4  0100               	movlb	0	; () banked
   980  0026B6  0100               	movlb	0	; () banked
   981  0026B8  6FA2               	movwf	(main@temp+1)& (0+255),b
   982  0026BA  0E00               	movlw	0
   983  0026BC  0100               	movlb	0	; () banked
   984  0026BE  0100               	movlb	0	; () banked
   985  0026C0  6FA3               	movwf	(main@temp+2)& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 131: TRISCbits.RC2 = 0;
   989  0026C2  9494               	bcf	3988,2,c	;volatile
   990                           
   991                           ; BSR set to: 0
   992                           ;main.c: 133: configure_adc();
   993  0026C4  ECD7  F016         	call	_configure_adc	;wreg free
   994                           
   995                           ;main.c: 134: configure_pwm();
   996  0026C8  ECE7  F016         	call	_configure_pwm	;wreg free
   997                           
   998                           ;main.c: 135: int ticks = 0;
   999  0026CC  0E00               	movlw	0
  1000  0026CE  0100               	movlb	0	; () banked
  1001  0026D0  0100               	movlb	0	; () banked
  1002  0026D2  6FA0               	movwf	(main@ticks+1)& (0+255),b
  1003  0026D4  0E00               	movlw	0
  1004  0026D6  0100               	movlb	0	; () banked
  1005  0026D8  6F9F               	movwf	main@ticks& (0+255),b
  1006  0026DA                     l106:
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;main.c: 138: {
  1010                           ;main.c: 139: MAX_7221_INIT();
  1011  0026DA  EC66  F016         	call	_MAX_7221_INIT	;wreg free
  1012                           
  1013                           ;main.c: 140: temp = get_temperature(0);
  1014  0026DE  0E00               	movlw	0
  1015  0026E0  6E5B               	movwf	get_temperature@sensor+1,c
  1016  0026E2  0E00               	movlw	0
  1017  0026E4  6E5A               	movwf	get_temperature@sensor,c
  1018  0026E6  ECD7  F00A         	call	_get_temperature	;wreg free
  1019  0026EA  C05A  F0A1         	movff	?_get_temperature,main@temp
  1020  0026EE  C05B  F0A2         	movff	?_get_temperature+1,main@temp+1
  1021  0026F2  C05C  F0A3         	movff	?_get_temperature+2,main@temp+2
  1022                           
  1023                           ;main.c: 141: set_fan_speed(temp);
  1024  0026F6  C0A1  F060         	movff	main@temp,set_fan_speed@temp
  1025  0026FA  C0A2  F061         	movff	main@temp+1,set_fan_speed@temp+1
  1026  0026FE  C0A3  F062         	movff	main@temp+2,set_fan_speed@temp+2
  1027  002702  ECA1  F010         	call	_set_fan_speed	;wreg free
  1028                           
  1029                           ;main.c: 142: if(ticks % 125 == 0) {
  1030  002706  C09F  F001         	movff	main@ticks,___awmod@dividend
  1031  00270A  C0A0  F002         	movff	main@ticks+1,___awmod@dividend+1
  1032  00270E  0E00               	movlw	0
  1033  002710  6E04               	movwf	___awmod@divisor+1,c
  1034  002712  0E7D               	movlw	125
  1035  002714  6E03               	movwf	___awmod@divisor,c
  1036  002716  ECF9  F013         	call	___awmod	;wreg free
  1037  00271A  5002               	movf	?___awmod+1,w,c
  1038  00271C  1001               	iorwf	?___awmod,w,c
  1039  00271E  A4D8               	btfss	status,2,c
  1040  002720  D00F               	goto	l5207
  1041                           
  1042                           ;main.c: 143: MAX_7221_WRITE_FLOAT(temp);
  1043  002722  C0A1  F090         	movff	main@temp,MAX_7221_WRITE_FLOAT@value
  1044  002726  C0A2  F091         	movff	main@temp+1,MAX_7221_WRITE_FLOAT@value+1
  1045  00272A  C0A3  F092         	movff	main@temp+2,MAX_7221_WRITE_FLOAT@value+2
  1046  00272E  ECBE  F00E         	call	_MAX_7221_WRITE_FLOAT	;wreg free
  1047                           
  1048                           ;main.c: 144: ticks = 0;
  1049  002732  0E00               	movlw	0
  1050  002734  0100               	movlb	0	; () banked
  1051  002736  0100               	movlb	0	; () banked
  1052  002738  6FA0               	movwf	(main@ticks+1)& (0+255),b
  1053  00273A  0E00               	movlw	0
  1054  00273C  0100               	movlb	0	; () banked
  1055  00273E  6F9F               	movwf	main@ticks& (0+255),b
  1056  002740                     l5207:
  1057                           
  1058                           ;main.c: 145: }
  1059                           ;main.c: 146: ticks++;
  1060  002740  0100               	movlb	0	; () banked
  1061  002742  0100               	movlb	0	; () banked
  1062  002744  4B9F               	infsnz	main@ticks& (0+255),f,b
  1063  002746  2BA0               	incf	(main@ticks+1)& (0+255),f,b
  1064  002748  D7C8               	goto	l106
  1065  00274A                     __end_of_main:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function _set_fan_speed *****************
  1071 ;; Defined at:
  1072 ;;		line 100 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  temp            3    0[BANK0 ] float 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  new_duty_cyc    2    7[BANK0 ] int 
  1077 ;;  tTemp           3    9[BANK0 ] float 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;		None               void
  1080 ;; Registers used:
  1081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1087 ;;      Params:         0       3       0       0       0       0       0       0       0
  1088 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1089 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1090 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1091 ;;Total ram usage:       12 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    2
  1094 ;; This function calls:
  1095 ;;		___awtoft
  1096 ;;		___ftdiv
  1097 ;;		___ftge
  1098 ;;		___ftmul
  1099 ;;		___fttol
  1100 ;; This function is called by:
  1101 ;;		_main
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text1
  1106  002142                     __ptext1:
  1107                           	opt stack 0
  1108  002142                     _set_fan_speed:
  1109                           	opt stack 28
  1110                           
  1111                           ;main.c: 102: if(temp < MIN_TEMP)
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;incstack = 0
  1115  002142  C060  F001         	movff	set_fan_speed@temp,___ftge@ff1
  1116  002146  C061  F002         	movff	set_fan_speed@temp+1,___ftge@ff1+1
  1117  00214A  C062  F003         	movff	set_fan_speed@temp+2,___ftge@ff1+2
  1118  00214E  0E7D               	movlw	low _MIN_TEMP
  1119  002150  6EF6               	movwf	tblptrl,c
  1120  002152  0E08               	movlw	high _MIN_TEMP
  1121  002154  6EF7               	movwf	tblptrh,c
  1122  002156  0009               	tblrd		*+
  1123  002158  CFF5 F004          	movff	tablat,___ftge@ff2
  1124  00215C  0009               	tblrd		*+
  1125  00215E  CFF5 F005          	movff	tablat,___ftge@ff2+1
  1126  002162  000A               	tblrd		*-
  1127  002164  CFF5 F006          	movff	tablat,___ftge@ff2+2
  1128  002168  EC91  F014         	call	___ftge	;wreg free
  1129  00216C  B0D8               	btfsc	status,0,c
  1130  00216E  D008               	goto	l5127
  1131                           
  1132                           ;main.c: 103: {
  1133                           ;main.c: 104: CCPR1L = MIN_DUTY_CYCLE;
  1134  002170  0E82               	movlw	low _MIN_DUTY_CYCLE
  1135  002172  6EF6               	movwf	tblptrl,c
  1136  002174  0E08               	movlw	high _MIN_DUTY_CYCLE
  1137  002176  6EF7               	movwf	tblptrh,c
  1138  002178  0008               	tblrd		*
  1139  00217A  CFF5 FFBE          	movff	tablat,4030	;volatile
  1140                           
  1141                           ;main.c: 105: }
  1142  00217E  0012               	return	
  1143  002180                     l5127:
  1144                           
  1145                           ;main.c: 106: else
  1146                           ;main.c: 107: {
  1147                           ;main.c: 108: float tTemp = temp / MAX_TEMP;
  1148  002180  C060  F02B         	movff	set_fan_speed@temp,___ftdiv@f1
  1149  002184  C061  F02C         	movff	set_fan_speed@temp+1,___ftdiv@f1+1
  1150  002188  C062  F02D         	movff	set_fan_speed@temp+2,___ftdiv@f1+2
  1151  00218C  0E7A               	movlw	low _MAX_TEMP
  1152  00218E  6EF6               	movwf	tblptrl,c
  1153  002190  0E08               	movlw	high _MAX_TEMP
  1154  002192  6EF7               	movwf	tblptrh,c
  1155  002194  0009               	tblrd		*+
  1156  002196  CFF5 F02E          	movff	tablat,___ftdiv@f2
  1157  00219A  0009               	tblrd		*+
  1158  00219C  CFF5 F02F          	movff	tablat,___ftdiv@f2+1
  1159  0021A0  000A               	tblrd		*-
  1160  0021A2  CFF5 F030          	movff	tablat,___ftdiv@f2+2
  1161  0021A6  EC1B  F012         	call	___ftdiv	;wreg free
  1162  0021AA  C02B  F069         	movff	?___ftdiv,set_fan_speed@tTemp
  1163  0021AE  C02C  F06A         	movff	?___ftdiv+1,set_fan_speed@tTemp+1
  1164  0021B2  C02D  F06B         	movff	?___ftdiv+2,set_fan_speed@tTemp+2
  1165                           
  1166                           ;main.c: 109: if(tTemp >= 1)
  1167  0021B6  C069  F001         	movff	set_fan_speed@tTemp,___ftge@ff1
  1168  0021BA  C06A  F002         	movff	set_fan_speed@tTemp+1,___ftge@ff1+1
  1169  0021BE  C06B  F003         	movff	set_fan_speed@tTemp+2,___ftge@ff1+2
  1170  0021C2  0E00               	movlw	0
  1171  0021C4  6E04               	movwf	___ftge@ff2,c
  1172  0021C6  0E80               	movlw	128
  1173  0021C8  6E05               	movwf	___ftge@ff2+1,c
  1174  0021CA  0E3F               	movlw	63
  1175  0021CC  6E06               	movwf	___ftge@ff2+2,c
  1176  0021CE  EC91  F014         	call	___ftge	;wreg free
  1177  0021D2  A0D8               	btfss	status,0,c
  1178  0021D4  D008               	goto	l5133
  1179                           
  1180                           ;main.c: 110: {
  1181                           ;main.c: 111: CCPR1L = MAX_DUTY_CYCLE;
  1182  0021D6  0E80               	movlw	low _MAX_DUTY_CYCLE
  1183  0021D8  6EF6               	movwf	tblptrl,c
  1184  0021DA  0E08               	movlw	high _MAX_DUTY_CYCLE
  1185  0021DC  6EF7               	movwf	tblptrh,c
  1186  0021DE  0008               	tblrd		*
  1187  0021E0  CFF5 FFBE          	movff	tablat,4030	;volatile
  1188                           
  1189                           ;main.c: 112: }
  1190  0021E4  0012               	return	
  1191  0021E6                     l5133:
  1192                           
  1193                           ;main.c: 113: else
  1194                           ;main.c: 114: {
  1195                           ;main.c: 115: int new_duty_cycle = (int)MAX_DUTY_CYCLE * tTemp;
  1196  0021E6  C069  F03D         	movff	set_fan_speed@tTemp,___ftmul@f2
  1197  0021EA  C06A  F03E         	movff	set_fan_speed@tTemp+1,___ftmul@f2+1
  1198  0021EE  C06B  F03F         	movff	set_fan_speed@tTemp+2,___ftmul@f2+2
  1199  0021F2  0E80               	movlw	low _MAX_DUTY_CYCLE
  1200  0021F4  6EF6               	movwf	tblptrl,c
  1201  0021F6  0E08               	movlw	high _MAX_DUTY_CYCLE
  1202  0021F8  6EF7               	movwf	tblptrh,c
  1203  0021FA  0009               	tblrd		*+
  1204  0021FC  CFF5 F009          	movff	tablat,___awtoft@c
  1205  002200  000A               	tblrd		*-
  1206  002202  CFF5 F00A          	movff	tablat,___awtoft@c+1
  1207  002206  EC83  F015         	call	___awtoft	;wreg free
  1208  00220A  C009  F03A         	movff	?___awtoft,___ftmul@f1
  1209  00220E  C00A  F03B         	movff	?___awtoft+1,___ftmul@f1+1
  1210  002212  C00B  F03C         	movff	?___awtoft+2,___ftmul@f1+2
  1211  002216  EC24  F011         	call	___ftmul	;wreg free
  1212  00221A  C03A  F050         	movff	?___ftmul,___fttol@f1
  1213  00221E  C03B  F051         	movff	?___ftmul+1,___fttol@f1+1
  1214  002222  C03C  F052         	movff	?___ftmul+2,___fttol@f1+2
  1215  002226  ECA0  F011         	call	___fttol	;wreg free
  1216  00222A  C050  F063         	movff	?___fttol,??_set_fan_speed
  1217  00222E  C051  F064         	movff	?___fttol+1,??_set_fan_speed+1
  1218  002232  C052  F065         	movff	?___fttol+2,??_set_fan_speed+2
  1219  002236  C053  F066         	movff	?___fttol+3,??_set_fan_speed+3
  1220  00223A  C063  F067         	movff	??_set_fan_speed,set_fan_speed@new_duty_cycle
  1221  00223E  C064  F068         	movff	??_set_fan_speed+1,set_fan_speed@new_duty_cycle+1
  1222                           
  1223                           ;main.c: 116: CCPR1L = new_duty_cycle;
  1224  002242  C067  FFBE         	movff	set_fan_speed@new_duty_cycle,4030	;volatile
  1225  002246  0012               	return	
  1226  002248                     __end_of_set_fan_speed:
  1227                           	opt stack 0
  1228                           tblptru	equ	0xFF8
  1229                           tblptrh	equ	0xFF7
  1230                           tblptrl	equ	0xFF6
  1231                           tablat	equ	0xFF5
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _init_pins *****************
  1235 ;; Defined at:
  1236 ;;		line 33 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;		None               void
  1243 ;; Registers used:
  1244 ;;		wreg, status,2
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        0 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text2
  1264  002B5A                     __ptext2:
  1265                           	opt stack 0
  1266  002B5A                     _init_pins:
  1267                           	opt stack 30
  1268                           
  1269                           ;main.c: 35: LATE = 0x00;
  1270                           
  1271                           ;incstack = 0
  1272  002B5A  0E00               	movlw	0
  1273  002B5C  6E8D               	movwf	3981,c	;volatile
  1274                           
  1275                           ;main.c: 36: LATD = 0x00;
  1276  002B5E  0E00               	movlw	0
  1277  002B60  6E8C               	movwf	3980,c	;volatile
  1278                           
  1279                           ;main.c: 37: LATA = 0x00;
  1280  002B62  0E00               	movlw	0
  1281  002B64  6E89               	movwf	3977,c	;volatile
  1282                           
  1283                           ;main.c: 38: LATB = 0x00;
  1284  002B66  0E00               	movlw	0
  1285  002B68  6E8A               	movwf	3978,c	;volatile
  1286                           
  1287                           ;main.c: 39: LATC = 0x00;
  1288  002B6A  0E00               	movlw	0
  1289  002B6C  6E8B               	movwf	3979,c	;volatile
  1290                           
  1291                           ;main.c: 44: TRISE = 0x07;
  1292  002B6E  0E07               	movlw	7
  1293  002B70  6E96               	movwf	3990,c	;volatile
  1294                           
  1295                           ;main.c: 45: TRISA = 0xFF;
  1296  002B72  6892               	setf	3986,c	;volatile
  1297                           
  1298                           ;main.c: 46: TRISB = 0xF5;
  1299  002B74  0EF5               	movlw	245
  1300  002B76  6E93               	movwf	3987,c	;volatile
  1301                           
  1302                           ;main.c: 47: TRISC = 0x87;
  1303  002B78  0E87               	movlw	135
  1304  002B7A  6E94               	movwf	3988,c	;volatile
  1305                           
  1306                           ;main.c: 48: TRISD = 0xFF;
  1307  002B7C  6895               	setf	3989,c	;volatile
  1308                           
  1309                           ;main.c: 53: ANSELC = 0x84;
  1310  002B7E  0E84               	movlw	132
  1311  002B80  010F               	movlb	15	; () banked
  1312  002B82  010F               	movlb	15	; () banked
  1313  002B84  6F5D               	movwf	93,b	;volatile
  1314                           
  1315                           ;main.c: 54: ANSELB = 0x34;
  1316  002B86  0E34               	movlw	52
  1317  002B88  010F               	movlb	15	; () banked
  1318  002B8A  010F               	movlb	15	; () banked
  1319  002B8C  6F5C               	movwf	92,b	;volatile
  1320                           
  1321                           ; BSR set to: 15
  1322                           ;main.c: 55: ANSELD = 0xFF;
  1323  002B8E  010F               	movlb	15	; () banked
  1324  002B90  010F               	movlb	15	; () banked
  1325  002B92  695E               	setf	94,b	;volatile
  1326                           
  1327                           ;main.c: 56: ANSELE = 0x07;
  1328  002B94  0E07               	movlw	7
  1329  002B96  010F               	movlb	15	; () banked
  1330  002B98  010F               	movlb	15	; () banked
  1331  002B9A  6F5F               	movwf	95,b	;volatile
  1332                           
  1333                           ;main.c: 57: ANSELA = 0x2F;
  1334  002B9C  0E2F               	movlw	47
  1335  002B9E  010F               	movlb	15	; () banked
  1336  002BA0  010F               	movlb	15	; () banked
  1337  002BA2  6F5B               	movwf	91,b	;volatile
  1338                           
  1339                           ; BSR set to: 15
  1340                           ;main.c: 63: INTCON2bits.nRBPU = 0;
  1341  002BA4  9EF1               	bcf	intcon2,7,c	;volatile
  1342                           
  1343                           ; BSR set to: 15
  1344  002BA6  0012               	return	
  1345  002BA8                     __end_of_init_pins:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           intcon2	equ	0xFF1
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _init_oscillator *****************
  1355 ;; Defined at:
  1356 ;;		line 20 in file "main.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, status,2
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1373 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text3
  1384  002E18                     __ptext3:
  1385                           	opt stack 0
  1386  002E18                     _init_oscillator:
  1387                           	opt stack 30
  1388                           
  1389                           ;main.c: 23: OSCCON = 0x60;
  1390                           
  1391                           ; BSR set to: 15
  1392                           ;incstack = 0
  1393  002E18  0E60               	movlw	96
  1394  002E1A  6ED3               	movwf	4051,c	;volatile
  1395                           
  1396                           ;main.c: 25: OSCCON2 = 0x08;
  1397  002E1C  0E08               	movlw	8
  1398  002E1E  6ED2               	movwf	4050,c	;volatile
  1399                           
  1400                           ;main.c: 27: OSCTUNE = 0x00;
  1401  002E20  0E00               	movlw	0
  1402  002E22  6E9B               	movwf	3995,c	;volatile
  1403                           
  1404                           ;main.c: 29: ACTCON = 0x00;
  1405  002E24  0E00               	movlw	0
  1406  002E26  6EB5               	movwf	4021,c	;volatile
  1407  002E28  0012               	return	
  1408  002E2A                     __end_of_init_oscillator:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           intcon2	equ	0xFF1
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _get_temperature *****************
  1418 ;; Defined at:
  1419 ;;		line 18 in file "ntc_temperature.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  sensor          2   89[COMRAM] int 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  temp            3   21[BANK0 ] float 
  1424 ;;  Tn              3   14[BANK0 ] float 
  1425 ;;  Rth             3    3[BANK0 ] float 
  1426 ;;  Vout            3    0[BANK0 ] float 
  1427 ;;  Bth             2   19[BANK0 ] unsigned int 
  1428 ;;  R2              2   17[BANK0 ] unsigned int 
  1429 ;;  R1              2   12[BANK0 ] unsigned int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  3   89[COMRAM] float 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1439 ;;      Params:         3       0       0       0       0       0       0       0       0
  1440 ;;      Locals:         0      24       0       0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1442 ;;      Totals:         3      24       0       0       0       0       0       0       0
  1443 ;;Total ram usage:       27 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    4
  1446 ;; This function calls:
  1447 ;;		___ftadd
  1448 ;;		___ftdiv
  1449 ;;		___ftmul
  1450 ;;		___ftneg
  1451 ;;		___lwtoft
  1452 ;;		___wmul
  1453 ;;		_adc_convert
  1454 ;;		_log
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text4
  1461  0015AE                     __ptext4:
  1462                           	opt stack 0
  1463  0015AE                     _get_temperature:
  1464                           	opt stack 26
  1465                           
  1466                           ;ntc_temperature.c: 20: float Vout;
  1467                           ;ntc_temperature.c: 22: unsigned int R1 = 10000;
  1468                           
  1469                           ;incstack = 0
  1470  0015AE  0E27               	movlw	39
  1471  0015B0  0100               	movlb	0	; () banked
  1472  0015B2  0100               	movlb	0	; () banked
  1473  0015B4  6F6D               	movwf	(get_temperature@R1+1)& (0+255),b
  1474  0015B6  0E10               	movlw	16
  1475  0015B8  0100               	movlb	0	; () banked
  1476  0015BA  6F6C               	movwf	get_temperature@R1& (0+255),b
  1477                           
  1478                           ;ntc_temperature.c: 24: unsigned int R2 = 10000;
  1479  0015BC  0E27               	movlw	39
  1480  0015BE  0100               	movlb	0	; () banked
  1481  0015C0  0100               	movlb	0	; () banked
  1482  0015C2  6F72               	movwf	(get_temperature@R2+1)& (0+255),b
  1483  0015C4  0E10               	movlw	16
  1484  0015C6  0100               	movlb	0	; () banked
  1485  0015C8  6F71               	movwf	get_temperature@R2& (0+255),b
  1486                           
  1487                           ;ntc_temperature.c: 25: float Rth;
  1488                           ;ntc_temperature.c: 26: float Tn = 25+273.15;
  1489  0015CA  0E13               	movlw	19
  1490  0015CC  0100               	movlb	0	; () banked
  1491  0015CE  0100               	movlb	0	; () banked
  1492  0015D0  6F6E               	movwf	get_temperature@Tn& (0+255),b
  1493  0015D2  0E95               	movlw	149
  1494  0015D4  0100               	movlb	0	; () banked
  1495  0015D6  0100               	movlb	0	; () banked
  1496  0015D8  6F6F               	movwf	(get_temperature@Tn+1)& (0+255),b
  1497  0015DA  0E43               	movlw	67
  1498  0015DC  0100               	movlb	0	; () banked
  1499  0015DE  0100               	movlb	0	; () banked
  1500  0015E0  6F70               	movwf	(get_temperature@Tn+2)& (0+255),b
  1501                           
  1502                           ;ntc_temperature.c: 27: unsigned int Bth = 4073;
  1503  0015E2  0E0F               	movlw	15
  1504  0015E4  0100               	movlb	0	; () banked
  1505  0015E6  0100               	movlb	0	; () banked
  1506  0015E8  6F74               	movwf	(get_temperature@Bth+1)& (0+255),b
  1507  0015EA  0EE9               	movlw	233
  1508  0015EC  0100               	movlb	0	; () banked
  1509  0015EE  6F73               	movwf	get_temperature@Bth& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;ntc_temperature.c: 28: float temp;
  1513                           ;ntc_temperature.c: 33: Vout = adc_convert(sensor) * ADC_RESOLUTION;
  1514  0015F0  C05A  F001         	movff	get_temperature@sensor,adc_convert@channel
  1515  0015F4  C05B  F002         	movff	get_temperature@sensor+1,adc_convert@channel+1
  1516  0015F8  EC81  F016         	call	_adc_convert	;wreg free
  1517  0015FC  C001  F017         	movff	?_adc_convert,___lwtoft@c
  1518  001600  C002  F018         	movff	?_adc_convert+1,___lwtoft@c+1
  1519  001604  EC99  F016         	call	___lwtoft	;wreg free
  1520  001608  C017  F03A         	movff	?___lwtoft,___ftmul@f1
  1521  00160C  C018  F03B         	movff	?___lwtoft+1,___ftmul@f1+1
  1522  001610  C019  F03C         	movff	?___lwtoft+2,___ftmul@f1+2
  1523  001614  0E77               	movlw	low _ADC_RESOLUTION
  1524  001616  6EF6               	movwf	tblptrl,c
  1525  001618  0E08               	movlw	high _ADC_RESOLUTION
  1526  00161A  6EF7               	movwf	tblptrh,c
  1527  00161C  0009               	tblrd		*+
  1528  00161E  CFF5 F03D          	movff	tablat,___ftmul@f2
  1529  001622  0009               	tblrd		*+
  1530  001624  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  1531  001628  000A               	tblrd		*-
  1532  00162A  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  1533  00162E  EC24  F011         	call	___ftmul	;wreg free
  1534  001632  C03A  F060         	movff	?___ftmul,get_temperature@Vout
  1535  001636  C03B  F061         	movff	?___ftmul+1,get_temperature@Vout+1
  1536  00163A  C03C  F062         	movff	?___ftmul+2,get_temperature@Vout+2
  1537                           
  1538                           ;ntc_temperature.c: 34: Rth = ((5 * R2) / (5 - Vout)) - R2;
  1539  00163E  0E00               	movlw	0
  1540  001640  6E22               	movwf	___ftadd@f2,c
  1541  001642  0EA0               	movlw	160
  1542  001644  6E23               	movwf	___ftadd@f2+1,c
  1543  001646  0E40               	movlw	64
  1544  001648  6E24               	movwf	___ftadd@f2+2,c
  1545  00164A  C060  F01C         	movff	get_temperature@Vout,___ftneg@f1
  1546  00164E  C061  F01D         	movff	get_temperature@Vout+1,___ftneg@f1+1
  1547  001652  C062  F01E         	movff	get_temperature@Vout+2,___ftneg@f1+2
  1548  001656  ECC4  F016         	call	___ftneg	;wreg free
  1549  00165A  C01C  F01F         	movff	?___ftneg,___ftadd@f1
  1550  00165E  C01D  F020         	movff	?___ftneg+1,___ftadd@f1+1
  1551  001662  C01E  F021         	movff	?___ftneg+2,___ftadd@f1+2
  1552  001666  EC2C  F00D         	call	___ftadd	;wreg free
  1553  00166A  C01F  F02E         	movff	?___ftadd,___ftdiv@f2
  1554  00166E  C020  F02F         	movff	?___ftadd+1,___ftdiv@f2+1
  1555  001672  C021  F030         	movff	?___ftadd+2,___ftdiv@f2+2
  1556  001676  0E00               	movlw	0
  1557  001678  6E14               	movwf	___wmul@multiplicand+1,c
  1558  00167A  0E05               	movlw	5
  1559  00167C  6E13               	movwf	___wmul@multiplicand,c
  1560  00167E  C071  F011         	movff	get_temperature@R2,___wmul@multiplier
  1561  001682  C072  F012         	movff	get_temperature@R2+1,___wmul@multiplier+1
  1562  001686  EC2E  F016         	call	___wmul	;wreg free
  1563  00168A  C011  F017         	movff	?___wmul,___lwtoft@c
  1564  00168E  C012  F018         	movff	?___wmul+1,___lwtoft@c+1
  1565  001692  EC99  F016         	call	___lwtoft	;wreg free
  1566  001696  C017  F02B         	movff	?___lwtoft,___ftdiv@f1
  1567  00169A  C018  F02C         	movff	?___lwtoft+1,___ftdiv@f1+1
  1568  00169E  C019  F02D         	movff	?___lwtoft+2,___ftdiv@f1+2
  1569  0016A2  EC1B  F012         	call	___ftdiv	;wreg free
  1570  0016A6  C02B  F066         	movff	?___ftdiv,_get_temperature$1698
  1571  0016AA  C02C  F067         	movff	?___ftdiv+1,_get_temperature$1698+1
  1572  0016AE  C02D  F068         	movff	?___ftdiv+2,_get_temperature$1698+2
  1573                           
  1574                           ;ntc_temperature.c: 34: Rth = ((5 * R2) / (5 - Vout)) - R2;
  1575  0016B2  C066  F01F         	movff	_get_temperature$1698,___ftadd@f1
  1576  0016B6  C067  F020         	movff	_get_temperature$1698+1,___ftadd@f1+1
  1577  0016BA  C068  F021         	movff	_get_temperature$1698+2,___ftadd@f1+2
  1578  0016BE  C071  F017         	movff	get_temperature@R2,___lwtoft@c
  1579  0016C2  C072  F018         	movff	get_temperature@R2+1,___lwtoft@c+1
  1580  0016C6  EC99  F016         	call	___lwtoft	;wreg free
  1581  0016CA  C017  F01C         	movff	?___lwtoft,___ftneg@f1
  1582  0016CE  C018  F01D         	movff	?___lwtoft+1,___ftneg@f1+1
  1583  0016D2  C019  F01E         	movff	?___lwtoft+2,___ftneg@f1+2
  1584  0016D6  ECC4  F016         	call	___ftneg	;wreg free
  1585  0016DA  C01C  F022         	movff	?___ftneg,___ftadd@f2
  1586  0016DE  C01D  F023         	movff	?___ftneg+1,___ftadd@f2+1
  1587  0016E2  C01E  F024         	movff	?___ftneg+2,___ftadd@f2+2
  1588  0016E6  EC2C  F00D         	call	___ftadd	;wreg free
  1589  0016EA  C01F  F063         	movff	?___ftadd,get_temperature@Rth
  1590  0016EE  C020  F064         	movff	?___ftadd+1,get_temperature@Rth+1
  1591  0016F2  C021  F065         	movff	?___ftadd+2,get_temperature@Rth+2
  1592                           
  1593                           ;ntc_temperature.c: 35: temp = (Bth*Tn) / (Bth + log(Rth / R1) * Tn);
  1594  0016F6  C06C  F017         	movff	get_temperature@R1,___lwtoft@c
  1595  0016FA  C06D  F018         	movff	get_temperature@R1+1,___lwtoft@c+1
  1596  0016FE  EC99  F016         	call	___lwtoft	;wreg free
  1597  001702  C017  F02E         	movff	?___lwtoft,___ftdiv@f2
  1598  001706  C018  F02F         	movff	?___lwtoft+1,___ftdiv@f2+1
  1599  00170A  C019  F030         	movff	?___lwtoft+2,___ftdiv@f2+2
  1600  00170E  C063  F02B         	movff	get_temperature@Rth,___ftdiv@f1
  1601  001712  C064  F02C         	movff	get_temperature@Rth+1,___ftdiv@f1+1
  1602  001716  C065  F02D         	movff	get_temperature@Rth+2,___ftdiv@f1+2
  1603  00171A  EC1B  F012         	call	___ftdiv	;wreg free
  1604  00171E  C02B  F055         	movff	?___ftdiv,log@x
  1605  001722  C02C  F056         	movff	?___ftdiv+1,log@x+1
  1606  001726  C02D  F057         	movff	?___ftdiv+2,log@x+2
  1607  00172A  EC69  F00F         	call	_log	;wreg free
  1608  00172E  C055  F069         	movff	?_log,_get_temperature$1699
  1609  001732  C056  F06A         	movff	?_log+1,_get_temperature$1699+1
  1610  001736  C057  F06B         	movff	?_log+2,_get_temperature$1699+2
  1611                           
  1612                           ;ntc_temperature.c: 35: temp = (Bth*Tn) / (Bth + log(Rth / R1) * Tn);
  1613  00173A  C06E  F03D         	movff	get_temperature@Tn,___ftmul@f2
  1614  00173E  C06F  F03E         	movff	get_temperature@Tn+1,___ftmul@f2+1
  1615  001742  C070  F03F         	movff	get_temperature@Tn+2,___ftmul@f2+2
  1616  001746  C073  F017         	movff	get_temperature@Bth,___lwtoft@c
  1617  00174A  C074  F018         	movff	get_temperature@Bth+1,___lwtoft@c+1
  1618  00174E  EC99  F016         	call	___lwtoft	;wreg free
  1619  001752  C017  F03A         	movff	?___lwtoft,___ftmul@f1
  1620  001756  C018  F03B         	movff	?___lwtoft+1,___ftmul@f1+1
  1621  00175A  C019  F03C         	movff	?___lwtoft+2,___ftmul@f1+2
  1622  00175E  EC24  F011         	call	___ftmul	;wreg free
  1623  001762  C03A  F02B         	movff	?___ftmul,___ftdiv@f1
  1624  001766  C03B  F02C         	movff	?___ftmul+1,___ftdiv@f1+1
  1625  00176A  C03C  F02D         	movff	?___ftmul+2,___ftdiv@f1+2
  1626  00176E  C06E  F03D         	movff	get_temperature@Tn,___ftmul@f2
  1627  001772  C06F  F03E         	movff	get_temperature@Tn+1,___ftmul@f2+1
  1628  001776  C070  F03F         	movff	get_temperature@Tn+2,___ftmul@f2+2
  1629  00177A  C069  F03A         	movff	_get_temperature$1699,___ftmul@f1
  1630  00177E  C06A  F03B         	movff	_get_temperature$1699+1,___ftmul@f1+1
  1631  001782  C06B  F03C         	movff	_get_temperature$1699+2,___ftmul@f1+2
  1632  001786  EC24  F011         	call	___ftmul	;wreg free
  1633  00178A  C03A  F022         	movff	?___ftmul,___ftadd@f2
  1634  00178E  C03B  F023         	movff	?___ftmul+1,___ftadd@f2+1
  1635  001792  C03C  F024         	movff	?___ftmul+2,___ftadd@f2+2
  1636  001796  C073  F017         	movff	get_temperature@Bth,___lwtoft@c
  1637  00179A  C074  F018         	movff	get_temperature@Bth+1,___lwtoft@c+1
  1638  00179E  EC99  F016         	call	___lwtoft	;wreg free
  1639  0017A2  C017  F01F         	movff	?___lwtoft,___ftadd@f1
  1640  0017A6  C018  F020         	movff	?___lwtoft+1,___ftadd@f1+1
  1641  0017AA  C019  F021         	movff	?___lwtoft+2,___ftadd@f1+2
  1642  0017AE  EC2C  F00D         	call	___ftadd	;wreg free
  1643  0017B2  C01F  F02E         	movff	?___ftadd,___ftdiv@f2
  1644  0017B6  C020  F02F         	movff	?___ftadd+1,___ftdiv@f2+1
  1645  0017BA  C021  F030         	movff	?___ftadd+2,___ftdiv@f2+2
  1646  0017BE  EC1B  F012         	call	___ftdiv	;wreg free
  1647  0017C2  C02B  F075         	movff	?___ftdiv,get_temperature@temp
  1648  0017C6  C02C  F076         	movff	?___ftdiv+1,get_temperature@temp+1
  1649  0017CA  C02D  F077         	movff	?___ftdiv+2,get_temperature@temp+2
  1650                           
  1651                           ;ntc_temperature.c: 37: temp = temp - 273.15;
  1652  0017CE  C075  F01F         	movff	get_temperature@temp,___ftadd@f1
  1653  0017D2  C076  F020         	movff	get_temperature@temp+1,___ftadd@f1+1
  1654  0017D6  C077  F021         	movff	get_temperature@temp+2,___ftadd@f1+2
  1655  0017DA  0E93               	movlw	147
  1656  0017DC  6E22               	movwf	___ftadd@f2,c
  1657  0017DE  0E88               	movlw	136
  1658  0017E0  6E23               	movwf	___ftadd@f2+1,c
  1659  0017E2  0EC3               	movlw	195
  1660  0017E4  6E24               	movwf	___ftadd@f2+2,c
  1661  0017E6  EC2C  F00D         	call	___ftadd	;wreg free
  1662  0017EA  C01F  F075         	movff	?___ftadd,get_temperature@temp
  1663  0017EE  C020  F076         	movff	?___ftadd+1,get_temperature@temp+1
  1664  0017F2  C021  F077         	movff	?___ftadd+2,get_temperature@temp+2
  1665                           
  1666                           ;ntc_temperature.c: 39: return temp;
  1667  0017F6  C075  F05A         	movff	get_temperature@temp,?_get_temperature
  1668  0017FA  C076  F05B         	movff	get_temperature@temp+1,?_get_temperature+1
  1669  0017FE  C077  F05C         	movff	get_temperature@temp+2,?_get_temperature+2
  1670  001802  0012               	return	
  1671  001804                     __end_of_get_temperature:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           intcon2	equ	0xFF1
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _log *****************
  1681 ;; Defined at:
  1682 ;;		line 5 in file "/opt/microchip/xc8/v1.31/sources/common/log.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  x               3   84[COMRAM] float 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  exponent        2   87[COMRAM] int 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  3   84[COMRAM] int 
  1689 ;; Registers used:
  1690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1696 ;;      Params:         3       0       0       0       0       0       0       0       0
  1697 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1699 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1700 ;;Total ram usage:        5 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		___awtoft
  1705 ;;		___ftadd
  1706 ;;		___ftmul
  1707 ;;		_eval_poly
  1708 ;;		_frexp
  1709 ;; This function is called by:
  1710 ;;		_get_temperature
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text5
  1715  001ED2                     __ptext5:
  1716                           	opt stack 0
  1717  001ED2                     _log:
  1718                           	opt stack 26
  1719                           
  1720                           ;incstack = 0
  1721  001ED2  5057               	movf	log@x+2,w,c
  1722  001ED4  0A80               	xorlw	128
  1723  001ED6  0F80               	addlw	128
  1724  001ED8  E105               	bnz	u2835
  1725  001EDA  0E00               	movlw	0
  1726  001EDC  5C56               	subwf	log@x+1,w,c
  1727  001EDE  E102               	bnz	u2835
  1728  001EE0  0E00               	movlw	0
  1729  001EE2  5C55               	subwf	log@x,w,c
  1730  001EE4                     u2835:
  1731  001EE4  B0D8               	btfsc	status,0,c
  1732  001EE6  D00E               	goto	l5031
  1733  001EE8  0E00               	movlw	0
  1734  001EEA  0100               	movlb	0	; () banked
  1735  001EEC  0100               	movlb	0	; () banked
  1736  001EEE  6FA5               	movwf	(_errno+1)& (0+255),b
  1737  001EF0  0E21               	movlw	33
  1738  001EF2  0100               	movlb	0	; () banked
  1739  001EF4  6FA4               	movwf	_errno& (0+255),b
  1740  001EF6  0E00               	movlw	0
  1741  001EF8  6E55               	movwf	?_log,c
  1742  001EFA  0E00               	movlw	0
  1743  001EFC  6E56               	movwf	?_log+1,c
  1744  001EFE  0E00               	movlw	0
  1745  001F00  6E57               	movwf	?_log+2,c
  1746  001F02  0012               	return	
  1747  001F04                     l5031:
  1748  001F04  0E7F               	movlw	127
  1749  001F06  1457               	andwf	log@x+2,w,c
  1750  001F08  1056               	iorwf	log@x+1,w,c
  1751  001F0A  1055               	iorwf	log@x,w,c
  1752  001F0C  A4D8               	btfss	status,2,c
  1753  001F0E  D00E               	goto	l5037
  1754  001F10  0E00               	movlw	0
  1755  001F12  0100               	movlb	0	; () banked
  1756  001F14  0100               	movlb	0	; () banked
  1757  001F16  6FA5               	movwf	(_errno+1)& (0+255),b
  1758  001F18  0E22               	movlw	34
  1759  001F1A  0100               	movlb	0	; () banked
  1760  001F1C  6FA4               	movwf	_errno& (0+255),b
  1761  001F1E  0E00               	movlw	0
  1762  001F20  6E55               	movwf	?_log,c
  1763  001F22  0E00               	movlw	0
  1764  001F24  6E56               	movwf	?_log+1,c
  1765  001F26  0E00               	movlw	0
  1766  001F28  6E57               	movwf	?_log+2,c
  1767  001F2A  0012               	return	
  1768  001F2C                     l5037:
  1769  001F2C  0E00               	movlw	0
  1770  001F2E  6E3D               	movwf	___ftmul@f2,c
  1771  001F30  0E00               	movlw	0
  1772  001F32  6E3E               	movwf	___ftmul@f2+1,c
  1773  001F34  0E40               	movlw	64
  1774  001F36  6E3F               	movwf	___ftmul@f2+2,c
  1775  001F38  0E00               	movlw	high log@exponent
  1776  001F3A  6E05               	movwf	frexp@eptr+1,c
  1777  001F3C  0E58               	movlw	low log@exponent
  1778  001F3E  6E04               	movwf	frexp@eptr,c
  1779  001F40  C055  F001         	movff	log@x,frexp@value
  1780  001F44  C056  F002         	movff	log@x+1,frexp@value+1
  1781  001F48  C057  F003         	movff	log@x+2,frexp@value+2
  1782  001F4C  EC47  F014         	call	_frexp	;wreg free
  1783  001F50  C001  F03A         	movff	?_frexp,___ftmul@f1
  1784  001F54  C002  F03B         	movff	?_frexp+1,___ftmul@f1+1
  1785  001F58  C003  F03C         	movff	?_frexp+2,___ftmul@f1+2
  1786  001F5C  EC24  F011         	call	___ftmul	;wreg free
  1787  001F60  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  1788  001F64  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  1789  001F68  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  1790  001F6C  0E00               	movlw	0
  1791  001F6E  6E22               	movwf	___ftadd@f2,c
  1792  001F70  0E80               	movlw	128
  1793  001F72  6E23               	movwf	___ftadd@f2+1,c
  1794  001F74  0EBF               	movlw	191
  1795  001F76  6E24               	movwf	___ftadd@f2+2,c
  1796  001F78  EC2C  F00D         	call	___ftadd	;wreg free
  1797  001F7C  C01F  F055         	movff	?___ftadd,log@x
  1798  001F80  C020  F056         	movff	?___ftadd+1,log@x+1
  1799  001F84  C021  F057         	movff	?___ftadd+2,log@x+2
  1800  001F88  0658               	decf	log@exponent,f,c
  1801  001F8A  A0D8               	btfss	status,0,c
  1802  001F8C  0659               	decf	log@exponent+1,f,c
  1803  001F8E  C055  F049         	movff	log@x,eval_poly@x
  1804  001F92  C056  F04A         	movff	log@x+1,eval_poly@x+1
  1805  001F96  C057  F04B         	movff	log@x+2,eval_poly@x+2
  1806  001F9A  0E08               	movlw	high log@coeff
  1807  001F9C  6E4D               	movwf	eval_poly@d+1,c
  1808  001F9E  0E84               	movlw	low log@coeff
  1809  001FA0  6E4C               	movwf	eval_poly@d,c
  1810  001FA2  0E00               	movlw	0
  1811  001FA4  6E4F               	movwf	eval_poly@n+1,c
  1812  001FA6  0E08               	movlw	8
  1813  001FA8  6E4E               	movwf	eval_poly@n,c
  1814  001FAA  EC8E  F012         	call	_eval_poly	;wreg free
  1815  001FAE  C049  F055         	movff	?_eval_poly,log@x
  1816  001FB2  C04A  F056         	movff	?_eval_poly+1,log@x+1
  1817  001FB6  C04B  F057         	movff	?_eval_poly+2,log@x+2
  1818  001FBA  0E72               	movlw	114
  1819  001FBC  6E3D               	movwf	___ftmul@f2,c
  1820  001FBE  0E31               	movlw	49
  1821  001FC0  6E3E               	movwf	___ftmul@f2+1,c
  1822  001FC2  0E3F               	movlw	63
  1823  001FC4  6E3F               	movwf	___ftmul@f2+2,c
  1824  001FC6  C058  F009         	movff	log@exponent,___awtoft@c
  1825  001FCA  C059  F00A         	movff	log@exponent+1,___awtoft@c+1
  1826  001FCE  EC83  F015         	call	___awtoft	;wreg free
  1827  001FD2  C009  F03A         	movff	?___awtoft,___ftmul@f1
  1828  001FD6  C00A  F03B         	movff	?___awtoft+1,___ftmul@f1+1
  1829  001FDA  C00B  F03C         	movff	?___awtoft+2,___ftmul@f1+2
  1830  001FDE  EC24  F011         	call	___ftmul	;wreg free
  1831  001FE2  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  1832  001FE6  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  1833  001FEA  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  1834  001FEE  C055  F022         	movff	log@x,___ftadd@f2
  1835  001FF2  C056  F023         	movff	log@x+1,___ftadd@f2+1
  1836  001FF6  C057  F024         	movff	log@x+2,___ftadd@f2+2
  1837  001FFA  EC2C  F00D         	call	___ftadd	;wreg free
  1838  001FFE  C01F  F055         	movff	?___ftadd,?_log
  1839  002002  C020  F056         	movff	?___ftadd+1,?_log+1
  1840  002006  C021  F057         	movff	?___ftadd+2,?_log+2
  1841  00200A  0012               	return	
  1842  00200C                     __end_of_log:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           intcon2	equ	0xFF1
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _frexp *****************
  1852 ;; Defined at:
  1853 ;;		line 254 in file "/opt/microchip/xc8/v1.31/sources/common/frexp.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  value           3    0[COMRAM] int 
  1856 ;;  eptr            2    3[COMRAM] PTR int 
  1857 ;;		 -> log@exponent(2), 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  3    0[COMRAM] PTR int 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         5       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        8 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_log
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text6
  1883  00288E                     __ptext6:
  1884                           	opt stack 0
  1885  00288E                     _frexp:
  1886                           	opt stack 28
  1887                           
  1888                           ;incstack = 0
  1889  00288E  0E7F               	movlw	127
  1890  002890  1403               	andwf	frexp@value+2,w,c
  1891  002892  1002               	iorwf	frexp@value+1,w,c
  1892  002894  1001               	iorwf	frexp@value,w,c
  1893  002896  A4D8               	btfss	status,2,c
  1894  002898  D00F               	goto	l4771
  1895  00289A  C004  FFD9         	movff	frexp@eptr,fsr2l
  1896  00289E  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1897  0028A2  0E00               	movlw	0
  1898  0028A4  6EDE               	movwf	postinc2,c
  1899  0028A6  0E00               	movlw	0
  1900  0028A8  6EDD               	movwf	postdec2,c
  1901  0028AA  0E00               	movlw	0
  1902  0028AC  6E01               	movwf	?_frexp,c
  1903  0028AE  0E00               	movlw	0
  1904  0028B0  6E02               	movwf	?_frexp+1,c
  1905  0028B2  0E00               	movlw	0
  1906  0028B4  6E03               	movwf	?_frexp+2,c
  1907  0028B6  0012               	return	
  1908  0028B8                     l4771:
  1909  0028B8  5003               	movf	frexp@value+2,w,c
  1910  0028BA  0B7F               	andlw	127
  1911  0028BC  6E06               	movwf	??_frexp& (0+255),c
  1912  0028BE  90D8               	bcf	status,0,c
  1913  0028C0  3406               	rlcf	??_frexp,w,c
  1914  0028C2  6E07               	movwf	(??_frexp+1)& (0+255),c
  1915  0028C4  6A08               	clrf	(??_frexp+2)& (0+255),c
  1916  0028C6  3608               	rlcf	(??_frexp+2)& (0+255),f,c
  1917  0028C8  C004  FFD9         	movff	frexp@eptr,fsr2l
  1918  0028CC  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1919  0028D0  C007  FFDE         	movff	??_frexp+1,postinc2
  1920  0028D4  C008  FFDD         	movff	??_frexp+2,postdec2
  1921  0028D8  AE02               	btfss	frexp@value+1,7,c
  1922  0028DA  D003               	goto	u2470
  1923  0028DC  6A06               	clrf	??_frexp& (0+255),c
  1924  0028DE  2A06               	incf	??_frexp& (0+255),f,c
  1925  0028E0  D001               	goto	u2478
  1926  0028E2                     u2470:
  1927  0028E2  6A06               	clrf	??_frexp& (0+255),c
  1928  0028E4                     u2478:
  1929  0028E4  5006               	movf	??_frexp,w,c
  1930  0028E6  C004  FFD9         	movff	frexp@eptr,fsr2l
  1931  0028EA  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1932  0028EE  12DE               	iorwf	postinc2,f,c
  1933  0028F0  0E00               	movlw	0
  1934  0028F2  12DD               	iorwf	postdec2,f,c
  1935  0028F4  C004  FFD9         	movff	frexp@eptr,fsr2l
  1936  0028F8  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1937  0028FC  0E82               	movlw	130
  1938  0028FE  26DE               	addwf	postinc2,f,c
  1939  002900  0EFF               	movlw	255
  1940  002902  22DD               	addwfc	postdec2,f,c
  1941  002904  8003               	bsf	frexp@value+2,0,c
  1942  002906  8203               	bsf	frexp@value+2,1,c
  1943  002908  8403               	bsf	frexp@value+2,2,c
  1944  00290A  8603               	bsf	frexp@value+2,3,c
  1945  00290C  8803               	bsf	frexp@value+2,4,c
  1946  00290E  8A03               	bsf	frexp@value+2,5,c
  1947  002910  9C03               	bcf	frexp@value+2,6,c
  1948  002912  9E02               	bcf	frexp@value+1,7,c
  1949  002914  C001  F001         	movff	frexp@value,?_frexp
  1950  002918  C002  F002         	movff	frexp@value+1,?_frexp+1
  1951  00291C  C003  F003         	movff	frexp@value+2,?_frexp+2
  1952  002920  0012               	return	
  1953  002922                     __end_of_frexp:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           intcon2	equ	0xFF1
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _eval_poly *****************
  1967 ;; Defined at:
  1968 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/common/evalpoly.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  x               3   72[COMRAM] PTR int 
  1971 ;;  d               2   75[COMRAM] PTR const 
  1972 ;;		 -> log@coeff(27), 
  1973 ;;  n               2   77[COMRAM] int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  res             3   81[COMRAM] int 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  3   72[COMRAM] int 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1985 ;;      Params:         7       0       0       0       0       0       0       0       0
  1986 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1987 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1988 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1989 ;;Total ram usage:       12 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		___ftadd
  1994 ;;		___ftmul
  1995 ;;		___wmul
  1996 ;; This function is called by:
  1997 ;;		_log
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text7
  2002  00251C                     __ptext7:
  2003                           	opt stack 0
  2004  00251C                     _eval_poly:
  2005                           	opt stack 26
  2006                           
  2007                           ;incstack = 0
  2008  00251C  C04E  F011         	movff	eval_poly@n,___wmul@multiplier
  2009  002520  C04F  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  2010  002524  0E00               	movlw	0
  2011  002526  6E14               	movwf	___wmul@multiplicand+1,c
  2012  002528  0E03               	movlw	3
  2013  00252A  6E13               	movwf	___wmul@multiplicand,c
  2014  00252C  EC2E  F016         	call	___wmul	;wreg free
  2015  002530  C04C  F050         	movff	eval_poly@d,??_eval_poly
  2016  002534  C04D  F051         	movff	eval_poly@d+1,??_eval_poly+1
  2017  002538  5011               	movf	?___wmul,w,c
  2018  00253A  2650               	addwf	??_eval_poly,f,c
  2019  00253C  5012               	movf	?___wmul+1,w,c
  2020  00253E  2251               	addwfc	??_eval_poly+1,f,c
  2021  002540  C050  FFF6         	movff	??_eval_poly,tblptrl
  2022  002544  C051  FFF7         	movff	??_eval_poly+1,tblptrh
  2023  002548  0009               	tblrd		*+
  2024  00254A  CFF5 F052          	movff	tablat,eval_poly@res
  2025  00254E  0009               	tblrd		*+
  2026  002550  CFF5 F053          	movff	tablat,eval_poly@res+1
  2027  002554  000A               	tblrd		*-
  2028  002556  CFF5 F054          	movff	tablat,eval_poly@res+2
  2029  00255A  D03E               	goto	l4787
  2030  00255C                     l4785:
  2031  00255C  C052  F03D         	movff	eval_poly@res,___ftmul@f2
  2032  002560  C053  F03E         	movff	eval_poly@res+1,___ftmul@f2+1
  2033  002564  C054  F03F         	movff	eval_poly@res+2,___ftmul@f2+2
  2034  002568  C049  F03A         	movff	eval_poly@x,___ftmul@f1
  2035  00256C  C04A  F03B         	movff	eval_poly@x+1,___ftmul@f1+1
  2036  002570  C04B  F03C         	movff	eval_poly@x+2,___ftmul@f1+2
  2037  002574  EC24  F011         	call	___ftmul	;wreg free
  2038  002578  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  2039  00257C  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  2040  002580  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  2041  002584  0E00               	movlw	0
  2042  002586  6E14               	movwf	___wmul@multiplicand+1,c
  2043  002588  0E03               	movlw	3
  2044  00258A  6E13               	movwf	___wmul@multiplicand,c
  2045  00258C  064E               	decf	eval_poly@n,f,c
  2046  00258E  A0D8               	btfss	status,0,c
  2047  002590  064F               	decf	eval_poly@n+1,f,c
  2048  002592  C04E  F011         	movff	eval_poly@n,___wmul@multiplier
  2049  002596  C04F  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  2050  00259A  EC2E  F016         	call	___wmul	;wreg free
  2051  00259E  C04C  F050         	movff	eval_poly@d,??_eval_poly
  2052  0025A2  C04D  F051         	movff	eval_poly@d+1,??_eval_poly+1
  2053  0025A6  5011               	movf	?___wmul,w,c
  2054  0025A8  2650               	addwf	??_eval_poly,f,c
  2055  0025AA  5012               	movf	?___wmul+1,w,c
  2056  0025AC  2251               	addwfc	??_eval_poly+1,f,c
  2057  0025AE  C050  FFF6         	movff	??_eval_poly,tblptrl
  2058  0025B2  C051  FFF7         	movff	??_eval_poly+1,tblptrh
  2059  0025B6  0009               	tblrd		*+
  2060  0025B8  CFF5 F022          	movff	tablat,___ftadd@f2
  2061  0025BC  0009               	tblrd		*+
  2062  0025BE  CFF5 F023          	movff	tablat,___ftadd@f2+1
  2063  0025C2  000A               	tblrd		*-
  2064  0025C4  CFF5 F024          	movff	tablat,___ftadd@f2+2
  2065  0025C8  EC2C  F00D         	call	___ftadd	;wreg free
  2066  0025CC  C01F  F052         	movff	?___ftadd,eval_poly@res
  2067  0025D0  C020  F053         	movff	?___ftadd+1,eval_poly@res+1
  2068  0025D4  C021  F054         	movff	?___ftadd+2,eval_poly@res+2
  2069  0025D8                     l4787:
  2070  0025D8  504F               	movf	eval_poly@n+1,w,c
  2071  0025DA  104E               	iorwf	eval_poly@n,w,c
  2072  0025DC  A4D8               	btfss	status,2,c
  2073  0025DE  D7BE               	goto	l4785
  2074  0025E0  C052  F049         	movff	eval_poly@res,?_eval_poly
  2075  0025E4  C053  F04A         	movff	eval_poly@res+1,?_eval_poly+1
  2076  0025E8  C054  F04B         	movff	eval_poly@res+2,?_eval_poly+2
  2077  0025EC  0012               	return	
  2078  0025EE                     __end_of_eval_poly:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon2	equ	0xFF1
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function ___awtoft *****************
  2092 ;; Defined at:
  2093 ;;		line 32 in file "/opt/microchip/xc8/v1.31/sources/common/awtoft.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  c               2    8[COMRAM] int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  sign            1   12[COMRAM] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  3    8[COMRAM] float 
  2100 ;; Registers used:
  2101 ;;		wreg, status,2, status,0, prodl, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2107 ;;      Params:         3       0       0       0       0       0       0       0       0
  2108 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2109 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2110 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2111 ;;Total ram usage:        5 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    1
  2114 ;; This function calls:
  2115 ;;		___ftpack
  2116 ;; This function is called by:
  2117 ;;		_set_fan_speed
  2118 ;;		_log
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text8
  2123  002B06                     __ptext8:
  2124                           	opt stack 0
  2125  002B06                     ___awtoft:
  2126                           	opt stack 28
  2127                           
  2128                           ;incstack = 0
  2129  002B06  6E0C               	movwf	??___awtoft& (0+255),c
  2130  002B08  0E00               	movlw	0
  2131  002B0A  6E0D               	movwf	___awtoft@sign,c
  2132  002B0C  500C               	movf	??___awtoft& (0+255),w,c
  2133  002B0E  500A               	movf	___awtoft@c+1,w,c
  2134  002B10  0A80               	xorlw	128
  2135  002B12  6EF3               	movwf	prodl,c
  2136  002B14  0E80               	movlw	128
  2137  002B16  5CF3               	subwf	prodl,w,c
  2138  002B18  0E00               	movlw	0
  2139  002B1A  B4D8               	btfsc	status,2,c
  2140  002B1C  5C09               	subwf	___awtoft@c,w,c
  2141  002B1E  B0D8               	btfsc	status,0,c
  2142  002B20  D008               	goto	l4643
  2143  002B22  6C09               	negf	___awtoft@c,c
  2144  002B24  1E0A               	comf	___awtoft@c+1,f,c
  2145  002B26  B0D8               	btfsc	status,0,c
  2146  002B28  2A0A               	incf	___awtoft@c+1,f,c
  2147  002B2A  6E0C               	movwf	??___awtoft& (0+255),c
  2148  002B2C  0E01               	movlw	1
  2149  002B2E  6E0D               	movwf	___awtoft@sign,c
  2150  002B30  500C               	movf	??___awtoft& (0+255),w,c
  2151  002B32                     l4643:
  2152  002B32  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2153  002B36  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2154  002B3A  6A03               	clrf	___ftpack@arg+2,c
  2155  002B3C  6E0C               	movwf	??___awtoft& (0+255),c
  2156  002B3E  0E8E               	movlw	142
  2157  002B40  6E04               	movwf	___ftpack@exp,c
  2158  002B42  500C               	movf	??___awtoft& (0+255),w,c
  2159  002B44  C00D  F005         	movff	___awtoft@sign,___ftpack@sign
  2160  002B48  ECA5  F013         	call	___ftpack	;wreg free
  2161  002B4C  C001  F009         	movff	?___ftpack,?___awtoft
  2162  002B50  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2163  002B54  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2164  002B58  0012               	return	
  2165  002B5A                     __end_of___awtoft:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           prodl	equ	0xFF3
  2172                           intcon2	equ	0xFF1
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _adc_convert *****************
  2180 ;; Defined at:
  2181 ;;		line 5 in file "ntc_temperature.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  channel         2    0[COMRAM] int 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  2    0[COMRAM] unsigned int 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2195 ;;      Params:         2       0       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2197 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2198 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        4 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_get_temperature
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text9
  2209  002D02                     __ptext9:
  2210                           	opt stack 0
  2211  002D02                     _adc_convert:
  2212                           	opt stack 29
  2213                           
  2214                           ;ntc_temperature.c: 8: ADCON0bits.CHS = channel;
  2215                           
  2216                           ;incstack = 0
  2217  002D02  C001  F003         	movff	adc_convert@channel,??_adc_convert
  2218  002D06  4603               	rlncf	??_adc_convert,f,c
  2219  002D08  4603               	rlncf	??_adc_convert,f,c
  2220  002D0A  50C2               	movf	4034,w,c	;volatile
  2221  002D0C  1803               	xorwf	??_adc_convert,w,c
  2222  002D0E  0B83               	andlw	-125
  2223  002D10  1803               	xorwf	??_adc_convert,w,c
  2224  002D12  6EC2               	movwf	4034,c	;volatile
  2225                           
  2226                           ;ntc_temperature.c: 10: ADCON0bits.GO = 1;
  2227  002D14  82C2               	bsf	4034,1,c	;volatile
  2228  002D16                     l203:
  2229  002D16  B2C2               	btfsc	4034,1,c	;volatile
  2230  002D18  D7FE               	goto	l203
  2231                           
  2232                           ;ntc_temperature.c: 14: return(ADRESH<<8)|ADRESL;
  2233  002D1A  50C3               	movf	4035,w,c	;volatile
  2234  002D1C  CFC4 F003          	movff	4036,??_adc_convert	;volatile
  2235  002D20  6A04               	clrf	(??_adc_convert+1)& (0+255),c
  2236  002D22  C003  F004         	movff	??_adc_convert,??_adc_convert+1
  2237  002D26  6A03               	clrf	??_adc_convert,c
  2238  002D28  1003               	iorwf	??_adc_convert,w,c
  2239  002D2A  6E01               	movwf	?_adc_convert,c
  2240  002D2C  5004               	movf	??_adc_convert+1,w,c
  2241  002D2E  6E02               	movwf	?_adc_convert+1,c
  2242  002D30  0012               	return	
  2243  002D32                     __end_of_adc_convert:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodl	equ	0xFF3
  2250                           intcon2	equ	0xFF1
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function ___lwtoft *****************
  2258 ;; Defined at:
  2259 ;;		line 28 in file "/opt/microchip/xc8/v1.31/sources/common/lwtoft.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  c               2   22[COMRAM] unsigned int 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  3   22[COMRAM] float 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         3       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        5 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    1
  2280 ;; This function calls:
  2281 ;;		___ftpack
  2282 ;; This function is called by:
  2283 ;;		_get_temperature
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text10
  2288  002D32                     __ptext10:
  2289                           	opt stack 0
  2290  002D32                     ___lwtoft:
  2291                           	opt stack 28
  2292                           
  2293                           ;incstack = 0
  2294  002D32  C017  F001         	movff	___lwtoft@c,___ftpack@arg
  2295  002D36  C018  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  2296  002D3A  6A03               	clrf	___ftpack@arg+2,c
  2297  002D3C  6E1A               	movwf	??___lwtoft& (0+255),c
  2298  002D3E  0E8E               	movlw	142
  2299  002D40  6E04               	movwf	___ftpack@exp,c
  2300  002D42  501A               	movf	??___lwtoft& (0+255),w,c
  2301  002D44  6E1B               	movwf	(??___lwtoft+1)& (0+255),c
  2302  002D46  0E00               	movlw	0
  2303  002D48  6E05               	movwf	___ftpack@sign,c
  2304  002D4A  501B               	movf	(??___lwtoft+1)& (0+255),w,c
  2305  002D4C  ECA5  F013         	call	___ftpack	;wreg free
  2306  002D50  C001  F017         	movff	?___ftpack,?___lwtoft
  2307  002D54  C002  F018         	movff	?___ftpack+1,?___lwtoft+1
  2308  002D58  C003  F019         	movff	?___ftpack+2,?___lwtoft+2
  2309  002D5C  0012               	return	
  2310  002D5E                     __end_of___lwtoft:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodl	equ	0xFF3
  2317                           intcon2	equ	0xFF1
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function ___ftdiv *****************
  2325 ;; Defined at:
  2326 ;;		line 49 in file "/opt/microchip/xc8/v1.31/sources/common/ftdiv.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  f1              3   42[COMRAM] float 
  2329 ;;  f2              3   45[COMRAM] float 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  f3              3   52[COMRAM] float 
  2332 ;;  sign            1   56[COMRAM] unsigned char 
  2333 ;;  exp             1   55[COMRAM] unsigned char 
  2334 ;;  cntr            1   51[COMRAM] unsigned char 
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  3   42[COMRAM] float 
  2337 ;; Registers used:
  2338 ;;		wreg, status,2, status,0, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2344 ;;      Params:         6       0       0       0       0       0       0       0       0
  2345 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2346 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2347 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2348 ;;Total ram usage:       15 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    1
  2351 ;; This function calls:
  2352 ;;		___ftpack
  2353 ;; This function is called by:
  2354 ;;		_set_fan_speed
  2355 ;;		_get_temperature
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text11
  2360  002436                     __ptext11:
  2361                           	opt stack 0
  2362  002436                     ___ftdiv:
  2363                           	opt stack 28
  2364                           
  2365                           ;incstack = 0
  2366  002436  C02D  F031         	movff	___ftdiv@f1+2,??___ftdiv
  2367  00243A  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  2368  00243C  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  2369  00243E  342C               	rlcf	___ftdiv@f1+1,w,c
  2370  002440  3631               	rlcf	??___ftdiv& (0+255),f,c
  2371  002442  E301               	bnc	u2851
  2372  002444  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  2373  002446                     u2851:
  2374  002446  5031               	movf	??___ftdiv,w,c
  2375  002448  6E38               	movwf	___ftdiv@exp,c
  2376  00244A  6638               	tstfsz	___ftdiv@exp& (0+255),c
  2377  00244C  D007               	goto	l5053
  2378  00244E  0E00               	movlw	0
  2379  002450  6E2B               	movwf	?___ftdiv,c
  2380  002452  0E00               	movlw	0
  2381  002454  6E2C               	movwf	?___ftdiv+1,c
  2382  002456  0E00               	movlw	0
  2383  002458  6E2D               	movwf	?___ftdiv+2,c
  2384  00245A  0012               	return	
  2385  00245C                     l5053:
  2386  00245C  C030  F031         	movff	___ftdiv@f2+2,??___ftdiv
  2387  002460  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  2388  002462  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  2389  002464  342F               	rlcf	___ftdiv@f2+1,w,c
  2390  002466  3631               	rlcf	??___ftdiv& (0+255),f,c
  2391  002468  E301               	bnc	u2871
  2392  00246A  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  2393  00246C                     u2871:
  2394  00246C  5031               	movf	??___ftdiv,w,c
  2395  00246E  6E39               	movwf	___ftdiv@sign,c
  2396  002470  6639               	tstfsz	___ftdiv@sign& (0+255),c
  2397  002472  D007               	goto	l5059
  2398  002474  0E00               	movlw	0
  2399  002476  6E2B               	movwf	?___ftdiv,c
  2400  002478  0E00               	movlw	0
  2401  00247A  6E2C               	movwf	?___ftdiv+1,c
  2402  00247C  0E00               	movlw	0
  2403  00247E  6E2D               	movwf	?___ftdiv+2,c
  2404  002480  0012               	return	
  2405  002482                     l5059:
  2406  002482  0E00               	movlw	0
  2407  002484  6E35               	movwf	___ftdiv@f3,c
  2408  002486  0E00               	movlw	0
  2409  002488  6E36               	movwf	___ftdiv@f3+1,c
  2410  00248A  0E00               	movlw	0
  2411  00248C  6E37               	movwf	___ftdiv@f3+2,c
  2412  00248E  5039               	movf	___ftdiv@sign,w,c
  2413  002490  0F89               	addlw	137
  2414  002492  5E38               	subwf	___ftdiv@exp,f,c
  2415  002494  C02D  F039         	movff	___ftdiv@f1+2,___ftdiv@sign
  2416  002498  5030               	movf	___ftdiv@f2+2,w,c
  2417  00249A  1A39               	xorwf	___ftdiv@sign,f,c
  2418  00249C  0E80               	movlw	128
  2419  00249E  1639               	andwf	___ftdiv@sign,f,c
  2420  0024A0  8E2C               	bsf	___ftdiv@f1+1,7,c
  2421  0024A2  0EFF               	movlw	255
  2422  0024A4  162B               	andwf	___ftdiv@f1,f,c
  2423  0024A6  0EFF               	movlw	255
  2424  0024A8  162C               	andwf	___ftdiv@f1+1,f,c
  2425  0024AA  0E00               	movlw	0
  2426  0024AC  162D               	andwf	___ftdiv@f1+2,f,c
  2427  0024AE  8E2F               	bsf	___ftdiv@f2+1,7,c
  2428  0024B0  0EFF               	movlw	255
  2429  0024B2  162E               	andwf	___ftdiv@f2,f,c
  2430  0024B4  0EFF               	movlw	255
  2431  0024B6  162F               	andwf	___ftdiv@f2+1,f,c
  2432  0024B8  0E00               	movlw	0
  2433  0024BA  1630               	andwf	___ftdiv@f2+2,f,c
  2434  0024BC  6E31               	movwf	??___ftdiv& (0+255),c
  2435  0024BE  0E18               	movlw	24
  2436  0024C0  6E34               	movwf	___ftdiv@cntr,c
  2437  0024C2  5031               	movf	??___ftdiv& (0+255),w,c
  2438  0024C4                     l684:
  2439  0024C4  90D8               	bcf	status,0,c
  2440  0024C6  3635               	rlcf	___ftdiv@f3,f,c
  2441  0024C8  3636               	rlcf	___ftdiv@f3+1,f,c
  2442  0024CA  3637               	rlcf	___ftdiv@f3+2,f,c
  2443  0024CC  502E               	movf	___ftdiv@f2,w,c
  2444  0024CE  5C2B               	subwf	___ftdiv@f1,w,c
  2445  0024D0  502F               	movf	___ftdiv@f2+1,w,c
  2446  0024D2  582C               	subwfb	___ftdiv@f1+1,w,c
  2447  0024D4  5030               	movf	___ftdiv@f2+2,w,c
  2448  0024D6  582D               	subwfb	___ftdiv@f1+2,w,c
  2449  0024D8  A0D8               	btfss	status,0,c
  2450  0024DA  D007               	goto	l685
  2451  0024DC  502E               	movf	___ftdiv@f2,w,c
  2452  0024DE  5E2B               	subwf	___ftdiv@f1,f,c
  2453  0024E0  502F               	movf	___ftdiv@f2+1,w,c
  2454  0024E2  5A2C               	subwfb	___ftdiv@f1+1,f,c
  2455  0024E4  5030               	movf	___ftdiv@f2+2,w,c
  2456  0024E6  5A2D               	subwfb	___ftdiv@f1+2,f,c
  2457  0024E8  8035               	bsf	___ftdiv@f3,0,c
  2458  0024EA                     l685:
  2459  0024EA  90D8               	bcf	status,0,c
  2460  0024EC  362B               	rlcf	___ftdiv@f1,f,c
  2461  0024EE  362C               	rlcf	___ftdiv@f1+1,f,c
  2462  0024F0  362D               	rlcf	___ftdiv@f1+2,f,c
  2463  0024F2  2E34               	decfsz	___ftdiv@cntr,f,c
  2464  0024F4  D7E7               	goto	l684
  2465  0024F6  C035  F001         	movff	___ftdiv@f3,___ftpack@arg
  2466  0024FA  C036  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2467  0024FE  C037  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2468  002502  C038  F004         	movff	___ftdiv@exp,___ftpack@exp
  2469  002506  C039  F005         	movff	___ftdiv@sign,___ftpack@sign
  2470  00250A  ECA5  F013         	call	___ftpack	;wreg free
  2471  00250E  C001  F02B         	movff	?___ftpack,?___ftdiv
  2472  002512  C002  F02C         	movff	?___ftpack+1,?___ftdiv+1
  2473  002516  C003  F02D         	movff	?___ftpack+2,?___ftdiv+2
  2474  00251A  0012               	return	
  2475  00251C                     __end_of___ftdiv:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           prodl	equ	0xFF3
  2482                           intcon2	equ	0xFF1
  2483                           postinc2	equ	0xFDE
  2484                           postdec2	equ	0xFDD
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _configure_pwm *****************
  2490 ;; Defined at:
  2491 ;;		line 85 in file "main.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg, status,2
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text12
  2519  002DCE                     __ptext12:
  2520                           	opt stack 0
  2521  002DCE                     _configure_pwm:
  2522                           	opt stack 30
  2523                           
  2524                           ;main.c: 87: CCP1CON = 0b00001100;
  2525                           
  2526                           ;incstack = 0
  2527  002DCE  0E0C               	movlw	12
  2528  002DD0  6EBD               	movwf	4029,c	;volatile
  2529                           
  2530                           ;main.c: 88: PSTR1CON = 0b00010001;
  2531  002DD2  0E11               	movlw	17
  2532  002DD4  6EB9               	movwf	4025,c	;volatile
  2533                           
  2534                           ;main.c: 89: PR2 = 254;
  2535  002DD6  0EFE               	movlw	254
  2536  002DD8  6EBB               	movwf	4027,c	;volatile
  2537                           
  2538                           ;main.c: 90: ECCP1AS = 0b00000000;
  2539  002DDA  0E00               	movlw	0
  2540  002DDC  6EB6               	movwf	4022,c	;volatile
  2541                           
  2542                           ;main.c: 91: CCP1CONbits.CCP1M2 = 1;
  2543  002DDE  84BD               	bsf	4029,2,c	;volatile
  2544                           
  2545                           ;main.c: 92: CCP1CONbits.CCP1M3 = 1;
  2546  002DE0  86BD               	bsf	4029,3,c	;volatile
  2547                           
  2548                           ;main.c: 94: T2CON = 0b00000100;
  2549  002DE2  0E04               	movlw	4
  2550  002DE4  6EBA               	movwf	4026,c	;volatile
  2551                           
  2552                           ;main.c: 96: CCPR1L = 25;
  2553  002DE6  0E19               	movlw	25
  2554  002DE8  6EBE               	movwf	4030,c	;volatile
  2555  002DEA  0012               	return	
  2556  002DEC                     __end_of_configure_pwm:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodl	equ	0xFF3
  2563                           intcon2	equ	0xFF1
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _configure_adc *****************
  2571 ;; Defined at:
  2572 ;;		line 67 in file "main.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2586 ;;      Params:         0       0       0       0       0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text13
  2600  002DAE                     __ptext13:
  2601                           	opt stack 0
  2602  002DAE                     _configure_adc:
  2603                           	opt stack 30
  2604                           
  2605                           ;main.c: 70: TRISAbits.RA0 = 1;
  2606                           
  2607                           ;incstack = 0
  2608  002DAE  8092               	bsf	3986,0,c	;volatile
  2609                           
  2610                           ;main.c: 72: ANSELAbits.ANSA0 = 1;
  2611  002DB0  010F               	movlb	15	; () banked
  2612  002DB2  010F               	movlb	15	; () banked
  2613  002DB4  815B               	bsf	91,0,b	;volatile
  2614                           
  2615                           ;main.c: 74: ADCON2bits.ADFM = 1;
  2616  002DB6  8EC0               	bsf	4032,7,c	;volatile
  2617                           
  2618                           ;main.c: 75: ADCON2bits.ACQT = 0b111;
  2619  002DB8  86C0               	bsf	4032,3,c	;volatile
  2620  002DBA  88C0               	bsf	4032,4,c	;volatile
  2621  002DBC  8AC0               	bsf	4032,5,c	;volatile
  2622                           
  2623                           ; BSR set to: 15
  2624                           ;main.c: 76: ADCON2bits.ADCS = 0b101;
  2625  002DBE  50C0               	movf	4032,w,c	;volatile
  2626  002DC0  0BF8               	andlw	-8
  2627  002DC2  0905               	iorlw	5
  2628  002DC4  6EC0               	movwf	4032,c	;volatile
  2629                           
  2630                           ; BSR set to: 15
  2631                           ;main.c: 78: ADCON1bits.PVCFG0 = 0;
  2632  002DC6  94C1               	bcf	4033,2,c	;volatile
  2633                           
  2634                           ; BSR set to: 15
  2635                           ;main.c: 80: ADCON1bits.NVCFG1 = 0;
  2636  002DC8  92C1               	bcf	4033,1,c	;volatile
  2637                           
  2638                           ; BSR set to: 15
  2639                           ;main.c: 82: ADCON0bits.ADON = 1;
  2640  002DCA  80C2               	bsf	4034,0,c	;volatile
  2641                           
  2642                           ; BSR set to: 15
  2643  002DCC  0012               	return	
  2644  002DCE                     __end_of_configure_adc:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodl	equ	0xFF3
  2651                           intcon2	equ	0xFF1
  2652                           postinc2	equ	0xFDE
  2653                           postdec2	equ	0xFDD
  2654                           fsr2h	equ	0xFDA
  2655                           fsr2l	equ	0xFD9
  2656                           status	equ	0xFD8
  2657                           
  2658 ;; *************** function _SPI1_Initialize *****************
  2659 ;; Defined at:
  2660 ;;		line 6 in file "spi.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;		None
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		wreg, status,2
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2674 ;;      Params:         0       0       0       0       0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2677 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2678 ;;Total ram usage:        0 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text14
  2688  002E5E                     __ptext14:
  2689                           	opt stack 0
  2690  002E5E                     _SPI1_Initialize:
  2691                           	opt stack 30
  2692                           
  2693                           ;spi.c: 11: SSP1STAT = 0x80;
  2694                           
  2695                           ; BSR set to: 15
  2696                           ;incstack = 0
  2697  002E5E  0E80               	movlw	128
  2698  002E60  6EC7               	movwf	4039,c	;volatile
  2699                           
  2700                           ;spi.c: 14: SSP1CON1 = 0x30;
  2701  002E62  0E30               	movlw	48
  2702  002E64  6EC6               	movwf	4038,c	;volatile
  2703                           
  2704                           ;spi.c: 17: SSP1ADD = 0x00;
  2705  002E66  0E00               	movlw	0
  2706  002E68  6EC8               	movwf	4040,c	;volatile
  2707  002E6A  0012               	return	
  2708  002E6C                     __end_of_SPI1_Initialize:
  2709                           	opt stack 0
  2710                           tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           prodl	equ	0xFF3
  2715                           intcon2	equ	0xFF1
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _MAX_7221_WRITE_FLOAT *****************
  2723 ;; Defined at:
  2724 ;;		line 42 in file "max7221.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  value           3   48[BANK0 ] float 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  dig2            2   57[BANK0 ] unsigned int 
  2729 ;;  dig1            2   55[BANK0 ] unsigned int 
  2730 ;;  digits          4   59[BANK0 ] unsigned char [4]
  2731 ;; Return value:  Size  Location     Type
  2732 ;;		None               void
  2733 ;; Registers used:
  2734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2740 ;;      Params:         0       3       0       0       0       0       0       0       0
  2741 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2742 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2743 ;;      Totals:         0      15       0       0       0       0       0       0       0
  2744 ;;Total ram usage:       15 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    5
  2747 ;; This function calls:
  2748 ;;		_MAX_7221_WRITE
  2749 ;;		___ftge
  2750 ;;		_sprintf
  2751 ;; This function is called by:
  2752 ;;		_main
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text15
  2757  001D7C                     __ptext15:
  2758                           	opt stack 0
  2759  001D7C                     _MAX_7221_WRITE_FLOAT:
  2760                           	opt stack 25
  2761                           
  2762                           ;max7221.c: 44: if(value > 99.9)
  2763                           
  2764                           ;incstack = 0
  2765  001D7C  0ECD               	movlw	205
  2766  001D7E  6E01               	movwf	___ftge@ff1,c
  2767  001D80  0EC7               	movlw	199
  2768  001D82  6E02               	movwf	___ftge@ff1+1,c
  2769  001D84  0E42               	movlw	66
  2770  001D86  6E03               	movwf	___ftge@ff1+2,c
  2771  001D88  C090  F004         	movff	MAX_7221_WRITE_FLOAT@value,___ftge@ff2
  2772  001D8C  C091  F005         	movff	MAX_7221_WRITE_FLOAT@value+1,___ftge@ff2+1
  2773  001D90  C092  F006         	movff	MAX_7221_WRITE_FLOAT@value+2,___ftge@ff2+2
  2774  001D94  EC91  F014         	call	___ftge	;wreg free
  2775  001D98  A0D8               	btfss	status,0,c
  2776  001D9A  0012               	return	
  2777                           
  2778                           ;max7221.c: 46: if(value < 0)
  2779                           
  2780                           ;max7221.c: 45: return;
  2781  001D9C  0100               	movlb	0	; () banked
  2782  001D9E  0100               	movlb	0	; () banked
  2783  001DA0  5192               	movf	(MAX_7221_WRITE_FLOAT@value+2)& (0+255),w,b
  2784  001DA2  0A80               	xorlw	128
  2785  001DA4  0F80               	addlw	128
  2786  001DA6  E107               	bnz	u2935
  2787  001DA8  0E00               	movlw	0
  2788  001DAA  0100               	movlb	0	; () banked
  2789  001DAC  5D91               	subwf	(MAX_7221_WRITE_FLOAT@value+1)& (0+255),w,b
  2790  001DAE  E103               	bnz	u2935
  2791  001DB0  0E00               	movlw	0
  2792  001DB2  0100               	movlb	0	; () banked
  2793  001DB4  5D90               	subwf	MAX_7221_WRITE_FLOAT@value& (0+255),w,b
  2794  001DB6                     u2935:
  2795  001DB6  A0D8               	btfss	status,0,c
  2796  001DB8  0012               	return	
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;max7221.c: 50: char digits[4];
  2800                           ;max7221.c: 52: sprintf(digits, "%.1f", value);
  2801                           
  2802                           ; BSR set to: 0
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;max7221.c: 47: return;
  2806  001DBA  0100               	movlb	0	; () banked
  2807  001DBC  0E00               	movlw	high MAX_7221_WRITE_FLOAT@digits
  2808  001DBE  0100               	movlb	0	; () banked
  2809  001DC0  0100               	movlb	0	; () banked
  2810  001DC2  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2811  001DC4  0100               	movlb	0	; () banked
  2812  001DC6  0E9B               	movlw	low MAX_7221_WRITE_FLOAT@digits
  2813  001DC8  0100               	movlb	0	; () banked
  2814  001DCA  0100               	movlb	0	; () banked
  2815  001DCC  6F60               	movwf	sprintf@sp& (0+255),b
  2816  001DCE  0E08               	movlw	high STR_1
  2817  001DD0  0100               	movlb	0	; () banked
  2818  001DD2  0100               	movlb	0	; () banked
  2819  001DD4  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2820  001DD6  0E9F               	movlw	low STR_1
  2821  001DD8  0100               	movlb	0	; () banked
  2822  001DDA  0100               	movlb	0	; () banked
  2823  001DDC  6F62               	movwf	sprintf@f& (0+255),b
  2824  001DDE  C090  F064         	movff	MAX_7221_WRITE_FLOAT@value,?_sprintf+4
  2825  001DE2  C091  F065         	movff	MAX_7221_WRITE_FLOAT@value+1,?_sprintf+5
  2826  001DE6  C092  F066         	movff	MAX_7221_WRITE_FLOAT@value+2,?_sprintf+6
  2827  001DEA  EC53  F004         	call	_sprintf	;wreg free
  2828                           
  2829                           ;max7221.c: 53: if(digits[1] == '.') {
  2830  001DEE  0100               	movlb	0	; () banked
  2831  001DF0  0100               	movlb	0	; () banked
  2832  001DF2  519C               	movf	(MAX_7221_WRITE_FLOAT@digits+1)& (0+255),w,b
  2833  001DF4  0A2E               	xorlw	46
  2834  001DF6  A4D8               	btfss	status,2,c
  2835  001DF8  D028               	goto	l5175
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;max7221.c: 54: unsigned int dig1 = (digits[0] - '0')|0x80;
  2839  001DFA  0ED0               	movlw	208
  2840  001DFC  0100               	movlb	0	; () banked
  2841  001DFE  6F93               	movwf	??_MAX_7221_WRITE_FLOAT& (0+255),b
  2842  001E00  0EFF               	movlw	255
  2843  001E02  6F94               	movwf	(??_MAX_7221_WRITE_FLOAT+1)& (0+255),b
  2844  001E04  0100               	movlb	0	; () banked
  2845  001E06  0100               	movlb	0	; () banked
  2846  001E08  519B               	movf	MAX_7221_WRITE_FLOAT@digits& (0+255),w,b
  2847  001E0A  0100               	movlb	0	; () banked
  2848  001E0C  6F95               	movwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),b
  2849  001E0E  6B96               	clrf	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),b
  2850  001E10  0100               	movlb	0	; () banked
  2851  001E12  5193               	movf	??_MAX_7221_WRITE_FLOAT& (0+255),w,b
  2852  001E14  0100               	movlb	0	; () banked
  2853  001E16  2795               	addwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),f,b
  2854  001E18  0100               	movlb	0	; () banked
  2855  001E1A  5194               	movf	(??_MAX_7221_WRITE_FLOAT+1)& (0+255),w,b
  2856  001E1C  0100               	movlb	0	; () banked
  2857  001E1E  2396               	addwfc	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),f,b
  2858  001E20  0E80               	movlw	128
  2859  001E22  0100               	movlb	0	; () banked
  2860  001E24  1195               	iorwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),w,b
  2861  001E26  0100               	movlb	0	; () banked
  2862  001E28  0100               	movlb	0	; () banked
  2863  001E2A  6F97               	movwf	MAX_7221_WRITE_FLOAT@dig1& (0+255),b
  2864  001E2C  0100               	movlb	0	; () banked
  2865  001E2E  5196               	movf	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),w,b
  2866  001E30  0100               	movlb	0	; () banked
  2867  001E32  6F98               	movwf	(MAX_7221_WRITE_FLOAT@dig1+1)& (0+255),b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;max7221.c: 55: MAX_7221_WRITE(0x01, dig1);
  2871  001E34  0E00               	movlw	0
  2872  001E36  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  2873  001E38  0E01               	movlw	1
  2874  001E3A  6E02               	movwf	MAX_7221_WRITE@reg,c
  2875  001E3C  C097  F004         	movff	MAX_7221_WRITE_FLOAT@dig1,MAX_7221_WRITE@value
  2876  001E40  C098  F005         	movff	MAX_7221_WRITE_FLOAT@dig1+1,MAX_7221_WRITE@value+1
  2877  001E44  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  2878                           
  2879                           ;max7221.c: 56: } else {
  2880  001E48  D00A               	goto	l5177
  2881  001E4A                     l5175:
  2882                           
  2883                           ;max7221.c: 57: MAX_7221_WRITE(0x01, digits[0]);
  2884  001E4A  0E00               	movlw	0
  2885  001E4C  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  2886  001E4E  0E01               	movlw	1
  2887  001E50  6E02               	movwf	MAX_7221_WRITE@reg,c
  2888  001E52  0100               	movlb	0	; () banked
  2889  001E54  C09B  F004         	movff	MAX_7221_WRITE_FLOAT@digits,MAX_7221_WRITE@value
  2890  001E58  6A05               	clrf	MAX_7221_WRITE@value+1,c
  2891  001E5A  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  2892  001E5E                     l5177:
  2893                           
  2894                           ;max7221.c: 58: }
  2895                           ;max7221.c: 59: if(digits[2] = '.') {
  2896  001E5E  0100               	movlb	0	; () banked
  2897  001E60  6F93               	movwf	??_MAX_7221_WRITE_FLOAT& (0+255),b
  2898  001E62  0E2E               	movlw	46
  2899  001E64  0100               	movlb	0	; () banked
  2900  001E66  0100               	movlb	0	; () banked
  2901  001E68  6F9D               	movwf	(MAX_7221_WRITE_FLOAT@digits+2)& (0+255),b
  2902  001E6A  0100               	movlb	0	; () banked
  2903  001E6C  5193               	movf	??_MAX_7221_WRITE_FLOAT& (0+255),w,b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;max7221.c: 60: unsigned int dig2 = (digits[1] - '0')|0x80;
  2907  001E6E  0ED0               	movlw	208
  2908  001E70  0100               	movlb	0	; () banked
  2909  001E72  6F93               	movwf	??_MAX_7221_WRITE_FLOAT& (0+255),b
  2910  001E74  0EFF               	movlw	255
  2911  001E76  6F94               	movwf	(??_MAX_7221_WRITE_FLOAT+1)& (0+255),b
  2912  001E78  0100               	movlb	0	; () banked
  2913  001E7A  0100               	movlb	0	; () banked
  2914  001E7C  519C               	movf	(MAX_7221_WRITE_FLOAT@digits+1)& (0+255),w,b
  2915  001E7E  0100               	movlb	0	; () banked
  2916  001E80  6F95               	movwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),b
  2917  001E82  6B96               	clrf	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),b
  2918  001E84  0100               	movlb	0	; () banked
  2919  001E86  5193               	movf	??_MAX_7221_WRITE_FLOAT& (0+255),w,b
  2920  001E88  0100               	movlb	0	; () banked
  2921  001E8A  2795               	addwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),f,b
  2922  001E8C  0100               	movlb	0	; () banked
  2923  001E8E  5194               	movf	(??_MAX_7221_WRITE_FLOAT+1)& (0+255),w,b
  2924  001E90  0100               	movlb	0	; () banked
  2925  001E92  2396               	addwfc	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),f,b
  2926  001E94  0E80               	movlw	128
  2927  001E96  0100               	movlb	0	; () banked
  2928  001E98  1195               	iorwf	(??_MAX_7221_WRITE_FLOAT+2)& (0+255),w,b
  2929  001E9A  0100               	movlb	0	; () banked
  2930  001E9C  0100               	movlb	0	; () banked
  2931  001E9E  6F99               	movwf	MAX_7221_WRITE_FLOAT@dig2& (0+255),b
  2932  001EA0  0100               	movlb	0	; () banked
  2933  001EA2  5196               	movf	(??_MAX_7221_WRITE_FLOAT+3)& (0+255),w,b
  2934  001EA4  0100               	movlb	0	; () banked
  2935  001EA6  6F9A               	movwf	(MAX_7221_WRITE_FLOAT@dig2+1)& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;max7221.c: 61: MAX_7221_WRITE(0x02, dig2);
  2939  001EA8  0E00               	movlw	0
  2940  001EAA  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  2941  001EAC  0E02               	movlw	2
  2942  001EAE  6E02               	movwf	MAX_7221_WRITE@reg,c
  2943  001EB0  C099  F004         	movff	MAX_7221_WRITE_FLOAT@dig2,MAX_7221_WRITE@value
  2944  001EB4  C09A  F005         	movff	MAX_7221_WRITE_FLOAT@dig2+1,MAX_7221_WRITE@value+1
  2945  001EB8  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  2946                           
  2947                           ;max7221.c: 64: }
  2948                           ;max7221.c: 65: MAX_7221_WRITE(0x03, digits[3]);
  2949                           
  2950                           ;max7221.c: 63: MAX_7221_WRITE(0x02, digits[1]);
  2951                           
  2952                           ;max7221.c: 62: } else {
  2953  001EBC  0E00               	movlw	0
  2954  001EBE  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  2955  001EC0  0E03               	movlw	3
  2956  001EC2  6E02               	movwf	MAX_7221_WRITE@reg,c
  2957  001EC4  0100               	movlb	0	; () banked
  2958  001EC6  C09E  F004         	movff	MAX_7221_WRITE_FLOAT@digits+3,MAX_7221_WRITE@value
  2959  001ECA  6A05               	clrf	MAX_7221_WRITE@value+1,c
  2960  001ECC  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  2961  001ED0  0012               	return	
  2962  001ED2                     __end_of_MAX_7221_WRITE_FLOAT:
  2963                           	opt stack 0
  2964                           tblptru	equ	0xFF8
  2965                           tblptrh	equ	0xFF7
  2966                           tblptrl	equ	0xFF6
  2967                           tablat	equ	0xFF5
  2968                           prodl	equ	0xFF3
  2969                           intcon2	equ	0xFF1
  2970                           postinc2	equ	0xFDE
  2971                           postdec2	equ	0xFDD
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _sprintf *****************
  2977 ;; Defined at:
  2978 ;;		line 492 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  2981 ;;		 -> MAX_7221_WRITE_FLOAT@digits(4), 
  2982 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2983 ;;		 -> STR_1(5), 
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  vd              4   22[BANK0 ] unsigned long 
  2986 ;;  vd              4   26[BANK0 ] unsigned long 
  2987 ;;  _val            5   32[BANK0 ] struct .
  2988 ;;  fval            3   44[BANK0 ] struct .
  2989 ;;  integ           3   37[BANK0 ] struct .
  2990 ;;  ival            3    0        struct .
  2991 ;;  prec            2   42[BANK0 ] int 
  2992 ;;  exp             2   40[BANK0 ] int 
  2993 ;;  flag            2   30[BANK0 ] unsigned short 
  2994 ;;  ap              2   20[BANK0 ] PTR void [1]
  2995 ;;		 -> ?_sprintf(2), 
  2996 ;;  width           2    0        int 
  2997 ;;  c               1   47[BANK0 ] char 
  2998 ;;  d               1    0        unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  2    0[BANK0 ] int 
  3001 ;; Registers used:
  3002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3008 ;;      Params:         0       7       0       0       0       0       0       0       0
  3009 ;;      Locals:         0      35       0       0       0       0       0       0       0
  3010 ;;      Temps:          0       6       0       0       0       0       0       0       0
  3011 ;;      Totals:         0      48       0       0       0       0       0       0       0
  3012 ;;Total ram usage:       48 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; Hardware stack levels required when called:    4
  3015 ;; This function calls:
  3016 ;;		___asftadd
  3017 ;;		___asftmul
  3018 ;;		___asftsub
  3019 ;;		___awdiv
  3020 ;;		___ftge
  3021 ;;		___ftmul
  3022 ;;		___ftneg
  3023 ;;		___fttol
  3024 ;;		___lldiv
  3025 ;;		___llmod
  3026 ;;		___lltoft
  3027 ;;		___wmul
  3028 ;;		__div_to_l_
  3029 ;;		__tdiv_to_l_
  3030 ;;		_fround
  3031 ;;		_isdigit
  3032 ;;		_scale
  3033 ;; This function is called by:
  3034 ;;		_MAX_7221_WRITE_FLOAT
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           	psect	text16
  3039  0008A6                     __ptext16:
  3040                           	opt stack 0
  3041  0008A6                     _sprintf:
  3042                           	opt stack 25
  3043                           
  3044                           ;doprnt.c: 494: va_list ap;
  3045                           ;doprnt.c: 499: signed char c;
  3046                           ;doprnt.c: 501: int width;
  3047                           ;doprnt.c: 504: int prec;
  3048                           ;doprnt.c: 508: unsigned short flag;
  3049                           ;doprnt.c: 515: char d;
  3050                           ;doprnt.c: 516: double fval, integ;
  3051                           ;doprnt.c: 517: int exp;
  3052                           ;doprnt.c: 518: double ival;
  3053                           ;doprnt.c: 519: union {
  3054                           ;doprnt.c: 520: unsigned long _val;
  3055                           ;doprnt.c: 521: struct {
  3056                           ;doprnt.c: 522: const char * _cp;
  3057                           ;doprnt.c: 523: unsigned _len;
  3058                           ;doprnt.c: 524: } _str;
  3059                           ;doprnt.c: 525: } _val;
  3060                           ;doprnt.c: 542: *ap = __va_start();
  3061                           
  3062                           ;incstack = 0
  3063  0008A6  0100               	movlb	0	; () banked
  3064  0008A8  0E00               	movlw	high (?_sprintf+4)
  3065  0008AA  0100               	movlb	0	; () banked
  3066  0008AC  0100               	movlb	0	; () banked
  3067  0008AE  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  3068  0008B0  0100               	movlb	0	; () banked
  3069  0008B2  0E64               	movlw	low (?_sprintf+4)
  3070  0008B4  0100               	movlb	0	; () banked
  3071  0008B6  0100               	movlb	0	; () banked
  3072  0008B8  6F74               	movwf	sprintf@ap& (0+255),b
  3073                           
  3074                           ;doprnt.c: 545: while(c = *f++) {
  3075  0008BA  EFB9  F008         	goto	l5011
  3076  0008BE                     l4809:
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;doprnt.c: 547: if(c != '%')
  3080  0008BE  0100               	movlb	0	; () banked
  3081  0008C0  0100               	movlb	0	; () banked
  3082  0008C2  518F               	movf	sprintf@c& (0+255),w,b
  3083  0008C4  0A25               	xorlw	37
  3084  0008C6  B4D8               	btfsc	status,2,c
  3085  0008C8  D009               	goto	l4815
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;doprnt.c: 549: {
  3089                           ;doprnt.c: 550: ((*sp++ = (c)));
  3090  0008CA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3091  0008CE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3092  0008D2  0100               	movlb	0	; () banked
  3093  0008D4  C08F  FFDF         	movff	sprintf@c,indf2
  3094  0008D8  EFB5  F008         	goto	L1
  3095  0008DC                     l4815:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;doprnt.c: 552: }
  3099                           ;doprnt.c: 557: flag = 0;
  3100  0008DC  0E00               	movlw	0
  3101  0008DE  0100               	movlb	0	; () banked
  3102  0008E0  0100               	movlb	0	; () banked
  3103  0008E2  6F7F               	movwf	(sprintf@flag+1)& (0+255),b
  3104  0008E4  0E00               	movlw	0
  3105  0008E6  0100               	movlb	0	; () banked
  3106  0008E8  6F7E               	movwf	sprintf@flag& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;doprnt.c: 620: if(*f == '.') {
  3110  0008EA  0100               	movlb	0	; () banked
  3111  0008EC  C062  FFF6         	movff	sprintf@f,tblptrl
  3112  0008F0  0100               	movlb	0	; () banked
  3113  0008F2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3114  0008F6  0008               	tblrd		*
  3115  0008F8  50F5               	movf	tablat,w,c
  3116  0008FA  0A2E               	xorlw	46
  3117  0008FC  A4D8               	btfss	status,2,c
  3118  0008FE  D03E               	goto	l4829
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;doprnt.c: 621: flag |= 0x4000;
  3122  000900  0100               	movlb	0	; () banked
  3123  000902  0100               	movlb	0	; () banked
  3124  000904  8D7F               	bsf	(sprintf@flag+1)& (0+255),6,b
  3125                           
  3126                           ;doprnt.c: 622: f++;
  3127  000906  0100               	movlb	0	; () banked
  3128  000908  0100               	movlb	0	; () banked
  3129  00090A  4B62               	infsnz	sprintf@f& (0+255),f,b
  3130  00090C  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 629: {
  3134                           ;doprnt.c: 630: prec = 0;
  3135  00090E  0E00               	movlw	0
  3136  000910  0100               	movlb	0	; () banked
  3137  000912  0100               	movlb	0	; () banked
  3138  000914  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3139  000916  0E00               	movlw	0
  3140  000918  0100               	movlb	0	; () banked
  3141  00091A  6F8A               	movwf	sprintf@prec& (0+255),b
  3142                           
  3143                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  3144  00091C  D022               	goto	l4827
  3145  00091E                     l4823:
  3146                           
  3147                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  3148  00091E  C08A  F011         	movff	sprintf@prec,___wmul@multiplier
  3149  000922  C08B  F012         	movff	sprintf@prec+1,___wmul@multiplier+1
  3150  000926  0E00               	movlw	0
  3151  000928  6E14               	movwf	___wmul@multiplicand+1,c
  3152  00092A  0E0A               	movlw	10
  3153  00092C  6E13               	movwf	___wmul@multiplicand,c
  3154  00092E  EC2E  F016         	call	___wmul	;wreg free
  3155  000932  0100               	movlb	0	; () banked
  3156  000934  C062  FFF6         	movff	sprintf@f,tblptrl
  3157  000938  0100               	movlb	0	; () banked
  3158  00093A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3159  00093E  0008               	tblrd		*
  3160  000940  50F5               	movf	tablat,w,c
  3161  000942  2611               	addwf	?___wmul,f,c
  3162  000944  0E00               	movlw	0
  3163  000946  2212               	addwfc	?___wmul+1,f,c
  3164  000948  0ED0               	movlw	208
  3165  00094A  2411               	addwf	?___wmul,w,c
  3166  00094C  0100               	movlb	0	; () banked
  3167  00094E  0100               	movlb	0	; () banked
  3168  000950  6F8A               	movwf	sprintf@prec& (0+255),b
  3169  000952  0EFF               	movlw	255
  3170  000954  2012               	addwfc	?___wmul+1,w,c
  3171  000956  0100               	movlb	0	; () banked
  3172  000958  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175  00095A  0100               	movlb	0	; () banked
  3176  00095C  0100               	movlb	0	; () banked
  3177  00095E  4B62               	infsnz	sprintf@f& (0+255),f,b
  3178  000960  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3179  000962                     l4827:
  3180                           
  3181                           ; BSR set to: 0
  3182  000962  0100               	movlb	0	; () banked
  3183  000964  C062  FFF6         	movff	sprintf@f,tblptrl
  3184  000968  0100               	movlb	0	; () banked
  3185  00096A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3186  00096E  0008               	tblrd		*
  3187  000970  50F5               	movf	tablat,w,c
  3188  000972  ECAF  F016         	call	_isdigit
  3189  000976  A0D8               	btfss	status,0,c
  3190  000978  D010               	goto	l4837
  3191  00097A  D7D1               	goto	l4823
  3192  00097C                     l4829:
  3193                           
  3194                           ;doprnt.c: 635: prec = 0;
  3195  00097C  0E00               	movlw	0
  3196  00097E  0100               	movlb	0	; () banked
  3197  000980  0100               	movlb	0	; () banked
  3198  000982  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3199  000984  0E00               	movlw	0
  3200  000986  0100               	movlb	0	; () banked
  3201  000988  6F8A               	movwf	sprintf@prec& (0+255),b
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;doprnt.c: 637: flag |= 0x1000;
  3205  00098A  0100               	movlb	0	; () banked
  3206  00098C  0100               	movlb	0	; () banked
  3207  00098E  897F               	bsf	(sprintf@flag+1)& (0+255),4,b
  3208  000990  D004               	goto	l4837
  3209  000992                     l4833:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;doprnt.c: 672: flag |= 0x400;
  3213  000992  0100               	movlb	0	; () banked
  3214  000994  0100               	movlb	0	; () banked
  3215  000996  857F               	bsf	(sprintf@flag+1)& (0+255),2,b
  3216                           
  3217                           ;doprnt.c: 673: break;
  3218  000998  D017               	goto	l4839
  3219  00099A                     l4837:
  3220  00099A  0100               	movlb	0	; () banked
  3221  00099C  C062  FFF6         	movff	sprintf@f,tblptrl
  3222  0009A0  0100               	movlb	0	; () banked
  3223  0009A2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3224  0009A6  0100               	movlb	0	; () banked
  3225  0009A8  0100               	movlb	0	; () banked
  3226  0009AA  4B62               	infsnz	sprintf@f& (0+255),f,b
  3227  0009AC  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3228  0009AE  0008               	tblrd		*
  3229  0009B0  0100               	movlb	0	; () banked
  3230  0009B2  CFF5 F08F          	movff	tablat,sprintf@c
  3231  0009B6  0100               	movlb	0	; () banked
  3232  0009B8  518F               	movf	sprintf@c& (0+255),w,b
  3233                           
  3234                           ; Switch size 1, requested type "space"
  3235                           ; Number of cases is 2, Range of values is 0 to 102
  3236                           ; switch strategies available:
  3237                           ; Name         Instructions Cycles
  3238                           ; simple_byte            7     4 (average)
  3239                           ;	Chosen strategy is simple_byte
  3240  0009BA  0A00               	xorlw	0	; case 0
  3241  0009BC  B4D8               	btfsc	status,2,c
  3242  0009BE  D3EB               	goto	l5013
  3243  0009C0  0A66               	xorlw	102	; case 102
  3244  0009C2  B4D8               	btfsc	status,2,c
  3245  0009C4  D7E6               	goto	l4833
  3246  0009C6  D3D5               	goto	l5011
  3247  0009C8                     l4839:
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;doprnt.c: 834: if(flag & (0x700)) {
  3251  0009C8  0E07               	movlw	7
  3252  0009CA  0100               	movlb	0	; () banked
  3253  0009CC  0100               	movlb	0	; () banked
  3254  0009CE  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  3255  0009D0  B4D8               	btfsc	status,2,c
  3256  0009D2  D36B               	goto	l4991
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;doprnt.c: 836: if(flag & 0x1000)
  3260  0009D4  0100               	movlb	0	; () banked
  3261  0009D6  0100               	movlb	0	; () banked
  3262  0009D8  A97F               	btfss	(sprintf@flag+1)& (0+255),4,b
  3263  0009DA  D007               	goto	l4845
  3264                           
  3265                           ; BSR set to: 0
  3266                           ;doprnt.c: 838: prec = 6;
  3267  0009DC  0E00               	movlw	0
  3268  0009DE  0100               	movlb	0	; () banked
  3269  0009E0  0100               	movlb	0	; () banked
  3270  0009E2  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3271  0009E4  0E06               	movlw	6
  3272  0009E6  0100               	movlb	0	; () banked
  3273  0009E8  6F8A               	movwf	sprintf@prec& (0+255),b
  3274  0009EA                     l4845:
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3278  0009EA  C074  FFD9         	movff	sprintf@ap,fsr2l
  3279  0009EE  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  3280  0009F2  0100               	movlb	0	; () banked
  3281  0009F4  CFDE F08C          	movff	postinc2,sprintf@fval
  3282  0009F8  0100               	movlb	0	; () banked
  3283  0009FA  CFDE F08D          	movff	postinc2,sprintf@fval+1
  3284  0009FE  0100               	movlb	0	; () banked
  3285  000A00  CFDD F08E          	movff	postdec2,sprintf@fval+2
  3286                           
  3287                           ; BSR set to: 0
  3288  000A04  0E03               	movlw	3
  3289  000A06  0100               	movlb	0	; () banked
  3290  000A08  0100               	movlb	0	; () banked
  3291  000A0A  2774               	addwf	sprintf@ap& (0+255),f,b
  3292  000A0C  0E00               	movlw	0
  3293  000A0E  0100               	movlb	0	; () banked
  3294  000A10  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;doprnt.c: 840: if(fval < 0.0) {
  3298  000A12  0100               	movlb	0	; () banked
  3299  000A14  0100               	movlb	0	; () banked
  3300  000A16  518E               	movf	(sprintf@fval+2)& (0+255),w,b
  3301  000A18  0A80               	xorlw	128
  3302  000A1A  0F80               	addlw	128
  3303  000A1C  E107               	bnz	u2545
  3304  000A1E  0E00               	movlw	0
  3305  000A20  0100               	movlb	0	; () banked
  3306  000A22  5D8D               	subwf	(sprintf@fval+1)& (0+255),w,b
  3307  000A24  E103               	bnz	u2545
  3308  000A26  0E00               	movlw	0
  3309  000A28  0100               	movlb	0	; () banked
  3310  000A2A  5D8C               	subwf	sprintf@fval& (0+255),w,b
  3311  000A2C                     u2545:
  3312  000A2C  B0D8               	btfsc	status,0,c
  3313  000A2E  D012               	goto	l4855
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;doprnt.c: 841: fval = -fval;
  3317  000A30  C08C  F01C         	movff	sprintf@fval,___ftneg@f1
  3318  000A34  C08D  F01D         	movff	sprintf@fval+1,___ftneg@f1+1
  3319  000A38  C08E  F01E         	movff	sprintf@fval+2,___ftneg@f1+2
  3320  000A3C  ECC4  F016         	call	___ftneg	;wreg free
  3321  000A40  C01C  F08C         	movff	?___ftneg,sprintf@fval
  3322  000A44  C01D  F08D         	movff	?___ftneg+1,sprintf@fval+1
  3323  000A48  C01E  F08E         	movff	?___ftneg+2,sprintf@fval+2
  3324                           
  3325                           ;doprnt.c: 842: flag |= 0x03;
  3326  000A4C  0E03               	movlw	3
  3327  000A4E  0100               	movlb	0	; () banked
  3328  000A50  0100               	movlb	0	; () banked
  3329  000A52  137E               	iorwf	sprintf@flag& (0+255),f,b
  3330  000A54                     l4855:
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;doprnt.c: 843: }
  3334                           ;doprnt.c: 844: exp = 0;
  3335  000A54  0E00               	movlw	0
  3336  000A56  0100               	movlb	0	; () banked
  3337  000A58  0100               	movlb	0	; () banked
  3338  000A5A  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3339  000A5C  0E00               	movlw	0
  3340  000A5E  0100               	movlb	0	; () banked
  3341  000A60  6F88               	movwf	sprintf@exp& (0+255),b
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;doprnt.c: 845: if( fval!=0) {
  3345  000A62  0E7F               	movlw	127
  3346  000A64  0100               	movlb	0	; () banked
  3347  000A66  0100               	movlb	0	; () banked
  3348  000A68  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  3349  000A6A  0100               	movlb	0	; () banked
  3350  000A6C  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3351  000A6E  0100               	movlb	0	; () banked
  3352  000A70  118C               	iorwf	sprintf@fval& (0+255),w,b
  3353  000A72  B4D8               	btfsc	status,2,c
  3354  000A74  D09D               	goto	l4883
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3358  000A76  0E82               	movlw	130
  3359  000A78  0100               	movlb	0	; () banked
  3360  000A7A  6F67               	movwf	??_sprintf& (0+255),b
  3361  000A7C  0EFF               	movlw	255
  3362  000A7E  6F68               	movwf	(??_sprintf+1)& (0+255),b
  3363  000A80  0100               	movlb	0	; () banked
  3364  000A82  C08C  F069         	movff	sprintf@fval,??_sprintf+2
  3365  000A86  0100               	movlb	0	; () banked
  3366  000A88  C08D  F06A         	movff	sprintf@fval+1,??_sprintf+3
  3367  000A8C  0100               	movlb	0	; () banked
  3368  000A8E  C08E  F06B         	movff	sprintf@fval+2,??_sprintf+4
  3369  000A92  0100               	movlb	0	; () banked
  3370  000A94  C08F  F06C         	movff	sprintf@fval+3,??_sprintf+5
  3371  000A98  0E10               	movlw	16
  3372  000A9A  D006               	goto	u2560
  3373  000A9C                     u2565:
  3374  000A9C  0100               	movlb	0	; () banked
  3375  000A9E  90D8               	bcf	status,0,c
  3376  000AA0  336C               	rrcf	(??_sprintf+5)& (0+255),f,b
  3377  000AA2  336B               	rrcf	(??_sprintf+4)& (0+255),f,b
  3378  000AA4  336A               	rrcf	(??_sprintf+3)& (0+255),f,b
  3379  000AA6  3369               	rrcf	(??_sprintf+2)& (0+255),f,b
  3380  000AA8                     u2560:
  3381  000AA8  2EE8               	decfsz	wreg,f,c
  3382  000AAA  D7F8               	goto	u2565
  3383  000AAC  0100               	movlb	0	; () banked
  3384  000AAE  5169               	movf	(??_sprintf+2)& (0+255),w,b
  3385  000AB0  0100               	movlb	0	; () banked
  3386  000AB2  2567               	addwf	??_sprintf& (0+255),w,b
  3387  000AB4  0100               	movlb	0	; () banked
  3388  000AB6  0100               	movlb	0	; () banked
  3389  000AB8  6F88               	movwf	sprintf@exp& (0+255),b
  3390  000ABA  0100               	movlb	0	; () banked
  3391  000ABC  0100               	movlb	0	; () banked
  3392  000ABE  0E00               	movlw	0
  3393  000AC0  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  3394  000AC2  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;doprnt.c: 847: exp--;
  3398  000AC4  0100               	movlb	0	; () banked
  3399  000AC6  0100               	movlb	0	; () banked
  3400  000AC8  0788               	decf	sprintf@exp& (0+255),f,b
  3401  000ACA  A0D8               	btfss	status,0,c
  3402  000ACC  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;doprnt.c: 848: exp *= 3;
  3406  000ACE  C088  F011         	movff	sprintf@exp,___wmul@multiplier
  3407  000AD2  C089  F012         	movff	sprintf@exp+1,___wmul@multiplier+1
  3408  000AD6  0E00               	movlw	0
  3409  000AD8  6E14               	movwf	___wmul@multiplicand+1,c
  3410  000ADA  0E03               	movlw	3
  3411  000ADC  6E13               	movwf	___wmul@multiplicand,c
  3412  000ADE  EC2E  F016         	call	___wmul	;wreg free
  3413  000AE2  C011  F088         	movff	?___wmul,sprintf@exp
  3414  000AE6  C012  F089         	movff	?___wmul+1,sprintf@exp+1
  3415                           
  3416                           ;doprnt.c: 849: exp /= 10;
  3417  000AEA  C088  F008         	movff	sprintf@exp,___awdiv@dividend
  3418  000AEE  C089  F009         	movff	sprintf@exp+1,___awdiv@dividend+1
  3419  000AF2  0E00               	movlw	0
  3420  000AF4  6E0B               	movwf	___awdiv@divisor+1,c
  3421  000AF6  0E0A               	movlw	10
  3422  000AF8  6E0A               	movwf	___awdiv@divisor,c
  3423  000AFA  ECF7  F012         	call	___awdiv	;wreg free
  3424  000AFE  C008  F088         	movff	?___awdiv,sprintf@exp
  3425  000B02  C009  F089         	movff	?___awdiv+1,sprintf@exp+1
  3426                           
  3427                           ;doprnt.c: 850: if(exp < 0)
  3428  000B06  0100               	movlb	0	; () banked
  3429  000B08  0100               	movlb	0	; () banked
  3430  000B0A  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3431  000B0C  0A80               	xorlw	128
  3432  000B0E  6EF3               	movwf	prodl,c
  3433  000B10  0E80               	movlw	128
  3434  000B12  5CF3               	subwf	prodl,w,c
  3435  000B14  0E00               	movlw	0
  3436  000B16  B4D8               	btfsc	status,2,c
  3437  000B18  5D88               	subwf	sprintf@exp& (0+255),w,b
  3438  000B1A  B0D8               	btfsc	status,0,c
  3439  000B1C  D005               	goto	l4871
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;doprnt.c: 851: exp--;
  3443  000B1E  0100               	movlb	0	; () banked
  3444  000B20  0100               	movlb	0	; () banked
  3445  000B22  0788               	decf	sprintf@exp& (0+255),f,b
  3446  000B24  A0D8               	btfss	status,0,c
  3447  000B26  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3448  000B28                     l4871:
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 855: integ = scale(-exp);
  3452  000B28  0100               	movlb	0	; () banked
  3453  000B2A  0100               	movlb	0	; () banked
  3454  000B2C  5188               	movf	sprintf@exp& (0+255),w,b
  3455  000B2E  0800               	sublw	0
  3456  000B30  ECD2  F008         	call	_scale
  3457  000B34  C049  F085         	movff	?_scale,sprintf@integ
  3458  000B38  C04A  F086         	movff	?_scale+1,sprintf@integ+1
  3459  000B3C  C04B  F087         	movff	?_scale+2,sprintf@integ+2
  3460                           
  3461                           ;doprnt.c: 856: integ *= fval;
  3462  000B40  0100               	movlb	0	; () banked
  3463  000B42  0E00               	movlw	high sprintf@integ
  3464  000B44  6E4A               	movwf	___asftmul@f1p+1,c
  3465  000B46  0100               	movlb	0	; () banked
  3466  000B48  0E85               	movlw	low sprintf@integ
  3467  000B4A  6E49               	movwf	___asftmul@f1p,c
  3468  000B4C  C08C  F04B         	movff	sprintf@fval,___asftmul@f2
  3469  000B50  C08D  F04C         	movff	sprintf@fval+1,___asftmul@f2+1
  3470  000B54  C08E  F04D         	movff	sprintf@fval+2,___asftmul@f2+2
  3471  000B58  ECF2  F015         	call	___asftmul	;wreg free
  3472                           
  3473                           ;doprnt.c: 857: if(integ < 1.0)
  3474  000B5C  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3475  000B60  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3476  000B64  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3477  000B68  0E00               	movlw	0
  3478  000B6A  6E04               	movwf	___ftge@ff2,c
  3479  000B6C  0E80               	movlw	128
  3480  000B6E  6E05               	movwf	___ftge@ff2+1,c
  3481  000B70  0E3F               	movlw	63
  3482  000B72  6E06               	movwf	___ftge@ff2+2,c
  3483  000B74  EC91  F014         	call	___ftge	;wreg free
  3484  000B78  B0D8               	btfsc	status,0,c
  3485  000B7A  D006               	goto	l4879
  3486                           
  3487                           ;doprnt.c: 858: exp--;
  3488  000B7C  0100               	movlb	0	; () banked
  3489  000B7E  0100               	movlb	0	; () banked
  3490  000B80  0788               	decf	sprintf@exp& (0+255),f,b
  3491  000B82  A0D8               	btfss	status,0,c
  3492  000B84  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3493  000B86  D014               	goto	l4883
  3494  000B88                     l4879:
  3495                           
  3496                           ;doprnt.c: 859: else if(integ >= 10.0)
  3497  000B88  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3498  000B8C  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3499  000B90  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3500  000B94  0E00               	movlw	0
  3501  000B96  6E04               	movwf	___ftge@ff2,c
  3502  000B98  0E20               	movlw	32
  3503  000B9A  6E05               	movwf	___ftge@ff2+1,c
  3504  000B9C  0E41               	movlw	65
  3505  000B9E  6E06               	movwf	___ftge@ff2+2,c
  3506  000BA0  EC91  F014         	call	___ftge	;wreg free
  3507  000BA4  A0D8               	btfss	status,0,c
  3508  000BA6  D004               	goto	l4883
  3509                           
  3510                           ;doprnt.c: 860: exp++;
  3511  000BA8  0100               	movlb	0	; () banked
  3512  000BAA  0100               	movlb	0	; () banked
  3513  000BAC  4B88               	infsnz	sprintf@exp& (0+255),f,b
  3514  000BAE  2B89               	incf	(sprintf@exp+1)& (0+255),f,b
  3515  000BB0                     l4883:
  3516                           
  3517                           ;doprnt.c: 861: }
  3518                           ;doprnt.c: 1121: if(prec <= 12)
  3519  000BB0  0100               	movlb	0	; () banked
  3520  000BB2  0100               	movlb	0	; () banked
  3521  000BB4  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  3522  000BB6  0A80               	xorlw	128
  3523  000BB8  6EF3               	movwf	prodl,c
  3524  000BBA  0E80               	movlw	128
  3525  000BBC  5CF3               	subwf	prodl,w,c
  3526  000BBE  0E0D               	movlw	13
  3527  000BC0  B4D8               	btfsc	status,2,c
  3528  000BC2  5D8A               	subwf	sprintf@prec& (0+255),w,b
  3529  000BC4  B0D8               	btfsc	status,0,c
  3530  000BC6  D013               	goto	l4887
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;doprnt.c: 1122: fval += fround(prec);
  3534  000BC8  0100               	movlb	0	; () banked
  3535  000BCA  0E00               	movlw	high sprintf@fval
  3536  000BCC  6E54               	movwf	___asftadd@f1p+1,c
  3537  000BCE  0100               	movlb	0	; () banked
  3538  000BD0  0E8C               	movlw	low sprintf@fval
  3539  000BD2  6E53               	movwf	___asftadd@f1p,c
  3540  000BD4  0100               	movlb	0	; () banked
  3541  000BD6  0100               	movlb	0	; () banked
  3542  000BD8  518A               	movf	sprintf@prec& (0+255),w,b
  3543  000BDA  EC02  F00C         	call	_fround
  3544  000BDE  C049  F055         	movff	?_fround,___asftadd@f2
  3545  000BE2  C04A  F056         	movff	?_fround+1,___asftadd@f2+1
  3546  000BE6  C04B  F057         	movff	?_fround+2,___asftadd@f2+2
  3547  000BEA  EC10  F016         	call	___asftadd	;wreg free
  3548  000BEE                     l4887:
  3549                           
  3550                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3551  000BEE  0100               	movlb	0	; () banked
  3552  000BF0  0100               	movlb	0	; () banked
  3553  000BF2  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3554  000BF4  0A80               	xorlw	128
  3555  000BF6  6EF3               	movwf	prodl,c
  3556  000BF8  0E80               	movlw	128
  3557  000BFA  5CF3               	subwf	prodl,w,c
  3558  000BFC  0E0A               	movlw	10
  3559  000BFE  B4D8               	btfsc	status,2,c
  3560  000C00  5D88               	subwf	sprintf@exp& (0+255),w,b
  3561  000C02  B0D8               	btfsc	status,0,c
  3562  000C04  D02B               	goto	l4895
  3563                           
  3564                           ; BSR set to: 0
  3565  000C06  0E7F               	movlw	127
  3566  000C08  0100               	movlb	0	; () banked
  3567  000C0A  0100               	movlb	0	; () banked
  3568  000C0C  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  3569  000C0E  0100               	movlb	0	; () banked
  3570  000C10  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3571  000C12  0100               	movlb	0	; () banked
  3572  000C14  118C               	iorwf	sprintf@fval& (0+255),w,b
  3573  000C16  B4D8               	btfsc	status,2,c
  3574  000C18  D071               	goto	l4911
  3575                           
  3576                           ; BSR set to: 0
  3577  000C1A  C08C  F050         	movff	sprintf@fval,___fttol@f1
  3578  000C1E  C08D  F051         	movff	sprintf@fval+1,___fttol@f1+1
  3579  000C22  C08E  F052         	movff	sprintf@fval+2,___fttol@f1+2
  3580  000C26  ECA0  F011         	call	___fttol	;wreg free
  3581  000C2A  C050  F067         	movff	?___fttol,??_sprintf
  3582  000C2E  C051  F068         	movff	?___fttol+1,??_sprintf+1
  3583  000C32  C052  F069         	movff	?___fttol+2,??_sprintf+2
  3584  000C36  C053  F06A         	movff	?___fttol+3,??_sprintf+3
  3585  000C3A  0100               	movlb	0	; () banked
  3586  000C3C  516A               	movf	(??_sprintf+3)& (0+255),w,b
  3587  000C3E  1167               	iorwf	??_sprintf& (0+255),w,b
  3588  000C40  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  3589  000C42  1169               	iorwf	(??_sprintf+2)& (0+255),w,b
  3590  000C44  A4D8               	btfss	status,2,c
  3591  000C46  D05A               	goto	l4911
  3592                           
  3593                           ; BSR set to: 0
  3594  000C48  0100               	movlb	0	; () banked
  3595  000C4A  0100               	movlb	0	; () banked
  3596  000C4C  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3597  000C4E  0A80               	xorlw	128
  3598  000C50  0F80               	addlw	-128
  3599  000C52  0E02               	movlw	2
  3600  000C54  B4D8               	btfsc	status,2,c
  3601  000C56  5D88               	subwf	sprintf@exp& (0+255),w,b
  3602  000C58  A0D8               	btfss	status,0,c
  3603  000C5A  D050               	goto	l4911
  3604  000C5C                     l4895:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3608  000C5C  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3609  000C60  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3610  000C64  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3611  000C68  0E70               	movlw	112
  3612  000C6A  6E04               	movwf	___ftge@ff2,c
  3613  000C6C  0E89               	movlw	137
  3614  000C6E  6E05               	movwf	___ftge@ff2+1,c
  3615  000C70  0E40               	movlw	64
  3616  000C72  6E06               	movwf	___ftge@ff2+2,c
  3617  000C74  EC91  F014         	call	___ftge	;wreg free
  3618  000C78  B0D8               	btfsc	status,0,c
  3619  000C7A  D003               	goto	l4899
  3620                           
  3621                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3622  000C7C  0100               	movlb	0	; () banked
  3623  000C7E  0EF7               	movlw	247
  3624  000C80  D002               	goto	L2
  3625  000C82                     l4899:
  3626                           
  3627                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3628  000C82  0100               	movlb	0	; () banked
  3629  000C84  0EF8               	movlw	248
  3630  000C86                     L2:
  3631  000C86  0100               	movlb	0	; () banked
  3632  000C88  2788               	addwf	sprintf@exp& (0+255),f,b
  3633  000C8A  0EFF               	movlw	255
  3634  000C8C  0100               	movlb	0	; () banked
  3635  000C8E  2389               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;doprnt.c: 1133: }
  3639                           ;doprnt.c: 1134: integ = scale(exp);
  3640                           
  3641                           ; BSR set to: 0
  3642  000C90  0100               	movlb	0	; () banked
  3643  000C92  0100               	movlb	0	; () banked
  3644  000C94  5188               	movf	sprintf@exp& (0+255),w,b
  3645  000C96  ECD2  F008         	call	_scale
  3646  000C9A  C049  F085         	movff	?_scale,sprintf@integ
  3647  000C9E  C04A  F086         	movff	?_scale+1,sprintf@integ+1
  3648  000CA2  C04B  F087         	movff	?_scale+2,sprintf@integ+2
  3649                           
  3650                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3651  000CA6  C08C  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3652  000CAA  C08D  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3653  000CAE  C08E  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3654  000CB2  C085  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  3655  000CB6  C086  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  3656  000CBA  C087  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  3657  000CBE  EC06  F010         	call	__tdiv_to_l_	;wreg free
  3658  000CC2  C001  F070         	movff	?__tdiv_to_l_,_sprintf$978
  3659  000CC6  C002  F071         	movff	?__tdiv_to_l_+1,_sprintf$978+1
  3660  000CCA  C003  F072         	movff	?__tdiv_to_l_+2,_sprintf$978+2
  3661  000CCE  C004  F073         	movff	?__tdiv_to_l_+3,_sprintf$978+3
  3662  000CD2  C070  F080         	movff	_sprintf$978,sprintf@_val
  3663  000CD6  C071  F081         	movff	_sprintf$978+1,sprintf@_val+1
  3664  000CDA  C072  F082         	movff	_sprintf$978+2,sprintf@_val+2
  3665  000CDE  C073  F083         	movff	_sprintf$978+3,sprintf@_val+3
  3666                           
  3667                           ;doprnt.c: 1138: fval = 0.0;
  3668  000CE2  0E00               	movlw	0
  3669  000CE4  0100               	movlb	0	; () banked
  3670  000CE6  0100               	movlb	0	; () banked
  3671  000CE8  6F8C               	movwf	sprintf@fval& (0+255),b
  3672  000CEA  0E00               	movlw	0
  3673  000CEC  0100               	movlb	0	; () banked
  3674  000CEE  0100               	movlb	0	; () banked
  3675  000CF0  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  3676  000CF2  0E00               	movlw	0
  3677  000CF4  0100               	movlb	0	; () banked
  3678  000CF6  0100               	movlb	0	; () banked
  3679  000CF8  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  3680                           
  3681                           ;doprnt.c: 1139: } else {
  3682  000CFA  D02F               	goto	l4917
  3683  000CFC                     l4911:
  3684                           
  3685                           ; BSR set to: 0
  3686                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3687  000CFC  C08C  F050         	movff	sprintf@fval,___fttol@f1
  3688  000D00  C08D  F051         	movff	sprintf@fval+1,___fttol@f1+1
  3689  000D04  C08E  F052         	movff	sprintf@fval+2,___fttol@f1+2
  3690  000D08  ECA0  F011         	call	___fttol	;wreg free
  3691  000D0C  C050  F080         	movff	?___fttol,sprintf@_val
  3692  000D10  C051  F081         	movff	?___fttol+1,sprintf@_val+1
  3693  000D14  C052  F082         	movff	?___fttol+2,sprintf@_val+2
  3694  000D18  C053  F083         	movff	?___fttol+3,sprintf@_val+3
  3695                           
  3696                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3697  000D1C  0100               	movlb	0	; () banked
  3698  000D1E  0E00               	movlw	high sprintf@fval
  3699  000D20  6E32               	movwf	___asftsub@f1p+1,c
  3700  000D22  0100               	movlb	0	; () banked
  3701  000D24  0E8C               	movlw	low sprintf@fval
  3702  000D26  6E31               	movwf	___asftsub@f1p,c
  3703  000D28  C080  F009         	movff	sprintf@_val,___lltoft@c
  3704  000D2C  C081  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  3705  000D30  C082  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  3706  000D34  C083  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  3707  000D38  EC51  F015         	call	___lltoft	;wreg free
  3708  000D3C  C009  F033         	movff	?___lltoft,___asftsub@f2
  3709  000D40  C00A  F034         	movff	?___lltoft+1,___asftsub@f2+1
  3710  000D44  C00B  F035         	movff	?___lltoft+2,___asftsub@f2+2
  3711  000D48  ECD4  F015         	call	___asftsub	;wreg free
  3712                           
  3713                           ;doprnt.c: 1142: exp = 0;
  3714  000D4C  0E00               	movlw	0
  3715  000D4E  0100               	movlb	0	; () banked
  3716  000D50  0100               	movlb	0	; () banked
  3717  000D52  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3718  000D54  0E00               	movlw	0
  3719  000D56  0100               	movlb	0	; () banked
  3720  000D58  6F88               	movwf	sprintf@exp& (0+255),b
  3721  000D5A                     l4917:
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;doprnt.c: 1143: }
  3725                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3726  000D5A  0100               	movlb	0	; () banked
  3727  000D5C  6F67               	movwf	??_sprintf& (0+255),b
  3728  000D5E  0E01               	movlw	1
  3729  000D60  0100               	movlb	0	; () banked
  3730  000D62  0100               	movlb	0	; () banked
  3731  000D64  6F8F               	movwf	sprintf@c& (0+255),b
  3732  000D66  0100               	movlb	0	; () banked
  3733  000D68  5167               	movf	??_sprintf& (0+255),w,b
  3734  000D6A                     
  3735                           ; BSR set to: 0
  3736  000D6A  0100               	movlb	0	; () banked
  3737  000D6C  0100               	movlb	0	; () banked
  3738  000D6E  518F               	movf	sprintf@c& (0+255),w,b
  3739  000D70  0A0A               	xorlw	10
  3740  000D72  B4D8               	btfsc	status,2,c
  3741  000D74  D021               	goto	l4931
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3745                           
  3746                           ; BSR set to: 0
  3747                           
  3748                           ; BSR set to: 0
  3749  000D76  0100               	movlb	0	; () banked
  3750  000D78  0100               	movlb	0	; () banked
  3751  000D7A  518F               	movf	sprintf@c& (0+255),w,b
  3752  000D7C  0D04               	mullw	4
  3753  000D7E  0E01               	movlw	low _dpowers
  3754  000D80  24F3               	addwf	prodl,w,c
  3755  000D82  6EF6               	movwf	tblptrl,c
  3756  000D84  0E08               	movlw	high _dpowers
  3757  000D86  20F4               	addwfc	prodh,w,c
  3758  000D88  6EF7               	movwf	tblptrh,c
  3759  000D8A  0009               	tblrd		*+
  3760  000D8C  50F5               	movf	tablat,w,c
  3761  000D8E  0100               	movlb	0	; () banked
  3762  000D90  0100               	movlb	0	; () banked
  3763  000D92  5D80               	subwf	sprintf@_val& (0+255),w,b
  3764  000D94  0009               	tblrd		*+
  3765  000D96  50F5               	movf	tablat,w,c
  3766  000D98  0100               	movlb	0	; () banked
  3767  000D9A  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3768  000D9C  0009               	tblrd		*+
  3769  000D9E  50F5               	movf	tablat,w,c
  3770  000DA0  0100               	movlb	0	; () banked
  3771  000DA2  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3772  000DA4  0009               	tblrd		*+
  3773  000DA6  50F5               	movf	tablat,w,c
  3774  000DA8  0100               	movlb	0	; () banked
  3775  000DAA  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3776  000DAC  A0D8               	btfss	status,0,c
  3777  000DAE  D004               	goto	l4931
  3778                           
  3779                           ; BSR set to: 0
  3780                           
  3781                           ; BSR set to: 0
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;doprnt.c: 1147: break;
  3785  000DB0  0100               	movlb	0	; () banked
  3786  000DB2  0100               	movlb	0	; () banked
  3787  000DB4  2B8F               	incf	sprintf@c& (0+255),f,b
  3788  000DB6  D7D9               	goto	L3
  3789  000DB8                     l4931:
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;doprnt.c: 1184: {
  3793                           ;doprnt.c: 1197: if(flag & 0x03)
  3794  000DB8  0E03               	movlw	3
  3795  000DBA  0100               	movlb	0	; () banked
  3796  000DBC  0100               	movlb	0	; () banked
  3797  000DBE  157E               	andwf	sprintf@flag& (0+255),w,b
  3798  000DC0  0100               	movlb	0	; () banked
  3799  000DC2  6F67               	movwf	??_sprintf& (0+255),b
  3800  000DC4  0E00               	movlw	0
  3801  000DC6  0100               	movlb	0	; () banked
  3802  000DC8  0100               	movlb	0	; () banked
  3803  000DCA  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  3804  000DCC  0100               	movlb	0	; () banked
  3805  000DCE  6F68               	movwf	(??_sprintf+1)& (0+255),b
  3806  000DD0  0100               	movlb	0	; () banked
  3807  000DD2  5168               	movf	(??_sprintf+1)& (0+255),w,b
  3808  000DD4  1167               	iorwf	??_sprintf& (0+255),w,b
  3809  000DD6  B4D8               	btfsc	status,2,c
  3810  000DD8  D055               	goto	l4945
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3814  000DDA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3815  000DDE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3816  000DE2  0E2D               	movlw	45
  3817  000DE4  D04A               	goto	L4
  3818  000DE6                     l4937:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;doprnt.c: 1209: {
  3822                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3823  000DE6  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  3824  000DEA  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3825  000DEE  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3826  000DF2  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3827  000DF6  0100               	movlb	0	; () banked
  3828  000DF8  0100               	movlb	0	; () banked
  3829  000DFA  518F               	movf	sprintf@c& (0+255),w,b
  3830  000DFC  0D04               	mullw	4
  3831  000DFE  0E01               	movlw	low _dpowers
  3832  000E00  24F3               	addwf	prodl,w,c
  3833  000E02  6EF6               	movwf	tblptrl,c
  3834  000E04  0E08               	movlw	high _dpowers
  3835  000E06  20F4               	addwfc	prodh,w,c
  3836  000E08  6EF7               	movwf	tblptrh,c
  3837  000E0A  0009               	tblrd		*+
  3838  000E0C  CFF5 F005          	movff	tablat,___lldiv@divisor
  3839  000E10  0009               	tblrd		*+
  3840  000E12  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3841  000E16  0009               	tblrd		*+
  3842  000E18  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3843  000E1C  000A               	tblrd		*-
  3844  000E1E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3845  000E22  ECD9  F014         	call	___lldiv	;wreg free
  3846  000E26  C001  F076         	movff	?___lldiv,sprintf@vd
  3847  000E2A  C002  F077         	movff	?___lldiv+1,sprintf@vd+1
  3848  000E2E  C003  F078         	movff	?___lldiv+2,sprintf@vd+2
  3849  000E32  C004  F079         	movff	?___lldiv+3,sprintf@vd+3
  3850                           
  3851                           ;doprnt.c: 1211: vd %= 10;
  3852  000E36  C076  F001         	movff	sprintf@vd,___llmod@dividend
  3853  000E3A  C077  F002         	movff	sprintf@vd+1,___llmod@dividend+1
  3854  000E3E  C078  F003         	movff	sprintf@vd+2,___llmod@dividend+2
  3855  000E42  C079  F004         	movff	sprintf@vd+3,___llmod@dividend+3
  3856  000E46  0E0A               	movlw	10
  3857  000E48  6E05               	movwf	___llmod@divisor,c
  3858  000E4A  0E00               	movlw	0
  3859  000E4C  6E06               	movwf	___llmod@divisor+1,c
  3860  000E4E  0E00               	movlw	0
  3861  000E50  6E07               	movwf	___llmod@divisor+2,c
  3862  000E52  0E00               	movlw	0
  3863  000E54  6E08               	movwf	___llmod@divisor+3,c
  3864  000E56  EC1C  F015         	call	___llmod	;wreg free
  3865  000E5A  C001  F076         	movff	?___llmod,sprintf@vd
  3866  000E5E  C002  F077         	movff	?___llmod+1,sprintf@vd+1
  3867  000E62  C003  F078         	movff	?___llmod+2,sprintf@vd+2
  3868  000E66  C004  F079         	movff	?___llmod+3,sprintf@vd+3
  3869                           
  3870                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3871  000E6A  0100               	movlb	0	; () banked
  3872  000E6C  0100               	movlb	0	; () banked
  3873  000E6E  5176               	movf	sprintf@vd& (0+255),w,b
  3874  000E70  0F30               	addlw	48
  3875  000E72  C060  FFD9         	movff	sprintf@sp,fsr2l
  3876  000E76  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3877  000E7A                     L4:
  3878  000E7A  6EDF               	movwf	indf2,c
  3879                           
  3880                           ; BSR set to: 0
  3881  000E7C  0100               	movlb	0	; () banked
  3882  000E7E  0100               	movlb	0	; () banked
  3883  000E80  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3884  000E82  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3885  000E84                     l4945:
  3886                           
  3887                           ; BSR set to: 0
  3888  000E84  0100               	movlb	0	; () banked
  3889  000E86  0100               	movlb	0	; () banked
  3890  000E88  078F               	decf	sprintf@c& (0+255),f,b
  3891  000E8A  0100               	movlb	0	; () banked
  3892  000E8C  298F               	incf	sprintf@c& (0+255),w,b
  3893  000E8E  B4D8               	btfsc	status,2,c
  3894  000E90  D010               	goto	l4953
  3895  000E92  D7A9               	goto	l4937
  3896  000E94                     l4947:
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3900  000E94  C060  FFD9         	movff	sprintf@sp,fsr2l
  3901  000E98  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3902  000E9C  0E30               	movlw	48
  3903  000E9E  6EDF               	movwf	indf2,c
  3904                           
  3905                           ; BSR set to: 0
  3906  000EA0  0100               	movlb	0	; () banked
  3907  000EA2  0100               	movlb	0	; () banked
  3908  000EA4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3909  000EA6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 1218: exp--;
  3913  000EA8  0100               	movlb	0	; () banked
  3914  000EAA  0100               	movlb	0	; () banked
  3915  000EAC  0788               	decf	sprintf@exp& (0+255),f,b
  3916  000EAE  A0D8               	btfss	status,0,c
  3917  000EB0  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3918  000EB2                     l4953:
  3919                           
  3920                           ; BSR set to: 0
  3921  000EB2  0100               	movlb	0	; () banked
  3922  000EB4  0100               	movlb	0	; () banked
  3923  000EB6  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3924  000EB8  0A80               	xorlw	128
  3925  000EBA  6EF3               	movwf	prodl,c
  3926  000EBC  0E80               	movlw	128
  3927  000EBE  5CF3               	subwf	prodl,w,c
  3928  000EC0  0E01               	movlw	1
  3929  000EC2  B4D8               	btfsc	status,2,c
  3930  000EC4  5D88               	subwf	sprintf@exp& (0+255),w,b
  3931  000EC6  B0D8               	btfsc	status,0,c
  3932  000EC8  D7E5               	goto	l4947
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;doprnt.c: 1219: }
  3936                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3937                           
  3938                           ; BSR set to: 0
  3939  000ECA  0100               	movlb	0	; () banked
  3940  000ECC  0100               	movlb	0	; () banked
  3941  000ECE  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  3942  000ED0  0A80               	xorlw	128
  3943  000ED2  0F80               	addlw	-128
  3944  000ED4  0E09               	movlw	9
  3945  000ED6  B4D8               	btfsc	status,2,c
  3946  000ED8  5D8A               	subwf	sprintf@prec& (0+255),w,b
  3947  000EDA  A0D8               	btfss	status,0,c
  3948  000EDC  D009               	goto	l287
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3952  000EDE  0100               	movlb	0	; () banked
  3953  000EE0  6F67               	movwf	??_sprintf& (0+255),b
  3954  000EE2  0E08               	movlw	8
  3955  000EE4  0100               	movlb	0	; () banked
  3956  000EE6  0100               	movlb	0	; () banked
  3957  000EE8  6F8F               	movwf	sprintf@c& (0+255),b
  3958  000EEA  0100               	movlb	0	; () banked
  3959  000EEC  5167               	movf	??_sprintf& (0+255),w,b
  3960  000EEE  D002               	goto	l4959
  3961  000EF0                     l287:
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1222: else
  3965                           ;doprnt.c: 1223: c = prec;
  3966  000EF0  C08A  F08F         	movff	sprintf@prec,sprintf@c
  3967  000EF4                     l4959:
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;doprnt.c: 1224: prec -= c;
  3971  000EF4  0100               	movlb	0	; () banked
  3972  000EF6  0100               	movlb	0	; () banked
  3973  000EF8  518F               	movf	sprintf@c& (0+255),w,b
  3974  000EFA  0100               	movlb	0	; () banked
  3975  000EFC  0100               	movlb	0	; () banked
  3976  000EFE  5F8A               	subwf	sprintf@prec& (0+255),f,b
  3977  000F00  0E00               	movlw	0
  3978  000F02  0100               	movlb	0	; () banked
  3979  000F04  BF8F               	btfsc	sprintf@c& (0+255),7,b
  3980  000F06  0EFF               	movlw	255
  3981  000F08  0100               	movlb	0	; () banked
  3982  000F0A  0100               	movlb	0	; () banked
  3983  000F0C  5B8B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;doprnt.c: 1228: if(c)
  3987  000F0E  0100               	movlb	0	; () banked
  3988  000F10  0100               	movlb	0	; () banked
  3989  000F12  518F               	movf	sprintf@c& (0+255),w,b
  3990  000F14  B4D8               	btfsc	status,2,c
  3991  000F16  D00A               	goto	l4967
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3995  000F18  C060  FFD9         	movff	sprintf@sp,fsr2l
  3996  000F1C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3997  000F20  0E2E               	movlw	46
  3998  000F22  6EDF               	movwf	indf2,c
  3999                           
  4000                           ; BSR set to: 0
  4001  000F24  0100               	movlb	0	; () banked
  4002  000F26  0100               	movlb	0	; () banked
  4003  000F28  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4004  000F2A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4005  000F2C                     l4967:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  4009  000F2C  0100               	movlb	0	; () banked
  4010  000F2E  0100               	movlb	0	; () banked
  4011  000F30  518F               	movf	sprintf@c& (0+255),w,b
  4012  000F32  ECD2  F008         	call	_scale
  4013  000F36  C049  F06D         	movff	?_scale,_sprintf$1703
  4014  000F3A  C04A  F06E         	movff	?_scale+1,_sprintf$1703+1
  4015  000F3E  C04B  F06F         	movff	?_scale+2,_sprintf$1703+2
  4016                           
  4017                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  4018  000F42  C08C  F03D         	movff	sprintf@fval,___ftmul@f2
  4019  000F46  C08D  F03E         	movff	sprintf@fval+1,___ftmul@f2+1
  4020  000F4A  C08E  F03F         	movff	sprintf@fval+2,___ftmul@f2+2
  4021  000F4E  C06D  F03A         	movff	_sprintf$1703,___ftmul@f1
  4022  000F52  C06E  F03B         	movff	_sprintf$1703+1,___ftmul@f1+1
  4023  000F56  C06F  F03C         	movff	_sprintf$1703+2,___ftmul@f1+2
  4024  000F5A  EC24  F011         	call	___ftmul	;wreg free
  4025  000F5E  C03A  F050         	movff	?___ftmul,___fttol@f1
  4026  000F62  C03B  F051         	movff	?___ftmul+1,___fttol@f1+1
  4027  000F66  C03C  F052         	movff	?___ftmul+2,___fttol@f1+2
  4028  000F6A  ECA0  F011         	call	___fttol	;wreg free
  4029  000F6E  C050  F080         	movff	?___fttol,sprintf@_val
  4030  000F72  C051  F081         	movff	?___fttol+1,sprintf@_val+1
  4031  000F76  C052  F082         	movff	?___fttol+2,sprintf@_val+2
  4032  000F7A  C053  F083         	movff	?___fttol+3,sprintf@_val+3
  4033                           
  4034                           ;doprnt.c: 1237: while(c--) {
  4035  000F7E  D077               	goto	l4981
  4036  000F80                     l4971:
  4037                           
  4038                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  4039  000F80  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  4040  000F84  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  4041  000F88  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  4042  000F8C  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  4043  000F90  0100               	movlb	0	; () banked
  4044  000F92  0100               	movlb	0	; () banked
  4045  000F94  518F               	movf	sprintf@c& (0+255),w,b
  4046  000F96  0D04               	mullw	4
  4047  000F98  0E01               	movlw	low _dpowers
  4048  000F9A  24F3               	addwf	prodl,w,c
  4049  000F9C  6EF6               	movwf	tblptrl,c
  4050  000F9E  0E08               	movlw	high _dpowers
  4051  000FA0  20F4               	addwfc	prodh,w,c
  4052  000FA2  6EF7               	movwf	tblptrh,c
  4053  000FA4  0009               	tblrd		*+
  4054  000FA6  CFF5 F005          	movff	tablat,___lldiv@divisor
  4055  000FAA  0009               	tblrd		*+
  4056  000FAC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4057  000FB0  0009               	tblrd		*+
  4058  000FB2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4059  000FB6  000A               	tblrd		*-
  4060  000FB8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4061  000FBC  ECD9  F014         	call	___lldiv	;wreg free
  4062  000FC0  C001  F07A         	movff	?___lldiv,sprintf@vd_980
  4063  000FC4  C002  F07B         	movff	?___lldiv+1,sprintf@vd_980+1
  4064  000FC8  C003  F07C         	movff	?___lldiv+2,sprintf@vd_980+2
  4065  000FCC  C004  F07D         	movff	?___lldiv+3,sprintf@vd_980+3
  4066                           
  4067                           ;doprnt.c: 1239: vd %= 10;
  4068  000FD0  C07A  F001         	movff	sprintf@vd_980,___llmod@dividend
  4069  000FD4  C07B  F002         	movff	sprintf@vd_980+1,___llmod@dividend+1
  4070  000FD8  C07C  F003         	movff	sprintf@vd_980+2,___llmod@dividend+2
  4071  000FDC  C07D  F004         	movff	sprintf@vd_980+3,___llmod@dividend+3
  4072  000FE0  0E0A               	movlw	10
  4073  000FE2  6E05               	movwf	___llmod@divisor,c
  4074  000FE4  0E00               	movlw	0
  4075  000FE6  6E06               	movwf	___llmod@divisor+1,c
  4076  000FE8  0E00               	movlw	0
  4077  000FEA  6E07               	movwf	___llmod@divisor+2,c
  4078  000FEC  0E00               	movlw	0
  4079  000FEE  6E08               	movwf	___llmod@divisor+3,c
  4080  000FF0  EC1C  F015         	call	___llmod	;wreg free
  4081  000FF4  C001  F07A         	movff	?___llmod,sprintf@vd_980
  4082  000FF8  C002  F07B         	movff	?___llmod+1,sprintf@vd_980+1
  4083  000FFC  C003  F07C         	movff	?___llmod+2,sprintf@vd_980+2
  4084  001000  C004  F07D         	movff	?___llmod+3,sprintf@vd_980+3
  4085                           
  4086                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  4087  001004  0100               	movlb	0	; () banked
  4088  001006  0100               	movlb	0	; () banked
  4089  001008  517A               	movf	sprintf@vd_980& (0+255),w,b
  4090  00100A  0F30               	addlw	48
  4091  00100C  C060  FFD9         	movff	sprintf@sp,fsr2l
  4092  001010  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4093  001014  6EDF               	movwf	indf2,c
  4094                           
  4095                           ; BSR set to: 0
  4096  001016  0100               	movlb	0	; () banked
  4097  001018  0100               	movlb	0	; () banked
  4098  00101A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4099  00101C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  4103  00101E  C080  F001         	movff	sprintf@_val,___llmod@dividend
  4104  001022  C081  F002         	movff	sprintf@_val+1,___llmod@dividend+1
  4105  001026  C082  F003         	movff	sprintf@_val+2,___llmod@dividend+2
  4106  00102A  C083  F004         	movff	sprintf@_val+3,___llmod@dividend+3
  4107  00102E  0100               	movlb	0	; () banked
  4108  001030  0100               	movlb	0	; () banked
  4109  001032  518F               	movf	sprintf@c& (0+255),w,b
  4110  001034  0D04               	mullw	4
  4111  001036  0E01               	movlw	low _dpowers
  4112  001038  24F3               	addwf	prodl,w,c
  4113  00103A  6EF6               	movwf	tblptrl,c
  4114  00103C  0E08               	movlw	high _dpowers
  4115  00103E  20F4               	addwfc	prodh,w,c
  4116  001040  6EF7               	movwf	tblptrh,c
  4117  001042  0009               	tblrd		*+
  4118  001044  CFF5 F005          	movff	tablat,___llmod@divisor
  4119  001048  0009               	tblrd		*+
  4120  00104A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  4121  00104E  0009               	tblrd		*+
  4122  001050  CFF5 F007          	movff	tablat,___llmod@divisor+2
  4123  001054  000A               	tblrd		*-
  4124  001056  CFF5 F008          	movff	tablat,___llmod@divisor+3
  4125  00105A  EC1C  F015         	call	___llmod	;wreg free
  4126  00105E  C001  F080         	movff	?___llmod,sprintf@_val
  4127  001062  C002  F081         	movff	?___llmod+1,sprintf@_val+1
  4128  001066  C003  F082         	movff	?___llmod+2,sprintf@_val+2
  4129  00106A  C004  F083         	movff	?___llmod+3,sprintf@_val+3
  4130  00106E                     l4981:
  4131  00106E  0100               	movlb	0	; () banked
  4132  001070  0100               	movlb	0	; () banked
  4133  001072  078F               	decf	sprintf@c& (0+255),f,b
  4134  001074  0100               	movlb	0	; () banked
  4135  001076  298F               	incf	sprintf@c& (0+255),w,b
  4136  001078  B4D8               	btfsc	status,2,c
  4137  00107A  D010               	goto	l4989
  4138  00107C  D781               	goto	l4971
  4139  00107E                     l4983:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  4143  00107E  C060  FFD9         	movff	sprintf@sp,fsr2l
  4144  001082  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4145  001086  0E30               	movlw	48
  4146  001088  6EDF               	movwf	indf2,c
  4147                           
  4148                           ; BSR set to: 0
  4149  00108A  0100               	movlb	0	; () banked
  4150  00108C  0100               	movlb	0	; () banked
  4151  00108E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4152  001090  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;doprnt.c: 1246: prec--;
  4156  001092  0100               	movlb	0	; () banked
  4157  001094  0100               	movlb	0	; () banked
  4158  001096  078A               	decf	sprintf@prec& (0+255),f,b
  4159  001098  A0D8               	btfss	status,0,c
  4160  00109A  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4161  00109C                     l4989:
  4162                           
  4163                           ; BSR set to: 0
  4164  00109C  0100               	movlb	0	; () banked
  4165  00109E  0100               	movlb	0	; () banked
  4166  0010A0  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4167  0010A2  118A               	iorwf	sprintf@prec& (0+255),w,b
  4168  0010A4  B4D8               	btfsc	status,2,c
  4169  0010A6  D065               	goto	l5011
  4170  0010A8  D7EA               	goto	l4983
  4171  0010AA                     l4991:
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;doprnt.c: 1255: }
  4175                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4176  0010AA  0100               	movlb	0	; () banked
  4177  0010AC  0100               	movlb	0	; () banked
  4178  0010AE  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4179  0010B0  118A               	iorwf	sprintf@prec& (0+255),w,b
  4180  0010B2  A4D8               	btfss	status,2,c
  4181  0010B4  D00C               	goto	l4997
  4182                           
  4183                           ; BSR set to: 0
  4184  0010B6  0100               	movlb	0	; () banked
  4185  0010B8  0100               	movlb	0	; () banked
  4186  0010BA  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  4187  0010BC  1180               	iorwf	sprintf@_val& (0+255),w,b
  4188  0010BE  1181               	iorwf	(sprintf@_val+1)& (0+255),w,b
  4189  0010C0  1182               	iorwf	(sprintf@_val+2)& (0+255),w,b
  4190  0010C2  A4D8               	btfss	status,2,c
  4191  0010C4  D004               	goto	l4997
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;doprnt.c: 1300: prec++;
  4195  0010C6  0100               	movlb	0	; () banked
  4196  0010C8  0100               	movlb	0	; () banked
  4197  0010CA  4B8A               	infsnz	sprintf@prec& (0+255),f,b
  4198  0010CC  2B8B               	incf	(sprintf@prec+1)& (0+255),f,b
  4199  0010CE                     l4997:
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;doprnt.c: 1348: if(c < prec)
  4203  0010CE  0E80               	movlw	128
  4204  0010D0  0100               	movlb	0	; () banked
  4205  0010D2  0100               	movlb	0	; () banked
  4206  0010D4  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4207  0010D6  0E7F               	movlw	127
  4208  0010D8  6F67               	movwf	??_sprintf& (0+255),b
  4209  0010DA  0100               	movlb	0	; () banked
  4210  0010DC  0100               	movlb	0	; () banked
  4211  0010DE  518A               	movf	sprintf@prec& (0+255),w,b
  4212  0010E0  0100               	movlb	0	; () banked
  4213  0010E2  0100               	movlb	0	; () banked
  4214  0010E4  5D8F               	subwf	sprintf@c& (0+255),w,b
  4215  0010E6  0100               	movlb	0	; () banked
  4216  0010E8  0100               	movlb	0	; () banked
  4217  0010EA  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4218  0010EC  0A80               	xorlw	128
  4219  0010EE  0100               	movlb	0	; () banked
  4220  0010F0  5967               	subwfb	??_sprintf& (0+255),w,b
  4221  0010F2  B0D8               	btfsc	status,0,c
  4222  0010F4  D003               	goto	l5001
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;doprnt.c: 1349: c = prec;
  4226  0010F6  C08A  F08F         	movff	sprintf@prec,sprintf@c
  4227  0010FA  D020               	goto	l5005
  4228  0010FC                     l5001:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;doprnt.c: 1350: else if(prec < c)
  4232  0010FC  0100               	movlb	0	; () banked
  4233  0010FE  0100               	movlb	0	; () banked
  4234  001100  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4235  001102  0A80               	xorlw	128
  4236  001104  0100               	movlb	0	; () banked
  4237  001106  6F67               	movwf	??_sprintf& (0+255),b
  4238  001108  0100               	movlb	0	; () banked
  4239  00110A  0100               	movlb	0	; () banked
  4240  00110C  518F               	movf	sprintf@c& (0+255),w,b
  4241  00110E  0100               	movlb	0	; () banked
  4242  001110  0100               	movlb	0	; () banked
  4243  001112  5D8A               	subwf	sprintf@prec& (0+255),w,b
  4244  001114  0E80               	movlw	128
  4245  001116  0100               	movlb	0	; () banked
  4246  001118  0100               	movlb	0	; () banked
  4247  00111A  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4248  00111C  0E7F               	movlw	127
  4249  00111E  0100               	movlb	0	; () banked
  4250  001120  5967               	subwfb	??_sprintf& (0+255),w,b
  4251  001122  B0D8               	btfsc	status,0,c
  4252  001124  D00B               	goto	l5005
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;doprnt.c: 1351: prec = c;
  4256  001126  0100               	movlb	0	; () banked
  4257  001128  0100               	movlb	0	; () banked
  4258  00112A  518F               	movf	sprintf@c& (0+255),w,b
  4259  00112C  0100               	movlb	0	; () banked
  4260  00112E  0100               	movlb	0	; () banked
  4261  001130  6F8A               	movwf	sprintf@prec& (0+255),b
  4262  001132  0100               	movlb	0	; () banked
  4263  001134  6B8B               	clrf	(sprintf@prec+1)& (0+255),b
  4264  001136  0100               	movlb	0	; () banked
  4265  001138  BF8A               	btfsc	sprintf@prec& (0+255),7,b
  4266  00113A  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4267  00113C                     l5005:
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;doprnt.c: 1431: {
  4271                           ;doprnt.c: 1447: if(flag & 0x03)
  4272  00113C  0E03               	movlw	3
  4273  00113E  0100               	movlb	0	; () banked
  4274  001140  0100               	movlb	0	; () banked
  4275  001142  157E               	andwf	sprintf@flag& (0+255),w,b
  4276  001144  0100               	movlb	0	; () banked
  4277  001146  6F67               	movwf	??_sprintf& (0+255),b
  4278  001148  0E00               	movlw	0
  4279  00114A  0100               	movlb	0	; () banked
  4280  00114C  0100               	movlb	0	; () banked
  4281  00114E  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  4282  001150  0100               	movlb	0	; () banked
  4283  001152  6F68               	movwf	(??_sprintf+1)& (0+255),b
  4284  001154  0100               	movlb	0	; () banked
  4285  001156  5168               	movf	(??_sprintf+1)& (0+255),w,b
  4286  001158  1167               	iorwf	??_sprintf& (0+255),w,b
  4287  00115A  B4D8               	btfsc	status,2,c
  4288  00115C  D00A               	goto	l5011
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4292  00115E  C060  FFD9         	movff	sprintf@sp,fsr2l
  4293  001162  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4294  001166  0E2D               	movlw	45
  4295  001168  6EDF               	movwf	indf2,c
  4296  00116A                     L1:
  4297                           
  4298                           ; BSR set to: 0
  4299  00116A  0100               	movlb	0	; () banked
  4300  00116C  0100               	movlb	0	; () banked
  4301  00116E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4302  001170  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4303  001172                     l5011:
  4304                           
  4305                           ; BSR set to: 0
  4306  001172  0100               	movlb	0	; () banked
  4307  001174  C062  FFF6         	movff	sprintf@f,tblptrl
  4308  001178  0100               	movlb	0	; () banked
  4309  00117A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4310  00117E  0100               	movlb	0	; () banked
  4311  001180  0100               	movlb	0	; () banked
  4312  001182  4B62               	infsnz	sprintf@f& (0+255),f,b
  4313  001184  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4314  001186  0008               	tblrd		*
  4315  001188  0100               	movlb	0	; () banked
  4316  00118A  CFF5 F08F          	movff	tablat,sprintf@c
  4317  00118E  0100               	movlb	0	; () banked
  4318  001190  678F               	tstfsz	sprintf@c& (0+255),b
  4319  001192  EF5F  F004         	goto	l4809
  4320  001196                     l5013:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;doprnt.c: 1547: *sp = 0;
  4324  001196  C060  FFD9         	movff	sprintf@sp,fsr2l
  4325  00119A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4326  00119E  0E00               	movlw	0
  4327  0011A0  6EDF               	movwf	indf2,c
  4328  0011A2  0012               	return	
  4329  0011A4                     __end_of_sprintf:
  4330                           	opt stack 0
  4331                           tblptru	equ	0xFF8
  4332                           tblptrh	equ	0xFF7
  4333                           tblptrl	equ	0xFF6
  4334                           tablat	equ	0xFF5
  4335                           prodh	equ	0xFF4
  4336                           prodl	equ	0xFF3
  4337                           intcon2	equ	0xFF1
  4338                           wreg	equ	0xFE8
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _scale *****************
  4347 ;; Defined at:
  4348 ;;		line 425 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  scl             1    wreg     char 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  scl             1   78[COMRAM] char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  3   72[COMRAM] char 
  4355 ;; Registers used:
  4356 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4362 ;;      Params:         3       0       0       0       0       0       0       0       0
  4363 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4365 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4366 ;;Total ram usage:        7 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    2
  4369 ;; This function calls:
  4370 ;;		___awdiv
  4371 ;;		___awmod
  4372 ;;		___ftmul
  4373 ;;		___wmul
  4374 ;; This function is called by:
  4375 ;;		_sprintf
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text17
  4380  0011A4                     __ptext17:
  4381                           	opt stack 0
  4382  0011A4                     _scale:
  4383                           	opt stack 26
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;incstack = 0
  4387                           ;scale@scl stored from wreg
  4388  0011A4  CFE8 F04F          	movff	wreg,scale@scl
  4389                           
  4390                           ;doprnt.c: 428: if(scl < 0) {
  4391  0011A8  AE4F               	btfss	scale@scl,7,c
  4392  0011AA  D101               	goto	l4481
  4393                           
  4394                           ;doprnt.c: 429: scl = -scl;
  4395  0011AC  6C4F               	negf	scale@scl,c
  4396                           
  4397                           ;doprnt.c: 430: if(scl>=110)
  4398  0011AE  504F               	movf	scale@scl,w,c
  4399  0011B0  0A80               	xorlw	128
  4400  0011B2  0F12               	addlw	-238
  4401  0011B4  A0D8               	btfss	status,0,c
  4402  0011B6  D091               	goto	l4471
  4403                           
  4404                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4405  0011B8  0E00               	movlw	0
  4406  0011BA  6E14               	movwf	___wmul@multiplicand+1,c
  4407  0011BC  0E03               	movlw	3
  4408  0011BE  6E13               	movwf	___wmul@multiplicand,c
  4409  0011C0  0E00               	movlw	0
  4410  0011C2  6E0B               	movwf	___awdiv@divisor+1,c
  4411  0011C4  0E0A               	movlw	10
  4412  0011C6  6E0A               	movwf	___awdiv@divisor,c
  4413  0011C8  0E00               	movlw	0
  4414  0011CA  6E04               	movwf	___awmod@divisor+1,c
  4415  0011CC  0E64               	movlw	100
  4416  0011CE  6E03               	movwf	___awmod@divisor,c
  4417  0011D0  504F               	movf	scale@scl,w,c
  4418  0011D2  6E01               	movwf	___awmod@dividend,c
  4419  0011D4  6A02               	clrf	___awmod@dividend+1,c
  4420  0011D6  BE01               	btfsc	___awmod@dividend,7,c
  4421  0011D8  0602               	decf	___awmod@dividend+1,f,c
  4422  0011DA  ECF9  F013         	call	___awmod	;wreg free
  4423  0011DE  C001  F008         	movff	?___awmod,___awdiv@dividend
  4424  0011E2  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4425  0011E6  ECF7  F012         	call	___awdiv	;wreg free
  4426  0011EA  0E09               	movlw	9
  4427  0011EC  2408               	addwf	?___awdiv,w,c
  4428  0011EE  6E11               	movwf	___wmul@multiplier,c
  4429  0011F0  0E00               	movlw	0
  4430  0011F2  2009               	addwfc	?___awdiv+1,w,c
  4431  0011F4  6E12               	movwf	___wmul@multiplier+1,c
  4432  0011F6  EC2E  F016         	call	___wmul	;wreg free
  4433  0011FA  0E29               	movlw	low __npowers_
  4434  0011FC  2411               	addwf	?___wmul,w,c
  4435  0011FE  6EF6               	movwf	tblptrl,c
  4436  001200  0E08               	movlw	high __npowers_
  4437  001202  2012               	addwfc	?___wmul+1,w,c
  4438  001204  6EF7               	movwf	tblptrh,c
  4439  001206  0009               	tblrd		*+
  4440  001208  CFF5 F03D          	movff	tablat,___ftmul@f2
  4441  00120C  0009               	tblrd		*+
  4442  00120E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4443  001212  000A               	tblrd		*-
  4444  001214  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4445  001218  0E00               	movlw	0
  4446  00121A  6E14               	movwf	___wmul@multiplicand+1,c
  4447  00121C  0E03               	movlw	3
  4448  00121E  6E13               	movwf	___wmul@multiplicand,c
  4449  001220  0E00               	movlw	0
  4450  001222  6E0B               	movwf	___awdiv@divisor+1,c
  4451  001224  0E64               	movlw	100
  4452  001226  6E0A               	movwf	___awdiv@divisor,c
  4453  001228  504F               	movf	scale@scl,w,c
  4454  00122A  6E08               	movwf	___awdiv@dividend,c
  4455  00122C  6A09               	clrf	___awdiv@dividend+1,c
  4456  00122E  BE08               	btfsc	___awdiv@dividend,7,c
  4457  001230  0609               	decf	___awdiv@dividend+1,f,c
  4458  001232  ECF7  F012         	call	___awdiv	;wreg free
  4459  001236  0E12               	movlw	18
  4460  001238  2408               	addwf	?___awdiv,w,c
  4461  00123A  6E11               	movwf	___wmul@multiplier,c
  4462  00123C  0E00               	movlw	0
  4463  00123E  2009               	addwfc	?___awdiv+1,w,c
  4464  001240  6E12               	movwf	___wmul@multiplier+1,c
  4465  001242  EC2E  F016         	call	___wmul	;wreg free
  4466  001246  0E29               	movlw	low __npowers_
  4467  001248  2411               	addwf	?___wmul,w,c
  4468  00124A  6EF6               	movwf	tblptrl,c
  4469  00124C  0E08               	movlw	high __npowers_
  4470  00124E  2012               	addwfc	?___wmul+1,w,c
  4471  001250  6EF7               	movwf	tblptrh,c
  4472  001252  0009               	tblrd		*+
  4473  001254  CFF5 F03A          	movff	tablat,___ftmul@f1
  4474  001258  0009               	tblrd		*+
  4475  00125A  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4476  00125E  000A               	tblrd		*-
  4477  001260  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4478  001264  EC24  F011         	call	___ftmul	;wreg free
  4479  001268  C03A  F04C         	movff	?___ftmul,_scale$1702
  4480  00126C  C03B  F04D         	movff	?___ftmul+1,_scale$1702+1
  4481  001270  C03C  F04E         	movff	?___ftmul+2,_scale$1702+2
  4482                           
  4483                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4484  001274  C04C  F03A         	movff	_scale$1702,___ftmul@f1
  4485  001278  C04D  F03B         	movff	_scale$1702+1,___ftmul@f1+1
  4486  00127C  C04E  F03C         	movff	_scale$1702+2,___ftmul@f1+2
  4487  001280  0E00               	movlw	0
  4488  001282  6E14               	movwf	___wmul@multiplicand+1,c
  4489  001284  0E03               	movlw	3
  4490  001286  6E13               	movwf	___wmul@multiplicand,c
  4491  001288  0E00               	movlw	0
  4492  00128A  6E04               	movwf	___awmod@divisor+1,c
  4493  00128C  0E0A               	movlw	10
  4494  00128E  6E03               	movwf	___awmod@divisor,c
  4495  001290  504F               	movf	scale@scl,w,c
  4496  001292  6E01               	movwf	___awmod@dividend,c
  4497  001294  6A02               	clrf	___awmod@dividend+1,c
  4498  001296  BE01               	btfsc	___awmod@dividend,7,c
  4499  001298  0602               	decf	___awmod@dividend+1,f,c
  4500  00129A  ECF9  F013         	call	___awmod	;wreg free
  4501  00129E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4502  0012A2  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4503  0012A6  EC2E  F016         	call	___wmul	;wreg free
  4504  0012AA  0E29               	movlw	low __npowers_
  4505  0012AC  2411               	addwf	?___wmul,w,c
  4506  0012AE  6EF6               	movwf	tblptrl,c
  4507  0012B0  0E08               	movlw	high __npowers_
  4508  0012B2  2012               	addwfc	?___wmul+1,w,c
  4509  0012B4  6EF7               	movwf	tblptrh,c
  4510  0012B6  0009               	tblrd		*+
  4511  0012B8  CFF5 F03D          	movff	tablat,___ftmul@f2
  4512  0012BC  0009               	tblrd		*+
  4513  0012BE  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4514  0012C2  000A               	tblrd		*-
  4515  0012C4  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4516  0012C8  EC24  F011         	call	___ftmul	;wreg free
  4517  0012CC  C03A  F049         	movff	?___ftmul,?_scale
  4518  0012D0  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4519  0012D4  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4520  0012D8  0012               	return	
  4521  0012DA                     l4471:
  4522                           
  4523                           ;doprnt.c: 432: else if(scl > 10)
  4524  0012DA  504F               	movf	scale@scl,w,c
  4525  0012DC  0A80               	xorlw	128
  4526  0012DE  0F75               	addlw	-139
  4527  0012E0  A0D8               	btfss	status,0,c
  4528  0012E2  D053               	goto	l4477
  4529                           
  4530                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4531  0012E4  0E00               	movlw	0
  4532  0012E6  6E14               	movwf	___wmul@multiplicand+1,c
  4533  0012E8  0E03               	movlw	3
  4534  0012EA  6E13               	movwf	___wmul@multiplicand,c
  4535  0012EC  0E00               	movlw	0
  4536  0012EE  6E0B               	movwf	___awdiv@divisor+1,c
  4537  0012F0  0E0A               	movlw	10
  4538  0012F2  6E0A               	movwf	___awdiv@divisor,c
  4539  0012F4  504F               	movf	scale@scl,w,c
  4540  0012F6  6E08               	movwf	___awdiv@dividend,c
  4541  0012F8  6A09               	clrf	___awdiv@dividend+1,c
  4542  0012FA  BE08               	btfsc	___awdiv@dividend,7,c
  4543  0012FC  0609               	decf	___awdiv@dividend+1,f,c
  4544  0012FE  ECF7  F012         	call	___awdiv	;wreg free
  4545  001302  0E09               	movlw	9
  4546  001304  2408               	addwf	?___awdiv,w,c
  4547  001306  6E11               	movwf	___wmul@multiplier,c
  4548  001308  0E00               	movlw	0
  4549  00130A  2009               	addwfc	?___awdiv+1,w,c
  4550  00130C  6E12               	movwf	___wmul@multiplier+1,c
  4551  00130E  EC2E  F016         	call	___wmul	;wreg free
  4552  001312  0E29               	movlw	low __npowers_
  4553  001314  2411               	addwf	?___wmul,w,c
  4554  001316  6EF6               	movwf	tblptrl,c
  4555  001318  0E08               	movlw	high __npowers_
  4556  00131A  2012               	addwfc	?___wmul+1,w,c
  4557  00131C  6EF7               	movwf	tblptrh,c
  4558  00131E  0009               	tblrd		*+
  4559  001320  CFF5 F03A          	movff	tablat,___ftmul@f1
  4560  001324  0009               	tblrd		*+
  4561  001326  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4562  00132A  000A               	tblrd		*-
  4563  00132C  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4564  001330  0E00               	movlw	0
  4565  001332  6E14               	movwf	___wmul@multiplicand+1,c
  4566  001334  0E03               	movlw	3
  4567  001336  6E13               	movwf	___wmul@multiplicand,c
  4568  001338  0E00               	movlw	0
  4569  00133A  6E04               	movwf	___awmod@divisor+1,c
  4570  00133C  0E0A               	movlw	10
  4571  00133E  6E03               	movwf	___awmod@divisor,c
  4572  001340  504F               	movf	scale@scl,w,c
  4573  001342  6E01               	movwf	___awmod@dividend,c
  4574  001344  6A02               	clrf	___awmod@dividend+1,c
  4575  001346  BE01               	btfsc	___awmod@dividend,7,c
  4576  001348  0602               	decf	___awmod@dividend+1,f,c
  4577  00134A  ECF9  F013         	call	___awmod	;wreg free
  4578  00134E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4579  001352  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4580  001356  EC2E  F016         	call	___wmul	;wreg free
  4581  00135A  0E29               	movlw	low __npowers_
  4582  00135C  2411               	addwf	?___wmul,w,c
  4583  00135E  6EF6               	movwf	tblptrl,c
  4584  001360  0E08               	movlw	high __npowers_
  4585  001362  2012               	addwfc	?___wmul+1,w,c
  4586  001364  6EF7               	movwf	tblptrh,c
  4587  001366  0009               	tblrd		*+
  4588  001368  CFF5 F03D          	movff	tablat,___ftmul@f2
  4589  00136C  0009               	tblrd		*+
  4590  00136E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4591  001372  000A               	tblrd		*-
  4592  001374  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4593  001378  EC24  F011         	call	___ftmul	;wreg free
  4594  00137C  C03A  F049         	movff	?___ftmul,?_scale
  4595  001380  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4596  001384  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4597  001388  0012               	return	
  4598  00138A                     l4477:
  4599                           
  4600                           ;doprnt.c: 434: return _npowers_[scl];
  4601  00138A  504F               	movf	scale@scl,w,c
  4602  00138C  0D03               	mullw	3
  4603  00138E  0E29               	movlw	low __npowers_
  4604  001390  24F3               	addwf	prodl,w,c
  4605  001392  6EF6               	movwf	tblptrl,c
  4606  001394  0E08               	movlw	high __npowers_
  4607  001396  20F4               	addwfc	prodh,w,c
  4608  001398  6EF7               	movwf	tblptrh,c
  4609  00139A  0009               	tblrd		*+
  4610  00139C  CFF5 F049          	movff	tablat,?_scale
  4611  0013A0  0009               	tblrd		*+
  4612  0013A2  CFF5 F04A          	movff	tablat,?_scale+1
  4613  0013A6  000A               	tblrd		*-
  4614  0013A8  CFF5 F04B          	movff	tablat,?_scale+2
  4615  0013AC  0012               	return	
  4616  0013AE                     l4481:
  4617                           
  4618                           ;doprnt.c: 435: }
  4619                           ;doprnt.c: 436: if(scl>=110)
  4620  0013AE  504F               	movf	scale@scl,w,c
  4621  0013B0  0A80               	xorlw	128
  4622  0013B2  0F12               	addlw	-238
  4623  0013B4  A0D8               	btfss	status,0,c
  4624  0013B6  D091               	goto	l4489
  4625                           
  4626                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4627  0013B8  0E00               	movlw	0
  4628  0013BA  6E14               	movwf	___wmul@multiplicand+1,c
  4629  0013BC  0E03               	movlw	3
  4630  0013BE  6E13               	movwf	___wmul@multiplicand,c
  4631  0013C0  0E00               	movlw	0
  4632  0013C2  6E0B               	movwf	___awdiv@divisor+1,c
  4633  0013C4  0E0A               	movlw	10
  4634  0013C6  6E0A               	movwf	___awdiv@divisor,c
  4635  0013C8  0E00               	movlw	0
  4636  0013CA  6E04               	movwf	___awmod@divisor+1,c
  4637  0013CC  0E64               	movlw	100
  4638  0013CE  6E03               	movwf	___awmod@divisor,c
  4639  0013D0  504F               	movf	scale@scl,w,c
  4640  0013D2  6E01               	movwf	___awmod@dividend,c
  4641  0013D4  6A02               	clrf	___awmod@dividend+1,c
  4642  0013D6  BE01               	btfsc	___awmod@dividend,7,c
  4643  0013D8  0602               	decf	___awmod@dividend+1,f,c
  4644  0013DA  ECF9  F013         	call	___awmod	;wreg free
  4645  0013DE  C001  F008         	movff	?___awmod,___awdiv@dividend
  4646  0013E2  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4647  0013E6  ECF7  F012         	call	___awdiv	;wreg free
  4648  0013EA  0E09               	movlw	9
  4649  0013EC  2408               	addwf	?___awdiv,w,c
  4650  0013EE  6E11               	movwf	___wmul@multiplier,c
  4651  0013F0  0E00               	movlw	0
  4652  0013F2  2009               	addwfc	?___awdiv+1,w,c
  4653  0013F4  6E12               	movwf	___wmul@multiplier+1,c
  4654  0013F6  EC2E  F016         	call	___wmul	;wreg free
  4655  0013FA  0E50               	movlw	low __powers_
  4656  0013FC  2411               	addwf	?___wmul,w,c
  4657  0013FE  6EF6               	movwf	tblptrl,c
  4658  001400  0E08               	movlw	high __powers_
  4659  001402  2012               	addwfc	?___wmul+1,w,c
  4660  001404  6EF7               	movwf	tblptrh,c
  4661  001406  0009               	tblrd		*+
  4662  001408  CFF5 F03D          	movff	tablat,___ftmul@f2
  4663  00140C  0009               	tblrd		*+
  4664  00140E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4665  001412  000A               	tblrd		*-
  4666  001414  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4667  001418  0E00               	movlw	0
  4668  00141A  6E14               	movwf	___wmul@multiplicand+1,c
  4669  00141C  0E03               	movlw	3
  4670  00141E  6E13               	movwf	___wmul@multiplicand,c
  4671  001420  0E00               	movlw	0
  4672  001422  6E0B               	movwf	___awdiv@divisor+1,c
  4673  001424  0E64               	movlw	100
  4674  001426  6E0A               	movwf	___awdiv@divisor,c
  4675  001428  504F               	movf	scale@scl,w,c
  4676  00142A  6E08               	movwf	___awdiv@dividend,c
  4677  00142C  6A09               	clrf	___awdiv@dividend+1,c
  4678  00142E  BE08               	btfsc	___awdiv@dividend,7,c
  4679  001430  0609               	decf	___awdiv@dividend+1,f,c
  4680  001432  ECF7  F012         	call	___awdiv	;wreg free
  4681  001436  0E12               	movlw	18
  4682  001438  2408               	addwf	?___awdiv,w,c
  4683  00143A  6E11               	movwf	___wmul@multiplier,c
  4684  00143C  0E00               	movlw	0
  4685  00143E  2009               	addwfc	?___awdiv+1,w,c
  4686  001440  6E12               	movwf	___wmul@multiplier+1,c
  4687  001442  EC2E  F016         	call	___wmul	;wreg free
  4688  001446  0E50               	movlw	low __powers_
  4689  001448  2411               	addwf	?___wmul,w,c
  4690  00144A  6EF6               	movwf	tblptrl,c
  4691  00144C  0E08               	movlw	high __powers_
  4692  00144E  2012               	addwfc	?___wmul+1,w,c
  4693  001450  6EF7               	movwf	tblptrh,c
  4694  001452  0009               	tblrd		*+
  4695  001454  CFF5 F03A          	movff	tablat,___ftmul@f1
  4696  001458  0009               	tblrd		*+
  4697  00145A  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4698  00145E  000A               	tblrd		*-
  4699  001460  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4700  001464  EC24  F011         	call	___ftmul	;wreg free
  4701  001468  C03A  F04C         	movff	?___ftmul,_scale$1702
  4702  00146C  C03B  F04D         	movff	?___ftmul+1,_scale$1702+1
  4703  001470  C03C  F04E         	movff	?___ftmul+2,_scale$1702+2
  4704                           
  4705                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4706  001474  C04C  F03A         	movff	_scale$1702,___ftmul@f1
  4707  001478  C04D  F03B         	movff	_scale$1702+1,___ftmul@f1+1
  4708  00147C  C04E  F03C         	movff	_scale$1702+2,___ftmul@f1+2
  4709  001480  0E00               	movlw	0
  4710  001482  6E14               	movwf	___wmul@multiplicand+1,c
  4711  001484  0E03               	movlw	3
  4712  001486  6E13               	movwf	___wmul@multiplicand,c
  4713  001488  0E00               	movlw	0
  4714  00148A  6E04               	movwf	___awmod@divisor+1,c
  4715  00148C  0E0A               	movlw	10
  4716  00148E  6E03               	movwf	___awmod@divisor,c
  4717  001490  504F               	movf	scale@scl,w,c
  4718  001492  6E01               	movwf	___awmod@dividend,c
  4719  001494  6A02               	clrf	___awmod@dividend+1,c
  4720  001496  BE01               	btfsc	___awmod@dividend,7,c
  4721  001498  0602               	decf	___awmod@dividend+1,f,c
  4722  00149A  ECF9  F013         	call	___awmod	;wreg free
  4723  00149E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4724  0014A2  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4725  0014A6  EC2E  F016         	call	___wmul	;wreg free
  4726  0014AA  0E50               	movlw	low __powers_
  4727  0014AC  2411               	addwf	?___wmul,w,c
  4728  0014AE  6EF6               	movwf	tblptrl,c
  4729  0014B0  0E08               	movlw	high __powers_
  4730  0014B2  2012               	addwfc	?___wmul+1,w,c
  4731  0014B4  6EF7               	movwf	tblptrh,c
  4732  0014B6  0009               	tblrd		*+
  4733  0014B8  CFF5 F03D          	movff	tablat,___ftmul@f2
  4734  0014BC  0009               	tblrd		*+
  4735  0014BE  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4736  0014C2  000A               	tblrd		*-
  4737  0014C4  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4738  0014C8  EC24  F011         	call	___ftmul	;wreg free
  4739  0014CC  C03A  F049         	movff	?___ftmul,?_scale
  4740  0014D0  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4741  0014D4  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4742  0014D8  0012               	return	
  4743  0014DA                     l4489:
  4744                           
  4745                           ;doprnt.c: 438: else if(scl > 10)
  4746  0014DA  504F               	movf	scale@scl,w,c
  4747  0014DC  0A80               	xorlw	128
  4748  0014DE  0F75               	addlw	-139
  4749  0014E0  A0D8               	btfss	status,0,c
  4750  0014E2  D053               	goto	l4495
  4751                           
  4752                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4753  0014E4  0E00               	movlw	0
  4754  0014E6  6E14               	movwf	___wmul@multiplicand+1,c
  4755  0014E8  0E03               	movlw	3
  4756  0014EA  6E13               	movwf	___wmul@multiplicand,c
  4757  0014EC  0E00               	movlw	0
  4758  0014EE  6E0B               	movwf	___awdiv@divisor+1,c
  4759  0014F0  0E0A               	movlw	10
  4760  0014F2  6E0A               	movwf	___awdiv@divisor,c
  4761  0014F4  504F               	movf	scale@scl,w,c
  4762  0014F6  6E08               	movwf	___awdiv@dividend,c
  4763  0014F8  6A09               	clrf	___awdiv@dividend+1,c
  4764  0014FA  BE08               	btfsc	___awdiv@dividend,7,c
  4765  0014FC  0609               	decf	___awdiv@dividend+1,f,c
  4766  0014FE  ECF7  F012         	call	___awdiv	;wreg free
  4767  001502  0E09               	movlw	9
  4768  001504  2408               	addwf	?___awdiv,w,c
  4769  001506  6E11               	movwf	___wmul@multiplier,c
  4770  001508  0E00               	movlw	0
  4771  00150A  2009               	addwfc	?___awdiv+1,w,c
  4772  00150C  6E12               	movwf	___wmul@multiplier+1,c
  4773  00150E  EC2E  F016         	call	___wmul	;wreg free
  4774  001512  0E50               	movlw	low __powers_
  4775  001514  2411               	addwf	?___wmul,w,c
  4776  001516  6EF6               	movwf	tblptrl,c
  4777  001518  0E08               	movlw	high __powers_
  4778  00151A  2012               	addwfc	?___wmul+1,w,c
  4779  00151C  6EF7               	movwf	tblptrh,c
  4780  00151E  0009               	tblrd		*+
  4781  001520  CFF5 F03A          	movff	tablat,___ftmul@f1
  4782  001524  0009               	tblrd		*+
  4783  001526  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4784  00152A  000A               	tblrd		*-
  4785  00152C  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4786  001530  0E00               	movlw	0
  4787  001532  6E14               	movwf	___wmul@multiplicand+1,c
  4788  001534  0E03               	movlw	3
  4789  001536  6E13               	movwf	___wmul@multiplicand,c
  4790  001538  0E00               	movlw	0
  4791  00153A  6E04               	movwf	___awmod@divisor+1,c
  4792  00153C  0E0A               	movlw	10
  4793  00153E  6E03               	movwf	___awmod@divisor,c
  4794  001540  504F               	movf	scale@scl,w,c
  4795  001542  6E01               	movwf	___awmod@dividend,c
  4796  001544  6A02               	clrf	___awmod@dividend+1,c
  4797  001546  BE01               	btfsc	___awmod@dividend,7,c
  4798  001548  0602               	decf	___awmod@dividend+1,f,c
  4799  00154A  ECF9  F013         	call	___awmod	;wreg free
  4800  00154E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4801  001552  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4802  001556  EC2E  F016         	call	___wmul	;wreg free
  4803  00155A  0E50               	movlw	low __powers_
  4804  00155C  2411               	addwf	?___wmul,w,c
  4805  00155E  6EF6               	movwf	tblptrl,c
  4806  001560  0E08               	movlw	high __powers_
  4807  001562  2012               	addwfc	?___wmul+1,w,c
  4808  001564  6EF7               	movwf	tblptrh,c
  4809  001566  0009               	tblrd		*+
  4810  001568  CFF5 F03D          	movff	tablat,___ftmul@f2
  4811  00156C  0009               	tblrd		*+
  4812  00156E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4813  001572  000A               	tblrd		*-
  4814  001574  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4815  001578  EC24  F011         	call	___ftmul	;wreg free
  4816  00157C  C03A  F049         	movff	?___ftmul,?_scale
  4817  001580  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4818  001584  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4819  001588  0012               	return	
  4820  00158A                     l4495:
  4821                           
  4822                           ;doprnt.c: 440: return _powers_[scl];
  4823  00158A  504F               	movf	scale@scl,w,c
  4824  00158C  0D03               	mullw	3
  4825  00158E  0E50               	movlw	low __powers_
  4826  001590  24F3               	addwf	prodl,w,c
  4827  001592  6EF6               	movwf	tblptrl,c
  4828  001594  0E08               	movlw	high __powers_
  4829  001596  20F4               	addwfc	prodh,w,c
  4830  001598  6EF7               	movwf	tblptrh,c
  4831  00159A  0009               	tblrd		*+
  4832  00159C  CFF5 F049          	movff	tablat,?_scale
  4833  0015A0  0009               	tblrd		*+
  4834  0015A2  CFF5 F04A          	movff	tablat,?_scale+1
  4835  0015A6  000A               	tblrd		*-
  4836  0015A8  CFF5 F04B          	movff	tablat,?_scale+2
  4837  0015AC  0012               	return	
  4838  0015AE                     __end_of_scale:
  4839                           	opt stack 0
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon2	equ	0xFF1
  4847                           wreg	equ	0xFE8
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           fsr2h	equ	0xFDA
  4852                           fsr2l	equ	0xFD9
  4853                           status	equ	0xFD8
  4854                           
  4855 ;; *************** function _isdigit *****************
  4856 ;; Defined at:
  4857 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/isdigit.c"
  4858 ;; Parameters:    Size  Location     Type
  4859 ;;  c               1    wreg     unsigned char 
  4860 ;; Auto vars:     Size  Location     Type
  4861 ;;  c               1    2[COMRAM] unsigned char 
  4862 ;; Return value:  Size  Location     Type
  4863 ;;		None               void
  4864 ;; Registers used:
  4865 ;;		wreg, status,2, status,0
  4866 ;; Tracked objects:
  4867 ;;		On entry : 0/0
  4868 ;;		On exit  : 0/0
  4869 ;;		Unchanged: 0/0
  4870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4871 ;;      Params:         0       0       0       0       0       0       0       0       0
  4872 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4873 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4874 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4875 ;;Total ram usage:        3 bytes
  4876 ;; Hardware stack levels used:    1
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_sprintf
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text18
  4885  002D5E                     __ptext18:
  4886                           	opt stack 0
  4887  002D5E                     _isdigit:
  4888                           	opt stack 28
  4889                           
  4890                           ;incstack = 0
  4891                           ;isdigit@c stored from wreg
  4892  002D5E  CFE8 F003          	movff	wreg,isdigit@c
  4893  002D62  6E01               	movwf	??_isdigit& (0+255),c
  4894  002D64  0E00               	movlw	0
  4895  002D66  6E02               	movwf	_isdigit$1253,c
  4896  002D68  5001               	movf	??_isdigit& (0+255),w,c
  4897  002D6A  0E3A               	movlw	58
  4898  002D6C  5C03               	subwf	isdigit@c,w,c
  4899  002D6E  B0D8               	btfsc	status,0,c
  4900  002D70  D007               	goto	l4507
  4901  002D72  0E2F               	movlw	47
  4902  002D74  6403               	cpfsgt	isdigit@c,c
  4903  002D76  D004               	goto	l4507
  4904  002D78  6E01               	movwf	??_isdigit& (0+255),c
  4905  002D7A  0E01               	movlw	1
  4906  002D7C  6E02               	movwf	_isdigit$1253,c
  4907  002D7E  5001               	movf	??_isdigit& (0+255),w,c
  4908  002D80                     l4507:
  4909  002D80  C002  F001         	movff	_isdigit$1253,??_isdigit
  4910  002D84  3001               	rrcf	??_isdigit,w,c
  4911  002D86  0012               	return	
  4912  002D88                     __end_of_isdigit:
  4913                           	opt stack 0
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon2	equ	0xFF1
  4921                           wreg	equ	0xFE8
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _fround *****************
  4930 ;; Defined at:
  4931 ;;		line 409 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  prec            1    wreg     unsigned char 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  prec            1   81[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  3   72[COMRAM] unsigned char 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4945 ;;      Params:         3       0       0       0       0       0       0       0       0
  4946 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4948 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4949 ;;Total ram usage:       10 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    2
  4952 ;; This function calls:
  4953 ;;		___awdiv
  4954 ;;		___awmod
  4955 ;;		___ftmul
  4956 ;;		___wmul
  4957 ;; This function is called by:
  4958 ;;		_sprintf
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text19
  4963  001804                     __ptext19:
  4964                           	opt stack 0
  4965  001804                     _fround:
  4966                           	opt stack 26
  4967                           
  4968                           ;incstack = 0
  4969                           ;fround@prec stored from wreg
  4970  001804  CFE8 F052          	movff	wreg,fround@prec
  4971                           
  4972                           ;doprnt.c: 413: if(prec>=110)
  4973  001808  0E6D               	movlw	109
  4974  00180A  6452               	cpfsgt	fround@prec,c
  4975  00180C  D09F               	goto	l4449
  4976                           
  4977                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4978  00180E  0E00               	movlw	0
  4979  001810  6E14               	movwf	___wmul@multiplicand+1,c
  4980  001812  0E03               	movlw	3
  4981  001814  6E13               	movwf	___wmul@multiplicand,c
  4982  001816  0E00               	movlw	0
  4983  001818  6E0B               	movwf	___awdiv@divisor+1,c
  4984  00181A  0E0A               	movlw	10
  4985  00181C  6E0A               	movwf	___awdiv@divisor,c
  4986  00181E  0E00               	movlw	0
  4987  001820  6E04               	movwf	___awmod@divisor+1,c
  4988  001822  0E64               	movlw	100
  4989  001824  6E03               	movwf	___awmod@divisor,c
  4990  001826  C052  F001         	movff	fround@prec,___awmod@dividend
  4991  00182A  6A02               	clrf	___awmod@dividend+1,c
  4992  00182C  ECF9  F013         	call	___awmod	;wreg free
  4993  001830  C001  F008         	movff	?___awmod,___awdiv@dividend
  4994  001834  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4995  001838  ECF7  F012         	call	___awdiv	;wreg free
  4996  00183C  0E09               	movlw	9
  4997  00183E  2408               	addwf	?___awdiv,w,c
  4998  001840  6E11               	movwf	___wmul@multiplier,c
  4999  001842  0E00               	movlw	0
  5000  001844  2009               	addwfc	?___awdiv+1,w,c
  5001  001846  6E12               	movwf	___wmul@multiplier+1,c
  5002  001848  EC2E  F016         	call	___wmul	;wreg free
  5003  00184C  0E29               	movlw	low __npowers_
  5004  00184E  2411               	addwf	?___wmul,w,c
  5005  001850  6EF6               	movwf	tblptrl,c
  5006  001852  0E08               	movlw	high __npowers_
  5007  001854  2012               	addwfc	?___wmul+1,w,c
  5008  001856  6EF7               	movwf	tblptrh,c
  5009  001858  0009               	tblrd		*+
  5010  00185A  CFF5 F03D          	movff	tablat,___ftmul@f2
  5011  00185E  0009               	tblrd		*+
  5012  001860  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  5013  001864  000A               	tblrd		*-
  5014  001866  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  5015  00186A  0E00               	movlw	0
  5016  00186C  6E14               	movwf	___wmul@multiplicand+1,c
  5017  00186E  0E03               	movlw	3
  5018  001870  6E13               	movwf	___wmul@multiplicand,c
  5019  001872  0E00               	movlw	0
  5020  001874  6E0B               	movwf	___awdiv@divisor+1,c
  5021  001876  0E64               	movlw	100
  5022  001878  6E0A               	movwf	___awdiv@divisor,c
  5023  00187A  C052  F008         	movff	fround@prec,___awdiv@dividend
  5024  00187E  6A09               	clrf	___awdiv@dividend+1,c
  5025  001880  ECF7  F012         	call	___awdiv	;wreg free
  5026  001884  0E12               	movlw	18
  5027  001886  2408               	addwf	?___awdiv,w,c
  5028  001888  6E11               	movwf	___wmul@multiplier,c
  5029  00188A  0E00               	movlw	0
  5030  00188C  2009               	addwfc	?___awdiv+1,w,c
  5031  00188E  6E12               	movwf	___wmul@multiplier+1,c
  5032  001890  EC2E  F016         	call	___wmul	;wreg free
  5033  001894  0E29               	movlw	low __npowers_
  5034  001896  2411               	addwf	?___wmul,w,c
  5035  001898  6EF6               	movwf	tblptrl,c
  5036  00189A  0E08               	movlw	high __npowers_
  5037  00189C  2012               	addwfc	?___wmul+1,w,c
  5038  00189E  6EF7               	movwf	tblptrh,c
  5039  0018A0  0009               	tblrd		*+
  5040  0018A2  CFF5 F03A          	movff	tablat,___ftmul@f1
  5041  0018A6  0009               	tblrd		*+
  5042  0018A8  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  5043  0018AC  000A               	tblrd		*-
  5044  0018AE  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  5045  0018B2  EC24  F011         	call	___ftmul	;wreg free
  5046  0018B6  C03A  F04F         	movff	?___ftmul,_fround$1700
  5047  0018BA  C03B  F050         	movff	?___ftmul+1,_fround$1700+1
  5048  0018BE  C03C  F051         	movff	?___ftmul+2,_fround$1700+2
  5049                           
  5050                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5051  0018C2  0E00               	movlw	0
  5052  0018C4  6E14               	movwf	___wmul@multiplicand+1,c
  5053  0018C6  0E03               	movlw	3
  5054  0018C8  6E13               	movwf	___wmul@multiplicand,c
  5055  0018CA  0E00               	movlw	0
  5056  0018CC  6E04               	movwf	___awmod@divisor+1,c
  5057  0018CE  0E0A               	movlw	10
  5058  0018D0  6E03               	movwf	___awmod@divisor,c
  5059  0018D2  C052  F001         	movff	fround@prec,___awmod@dividend
  5060  0018D6  6A02               	clrf	___awmod@dividend+1,c
  5061  0018D8  ECF9  F013         	call	___awmod	;wreg free
  5062  0018DC  C001  F011         	movff	?___awmod,___wmul@multiplier
  5063  0018E0  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  5064  0018E4  EC2E  F016         	call	___wmul	;wreg free
  5065  0018E8  0E29               	movlw	low __npowers_
  5066  0018EA  2411               	addwf	?___wmul,w,c
  5067  0018EC  6EF6               	movwf	tblptrl,c
  5068  0018EE  0E08               	movlw	high __npowers_
  5069  0018F0  2012               	addwfc	?___wmul+1,w,c
  5070  0018F2  6EF7               	movwf	tblptrh,c
  5071  0018F4  0009               	tblrd		*+
  5072  0018F6  CFF5 F03D          	movff	tablat,___ftmul@f2
  5073  0018FA  0009               	tblrd		*+
  5074  0018FC  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  5075  001900  000A               	tblrd		*-
  5076  001902  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  5077  001906  C04F  F03A         	movff	_fround$1700,___ftmul@f1
  5078  00190A  C050  F03B         	movff	_fround$1700+1,___ftmul@f1+1
  5079  00190E  C051  F03C         	movff	_fround$1700+2,___ftmul@f1+2
  5080  001912  EC24  F011         	call	___ftmul	;wreg free
  5081  001916  C03A  F04C         	movff	?___ftmul,_fround$1701
  5082  00191A  C03B  F04D         	movff	?___ftmul+1,_fround$1701+1
  5083  00191E  C03C  F04E         	movff	?___ftmul+2,_fround$1701+2
  5084                           
  5085                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5086  001922  C04C  F03A         	movff	_fround$1701,___ftmul@f1
  5087  001926  C04D  F03B         	movff	_fround$1701+1,___ftmul@f1+1
  5088  00192A  C04E  F03C         	movff	_fround$1701+2,___ftmul@f1+2
  5089  00192E  0E00               	movlw	0
  5090  001930  6E3D               	movwf	___ftmul@f2,c
  5091  001932  0E00               	movlw	0
  5092  001934  6E3E               	movwf	___ftmul@f2+1,c
  5093  001936  0E3F               	movlw	63
  5094  001938  6E3F               	movwf	___ftmul@f2+2,c
  5095  00193A  EC24  F011         	call	___ftmul	;wreg free
  5096  00193E  C03A  F049         	movff	?___ftmul,?_fround
  5097  001942  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5098  001946  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5099  00194A  0012               	return	
  5100  00194C                     l4449:
  5101                           
  5102                           ;doprnt.c: 415: else if(prec > 10)
  5103  00194C  0E0A               	movlw	10
  5104  00194E  6452               	cpfsgt	fround@prec,c
  5105  001950  D063               	goto	l4457
  5106                           
  5107                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5108  001952  0E00               	movlw	0
  5109  001954  6E14               	movwf	___wmul@multiplicand+1,c
  5110  001956  0E03               	movlw	3
  5111  001958  6E13               	movwf	___wmul@multiplicand,c
  5112  00195A  0E00               	movlw	0
  5113  00195C  6E04               	movwf	___awmod@divisor+1,c
  5114  00195E  0E0A               	movlw	10
  5115  001960  6E03               	movwf	___awmod@divisor,c
  5116  001962  C052  F001         	movff	fround@prec,___awmod@dividend
  5117  001966  6A02               	clrf	___awmod@dividend+1,c
  5118  001968  ECF9  F013         	call	___awmod	;wreg free
  5119  00196C  C001  F011         	movff	?___awmod,___wmul@multiplier
  5120  001970  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  5121  001974  EC2E  F016         	call	___wmul	;wreg free
  5122  001978  0E29               	movlw	low __npowers_
  5123  00197A  2411               	addwf	?___wmul,w,c
  5124  00197C  6EF6               	movwf	tblptrl,c
  5125  00197E  0E08               	movlw	high __npowers_
  5126  001980  2012               	addwfc	?___wmul+1,w,c
  5127  001982  6EF7               	movwf	tblptrh,c
  5128  001984  0009               	tblrd		*+
  5129  001986  CFF5 F03D          	movff	tablat,___ftmul@f2
  5130  00198A  0009               	tblrd		*+
  5131  00198C  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  5132  001990  000A               	tblrd		*-
  5133  001992  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  5134  001996  0E00               	movlw	0
  5135  001998  6E14               	movwf	___wmul@multiplicand+1,c
  5136  00199A  0E03               	movlw	3
  5137  00199C  6E13               	movwf	___wmul@multiplicand,c
  5138  00199E  0E00               	movlw	0
  5139  0019A0  6E0B               	movwf	___awdiv@divisor+1,c
  5140  0019A2  0E0A               	movlw	10
  5141  0019A4  6E0A               	movwf	___awdiv@divisor,c
  5142  0019A6  C052  F008         	movff	fround@prec,___awdiv@dividend
  5143  0019AA  6A09               	clrf	___awdiv@dividend+1,c
  5144  0019AC  ECF7  F012         	call	___awdiv	;wreg free
  5145  0019B0  0E09               	movlw	9
  5146  0019B2  2408               	addwf	?___awdiv,w,c
  5147  0019B4  6E11               	movwf	___wmul@multiplier,c
  5148  0019B6  0E00               	movlw	0
  5149  0019B8  2009               	addwfc	?___awdiv+1,w,c
  5150  0019BA  6E12               	movwf	___wmul@multiplier+1,c
  5151  0019BC  EC2E  F016         	call	___wmul	;wreg free
  5152  0019C0  0E29               	movlw	low __npowers_
  5153  0019C2  2411               	addwf	?___wmul,w,c
  5154  0019C4  6EF6               	movwf	tblptrl,c
  5155  0019C6  0E08               	movlw	high __npowers_
  5156  0019C8  2012               	addwfc	?___wmul+1,w,c
  5157  0019CA  6EF7               	movwf	tblptrh,c
  5158  0019CC  0009               	tblrd		*+
  5159  0019CE  CFF5 F03A          	movff	tablat,___ftmul@f1
  5160  0019D2  0009               	tblrd		*+
  5161  0019D4  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  5162  0019D8  000A               	tblrd		*-
  5163  0019DA  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  5164  0019DE  EC24  F011         	call	___ftmul	;wreg free
  5165  0019E2  C03A  F04F         	movff	?___ftmul,_fround$1700
  5166  0019E6  C03B  F050         	movff	?___ftmul+1,_fround$1700+1
  5167  0019EA  C03C  F051         	movff	?___ftmul+2,_fround$1700+2
  5168                           
  5169                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5170  0019EE  C04F  F03A         	movff	_fround$1700,___ftmul@f1
  5171  0019F2  C050  F03B         	movff	_fround$1700+1,___ftmul@f1+1
  5172  0019F6  C051  F03C         	movff	_fround$1700+2,___ftmul@f1+2
  5173  0019FA  0E00               	movlw	0
  5174  0019FC  6E3D               	movwf	___ftmul@f2,c
  5175  0019FE  0E00               	movlw	0
  5176  001A00  6E3E               	movwf	___ftmul@f2+1,c
  5177  001A02  0E3F               	movlw	63
  5178  001A04  6E3F               	movwf	___ftmul@f2+2,c
  5179  001A06  EC24  F011         	call	___ftmul	;wreg free
  5180  001A0A  C03A  F049         	movff	?___ftmul,?_fround
  5181  001A0E  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5182  001A12  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5183  001A16  0012               	return	
  5184  001A18                     l4457:
  5185                           
  5186                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5187  001A18  5052               	movf	fround@prec,w,c
  5188  001A1A  0D03               	mullw	3
  5189  001A1C  0E29               	movlw	low __npowers_
  5190  001A1E  24F3               	addwf	prodl,w,c
  5191  001A20  6EF6               	movwf	tblptrl,c
  5192  001A22  0E08               	movlw	high __npowers_
  5193  001A24  20F4               	addwfc	prodh,w,c
  5194  001A26  6EF7               	movwf	tblptrh,c
  5195  001A28  0009               	tblrd		*+
  5196  001A2A  CFF5 F03A          	movff	tablat,___ftmul@f1
  5197  001A2E  0009               	tblrd		*+
  5198  001A30  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  5199  001A34  000A               	tblrd		*-
  5200  001A36  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  5201  001A3A  0E00               	movlw	0
  5202  001A3C  6E3D               	movwf	___ftmul@f2,c
  5203  001A3E  0E00               	movlw	0
  5204  001A40  6E3E               	movwf	___ftmul@f2+1,c
  5205  001A42  0E3F               	movlw	63
  5206  001A44  6E3F               	movwf	___ftmul@f2+2,c
  5207  001A46  EC24  F011         	call	___ftmul	;wreg free
  5208  001A4A  C03A  F049         	movff	?___ftmul,?_fround
  5209  001A4E  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5210  001A52  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5211  001A56  0012               	return	
  5212  001A58                     __end_of_fround:
  5213                           	opt stack 0
  5214                           tblptru	equ	0xFF8
  5215                           tblptrh	equ	0xFF7
  5216                           tblptrl	equ	0xFF6
  5217                           tablat	equ	0xFF5
  5218                           prodh	equ	0xFF4
  5219                           prodl	equ	0xFF3
  5220                           intcon2	equ	0xFF1
  5221                           wreg	equ	0xFE8
  5222                           indf2	equ	0xFDF
  5223                           postinc2	equ	0xFDE
  5224                           postdec2	equ	0xFDD
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function ___wmul *****************
  5230 ;; Defined at:
  5231 ;;		line 3 in file "/opt/microchip/xc8/v1.31/sources/common/wmul.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  multiplier      2   16[COMRAM] unsigned int 
  5234 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5235 ;; Auto vars:     Size  Location     Type
  5236 ;;  product         2   20[COMRAM] unsigned int 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  2   16[COMRAM] unsigned int 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, prodl, prodh
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5246 ;;      Params:         4       0       0       0       0       0       0       0       0
  5247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5249 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5250 ;;Total ram usage:        6 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; This function calls:
  5253 ;;		Nothing
  5254 ;; This function is called by:
  5255 ;;		_get_temperature
  5256 ;;		_fround
  5257 ;;		_scale
  5258 ;;		_sprintf
  5259 ;;		_eval_poly
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text20
  5264  002C5C                     __ptext20:
  5265                           	opt stack 0
  5266  002C5C                     ___wmul:
  5267                           	opt stack 27
  5268                           
  5269                           ;incstack = 0
  5270  002C5C  5011               	movf	___wmul@multiplier,w,c
  5271  002C5E  0213               	mulwf	___wmul@multiplicand,c
  5272  002C60  CFF3 F015          	movff	prodl,___wmul@product
  5273  002C64  CFF4 F016          	movff	prodh,___wmul@product+1
  5274  002C68  5011               	movf	___wmul@multiplier,w,c
  5275  002C6A  0214               	mulwf	___wmul@multiplicand+1,c
  5276  002C6C  CFF3 FFF4          	movff	prodl,prodh
  5277  002C70  6AF3               	clrf	prodl,c
  5278  002C72  50F3               	movf	prodl,w,c
  5279  002C74  2615               	addwf	___wmul@product,f,c
  5280  002C76  50F4               	movf	prodh,w,c
  5281  002C78  2216               	addwfc	___wmul@product+1,f,c
  5282  002C7A  5012               	movf	___wmul@multiplier+1,w,c
  5283  002C7C  0213               	mulwf	___wmul@multiplicand,c
  5284  002C7E  CFF3 FFF4          	movff	prodl,prodh
  5285  002C82  6AF3               	clrf	prodl,c
  5286  002C84  50F3               	movf	prodl,w,c
  5287  002C86  2615               	addwf	___wmul@product,f,c
  5288  002C88  50F4               	movf	prodh,w,c
  5289  002C8A  2216               	addwfc	___wmul@product+1,f,c
  5290  002C8C  C015  F011         	movff	___wmul@product,?___wmul
  5291  002C90  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5292  002C94  0012               	return	
  5293  002C96                     __end_of___wmul:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           intcon2	equ	0xFF1
  5302                           wreg	equ	0xFE8
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function ___awmod *****************
  5311 ;; Defined at:
  5312 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/awmod.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  dividend        2    0[COMRAM] int 
  5315 ;;  divisor         2    2[COMRAM] int 
  5316 ;; Auto vars:     Size  Location     Type
  5317 ;;  sign            1    6[COMRAM] unsigned char 
  5318 ;;  counter         1    5[COMRAM] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  2    0[COMRAM] int 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0, prodl
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5328 ;;      Params:         4       0       0       0       0       0       0       0       0
  5329 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5330 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5331 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5332 ;;Total ram usage:        7 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; This function calls:
  5335 ;;		Nothing
  5336 ;; This function is called by:
  5337 ;;		_main
  5338 ;;		_fround
  5339 ;;		_scale
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text21
  5344  0027F2                     __ptext21:
  5345                           	opt stack 0
  5346  0027F2                     ___awmod:
  5347                           	opt stack 30
  5348                           
  5349                           ;incstack = 0
  5350  0027F2  6E05               	movwf	??___awmod& (0+255),c
  5351  0027F4  0E00               	movlw	0
  5352  0027F6  6E07               	movwf	___awmod@sign,c
  5353  0027F8  5005               	movf	??___awmod& (0+255),w,c
  5354  0027FA  5002               	movf	___awmod@dividend+1,w,c
  5355  0027FC  0A80               	xorlw	128
  5356  0027FE  6EF3               	movwf	prodl,c
  5357  002800  0E80               	movlw	128
  5358  002802  5CF3               	subwf	prodl,w,c
  5359  002804  0E00               	movlw	0
  5360  002806  B4D8               	btfsc	status,2,c
  5361  002808  5C01               	subwf	___awmod@dividend,w,c
  5362  00280A  B0D8               	btfsc	status,0,c
  5363  00280C  D008               	goto	l4401
  5364  00280E  6C01               	negf	___awmod@dividend,c
  5365  002810  1E02               	comf	___awmod@dividend+1,f,c
  5366  002812  B0D8               	btfsc	status,0,c
  5367  002814  2A02               	incf	___awmod@dividend+1,f,c
  5368  002816  6E05               	movwf	??___awmod& (0+255),c
  5369  002818  0E01               	movlw	1
  5370  00281A  6E07               	movwf	___awmod@sign,c
  5371  00281C  5005               	movf	??___awmod& (0+255),w,c
  5372  00281E                     l4401:
  5373  00281E  5004               	movf	___awmod@divisor+1,w,c
  5374  002820  0A80               	xorlw	128
  5375  002822  6EF3               	movwf	prodl,c
  5376  002824  0E80               	movlw	128
  5377  002826  5CF3               	subwf	prodl,w,c
  5378  002828  0E00               	movlw	0
  5379  00282A  B4D8               	btfsc	status,2,c
  5380  00282C  5C03               	subwf	___awmod@divisor,w,c
  5381  00282E  B0D8               	btfsc	status,0,c
  5382  002830  D004               	goto	l4405
  5383  002832  6C03               	negf	___awmod@divisor,c
  5384  002834  1E04               	comf	___awmod@divisor+1,f,c
  5385  002836  B0D8               	btfsc	status,0,c
  5386  002838  2A04               	incf	___awmod@divisor+1,f,c
  5387  00283A                     l4405:
  5388  00283A  5004               	movf	___awmod@divisor+1,w,c
  5389  00283C  1003               	iorwf	___awmod@divisor,w,c
  5390  00283E  B4D8               	btfsc	status,2,c
  5391  002840  D01A               	goto	l4421
  5392  002842  6E05               	movwf	??___awmod& (0+255),c
  5393  002844  0E01               	movlw	1
  5394  002846  6E06               	movwf	___awmod@counter,c
  5395  002848  5005               	movf	??___awmod& (0+255),w,c
  5396  00284A  D004               	goto	l4411
  5397  00284C                     l4409:
  5398  00284C  90D8               	bcf	status,0,c
  5399  00284E  3603               	rlcf	___awmod@divisor,f,c
  5400  002850  3604               	rlcf	___awmod@divisor+1,f,c
  5401  002852  2A06               	incf	___awmod@counter,f,c
  5402  002854                     l4411:
  5403  002854  AE04               	btfss	___awmod@divisor+1,7,c
  5404  002856  D7FA               	goto	l4409
  5405  002858                     l4413:
  5406  002858  5003               	movf	___awmod@divisor,w,c
  5407  00285A  5C01               	subwf	___awmod@dividend,w,c
  5408  00285C  5004               	movf	___awmod@divisor+1,w,c
  5409  00285E  5802               	subwfb	___awmod@dividend+1,w,c
  5410  002860  A0D8               	btfss	status,0,c
  5411  002862  D004               	goto	l4417
  5412  002864  5003               	movf	___awmod@divisor,w,c
  5413  002866  5E01               	subwf	___awmod@dividend,f,c
  5414  002868  5004               	movf	___awmod@divisor+1,w,c
  5415  00286A  5A02               	subwfb	___awmod@dividend+1,f,c
  5416  00286C                     l4417:
  5417  00286C  90D8               	bcf	status,0,c
  5418  00286E  3204               	rrcf	___awmod@divisor+1,f,c
  5419  002870  3203               	rrcf	___awmod@divisor,f,c
  5420  002872  2E06               	decfsz	___awmod@counter,f,c
  5421  002874  D7F1               	goto	l4413
  5422  002876                     l4421:
  5423  002876  5007               	movf	___awmod@sign,w,c
  5424  002878  B4D8               	btfsc	status,2,c
  5425  00287A  D004               	goto	l4425
  5426  00287C  6C01               	negf	___awmod@dividend,c
  5427  00287E  1E02               	comf	___awmod@dividend+1,f,c
  5428  002880  B0D8               	btfsc	status,0,c
  5429  002882  2A02               	incf	___awmod@dividend+1,f,c
  5430  002884                     l4425:
  5431  002884  C001  F001         	movff	___awmod@dividend,?___awmod
  5432  002888  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5433  00288C  0012               	return	
  5434  00288E                     __end_of___awmod:
  5435                           	opt stack 0
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon2	equ	0xFF1
  5443                           wreg	equ	0xFE8
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function ___awdiv *****************
  5452 ;; Defined at:
  5453 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/awdiv.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  dividend        2    7[COMRAM] int 
  5456 ;;  divisor         2    9[COMRAM] int 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  quotient        2   14[COMRAM] int 
  5459 ;;  sign            1   13[COMRAM] unsigned char 
  5460 ;;  counter         1   12[COMRAM] unsigned char 
  5461 ;; Return value:  Size  Location     Type
  5462 ;;                  2    7[COMRAM] int 
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, status,0, prodl
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5470 ;;      Params:         4       0       0       0       0       0       0       0       0
  5471 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5472 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5473 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5474 ;;Total ram usage:        9 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; This function calls:
  5477 ;;		Nothing
  5478 ;; This function is called by:
  5479 ;;		_fround
  5480 ;;		_scale
  5481 ;;		_sprintf
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text22
  5486  0025EE                     __ptext22:
  5487                           	opt stack 0
  5488  0025EE                     ___awdiv:
  5489                           	opt stack 27
  5490                           
  5491                           ;incstack = 0
  5492  0025EE  6E0C               	movwf	??___awdiv& (0+255),c
  5493  0025F0  0E00               	movlw	0
  5494  0025F2  6E0E               	movwf	___awdiv@sign,c
  5495  0025F4  500C               	movf	??___awdiv& (0+255),w,c
  5496  0025F6  500B               	movf	___awdiv@divisor+1,w,c
  5497  0025F8  0A80               	xorlw	128
  5498  0025FA  6EF3               	movwf	prodl,c
  5499  0025FC  0E80               	movlw	128
  5500  0025FE  5CF3               	subwf	prodl,w,c
  5501  002600  0E00               	movlw	0
  5502  002602  B4D8               	btfsc	status,2,c
  5503  002604  5C0A               	subwf	___awdiv@divisor,w,c
  5504  002606  B0D8               	btfsc	status,0,c
  5505  002608  D008               	goto	l4357
  5506  00260A  6C0A               	negf	___awdiv@divisor,c
  5507  00260C  1E0B               	comf	___awdiv@divisor+1,f,c
  5508  00260E  B0D8               	btfsc	status,0,c
  5509  002610  2A0B               	incf	___awdiv@divisor+1,f,c
  5510  002612  6E0C               	movwf	??___awdiv& (0+255),c
  5511  002614  0E01               	movlw	1
  5512  002616  6E0E               	movwf	___awdiv@sign,c
  5513  002618  500C               	movf	??___awdiv& (0+255),w,c
  5514  00261A                     l4357:
  5515  00261A  5009               	movf	___awdiv@dividend+1,w,c
  5516  00261C  0A80               	xorlw	128
  5517  00261E  6EF3               	movwf	prodl,c
  5518  002620  0E80               	movlw	128
  5519  002622  5CF3               	subwf	prodl,w,c
  5520  002624  0E00               	movlw	0
  5521  002626  B4D8               	btfsc	status,2,c
  5522  002628  5C08               	subwf	___awdiv@dividend,w,c
  5523  00262A  B0D8               	btfsc	status,0,c
  5524  00262C  D006               	goto	l4363
  5525  00262E  6C08               	negf	___awdiv@dividend,c
  5526  002630  1E09               	comf	___awdiv@dividend+1,f,c
  5527  002632  B0D8               	btfsc	status,0,c
  5528  002634  2A09               	incf	___awdiv@dividend+1,f,c
  5529  002636  0E01               	movlw	1
  5530  002638  1A0E               	xorwf	___awdiv@sign,f,c
  5531  00263A                     l4363:
  5532  00263A  0E00               	movlw	0
  5533  00263C  6E10               	movwf	___awdiv@quotient+1,c
  5534  00263E  0E00               	movlw	0
  5535  002640  6E0F               	movwf	___awdiv@quotient,c
  5536  002642  500B               	movf	___awdiv@divisor+1,w,c
  5537  002644  100A               	iorwf	___awdiv@divisor,w,c
  5538  002646  B4D8               	btfsc	status,2,c
  5539  002648  D01E               	goto	l4385
  5540  00264A  6E0C               	movwf	??___awdiv& (0+255),c
  5541  00264C  0E01               	movlw	1
  5542  00264E  6E0D               	movwf	___awdiv@counter,c
  5543  002650  500C               	movf	??___awdiv& (0+255),w,c
  5544  002652  D004               	goto	l4371
  5545  002654                     l4369:
  5546  002654  90D8               	bcf	status,0,c
  5547  002656  360A               	rlcf	___awdiv@divisor,f,c
  5548  002658  360B               	rlcf	___awdiv@divisor+1,f,c
  5549  00265A  2A0D               	incf	___awdiv@counter,f,c
  5550  00265C                     l4371:
  5551  00265C  AE0B               	btfss	___awdiv@divisor+1,7,c
  5552  00265E  D7FA               	goto	l4369
  5553  002660                     l4373:
  5554  002660  90D8               	bcf	status,0,c
  5555  002662  360F               	rlcf	___awdiv@quotient,f,c
  5556  002664  3610               	rlcf	___awdiv@quotient+1,f,c
  5557  002666  500A               	movf	___awdiv@divisor,w,c
  5558  002668  5C08               	subwf	___awdiv@dividend,w,c
  5559  00266A  500B               	movf	___awdiv@divisor+1,w,c
  5560  00266C  5809               	subwfb	___awdiv@dividend+1,w,c
  5561  00266E  A0D8               	btfss	status,0,c
  5562  002670  D005               	goto	l4381
  5563  002672  500A               	movf	___awdiv@divisor,w,c
  5564  002674  5E08               	subwf	___awdiv@dividend,f,c
  5565  002676  500B               	movf	___awdiv@divisor+1,w,c
  5566  002678  5A09               	subwfb	___awdiv@dividend+1,f,c
  5567  00267A  800F               	bsf	___awdiv@quotient,0,c
  5568  00267C                     l4381:
  5569  00267C  90D8               	bcf	status,0,c
  5570  00267E  320B               	rrcf	___awdiv@divisor+1,f,c
  5571  002680  320A               	rrcf	___awdiv@divisor,f,c
  5572  002682  2E0D               	decfsz	___awdiv@counter,f,c
  5573  002684  D7ED               	goto	l4373
  5574  002686                     l4385:
  5575  002686  500E               	movf	___awdiv@sign,w,c
  5576  002688  B4D8               	btfsc	status,2,c
  5577  00268A  D004               	goto	l4389
  5578  00268C  6C0F               	negf	___awdiv@quotient,c
  5579  00268E  1E10               	comf	___awdiv@quotient+1,f,c
  5580  002690  B0D8               	btfsc	status,0,c
  5581  002692  2A10               	incf	___awdiv@quotient+1,f,c
  5582  002694                     l4389:
  5583  002694  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  5584  002698  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  5585  00269C  0012               	return	
  5586  00269E                     __end_of___awdiv:
  5587                           	opt stack 0
  5588                           tblptru	equ	0xFF8
  5589                           tblptrh	equ	0xFF7
  5590                           tblptrl	equ	0xFF6
  5591                           tablat	equ	0xFF5
  5592                           prodh	equ	0xFF4
  5593                           prodl	equ	0xFF3
  5594                           intcon2	equ	0xFF1
  5595                           wreg	equ	0xFE8
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function __tdiv_to_l_ *****************
  5604 ;; Defined at:
  5605 ;;		line 60 in file "/opt/microchip/xc8/v1.31/sources/common/ftdivl.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  f1              3    0[COMRAM] float 
  5608 ;;  f2              3    3[COMRAM] float 
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  quot            4    9[COMRAM] unsigned long 
  5611 ;;  exp1            1   14[COMRAM] unsigned char 
  5612 ;;  cntr            1   13[COMRAM] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;                  4    0[COMRAM] unsigned long 
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0
  5617 ;; Tracked objects:
  5618 ;;		On entry : 0/0
  5619 ;;		On exit  : 0/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5622 ;;      Params:         6       0       0       0       0       0       0       0       0
  5623 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5624 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5625 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5626 ;;Total ram usage:       15 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_sprintf
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text23
  5636  00200C                     __ptext23:
  5637                           	opt stack 0
  5638  00200C                     __tdiv_to_l_:
  5639                           	opt stack 28
  5640                           
  5641                           ;incstack = 0
  5642  00200C  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5643  002010  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5644  002012  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5645  002014  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5646  002016  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5647  002018  E301               	bnc	u2081
  5648  00201A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5649  00201C                     u2081:
  5650  00201C  5007               	movf	??__tdiv_to_l_,w,c
  5651  00201E  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5652  002020  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  5653  002022  D009               	goto	l4517
  5654  002024  0E00               	movlw	0
  5655  002026  6E01               	movwf	?__tdiv_to_l_,c
  5656  002028  0E00               	movlw	0
  5657  00202A  6E02               	movwf	?__tdiv_to_l_+1,c
  5658  00202C  0E00               	movlw	0
  5659  00202E  6E03               	movwf	?__tdiv_to_l_+2,c
  5660  002030  0E00               	movlw	0
  5661  002032  6E04               	movwf	?__tdiv_to_l_+3,c
  5662  002034  0012               	return	
  5663  002036                     l4517:
  5664  002036  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5665  00203A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5666  00203C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5667  00203E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5668  002040  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5669  002042  E301               	bnc	u2101
  5670  002044  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5671  002046                     u2101:
  5672  002046  5007               	movf	??__tdiv_to_l_,w,c
  5673  002048  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5674  00204A  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  5675  00204C  D009               	goto	l4523
  5676  00204E  0E00               	movlw	0
  5677  002050  6E01               	movwf	?__tdiv_to_l_,c
  5678  002052  0E00               	movlw	0
  5679  002054  6E02               	movwf	?__tdiv_to_l_+1,c
  5680  002056  0E00               	movlw	0
  5681  002058  6E03               	movwf	?__tdiv_to_l_+2,c
  5682  00205A  0E00               	movlw	0
  5683  00205C  6E04               	movwf	?__tdiv_to_l_+3,c
  5684  00205E  0012               	return	
  5685  002060                     l4523:
  5686  002060  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5687  002062  0EFF               	movlw	255
  5688  002064  1601               	andwf	__tdiv_to_l_@f1,f,c
  5689  002066  0EFF               	movlw	255
  5690  002068  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5691  00206A  0E00               	movlw	0
  5692  00206C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5693  00206E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5694  002070  0EFF               	movlw	255
  5695  002072  1604               	andwf	__tdiv_to_l_@f2,f,c
  5696  002074  0EFF               	movlw	255
  5697  002076  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5698  002078  0E00               	movlw	0
  5699  00207A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5700  00207C  0E00               	movlw	0
  5701  00207E  6E0A               	movwf	__tdiv_to_l_@quot,c
  5702  002080  0E00               	movlw	0
  5703  002082  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5704  002084  0E00               	movlw	0
  5705  002086  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5706  002088  0E00               	movlw	0
  5707  00208A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5708  00208C  0E7F               	movlw	127
  5709  00208E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5710  002090  500E               	movf	__tdiv_to_l_@cntr,w,c
  5711  002092  0F98               	addlw	152
  5712  002094  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5713  002096  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  5714  002098  0E18               	movlw	24
  5715  00209A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5716  00209C  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  5717  00209E                     l4537:
  5718  00209E  90D8               	bcf	status,0,c
  5719  0020A0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5720  0020A2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5721  0020A4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5722  0020A6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5723  0020A8  5004               	movf	__tdiv_to_l_@f2,w,c
  5724  0020AA  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5725  0020AC  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5726  0020AE  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5727  0020B0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5728  0020B2  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5729  0020B4  A0D8               	btfss	status,0,c
  5730  0020B6  D007               	goto	l693
  5731  0020B8  5004               	movf	__tdiv_to_l_@f2,w,c
  5732  0020BA  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5733  0020BC  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5734  0020BE  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5735  0020C0  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5736  0020C2  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5737  0020C4  800A               	bsf	__tdiv_to_l_@quot,0,c
  5738  0020C6                     l693:
  5739  0020C6  90D8               	bcf	status,0,c
  5740  0020C8  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5741  0020CA  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5742  0020CC  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5743  0020CE  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5744  0020D0  D7E6               	goto	l4537
  5745  0020D2  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5746  0020D4  D019               	goto	l4557
  5747  0020D6  500F               	movf	__tdiv_to_l_@exp1,w,c
  5748  0020D8  0A80               	xorlw	128
  5749  0020DA  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  5750  0020DC  0EE9               	movlw	233
  5751  0020DE  0A80               	xorlw	128
  5752  0020E0  5C07               	subwf	??__tdiv_to_l_,w,c
  5753  0020E2  B0D8               	btfsc	status,0,c
  5754  0020E4  D009               	goto	l4553
  5755  0020E6  0E00               	movlw	0
  5756  0020E8  6E01               	movwf	?__tdiv_to_l_,c
  5757  0020EA  0E00               	movlw	0
  5758  0020EC  6E02               	movwf	?__tdiv_to_l_+1,c
  5759  0020EE  0E00               	movlw	0
  5760  0020F0  6E03               	movwf	?__tdiv_to_l_+2,c
  5761  0020F2  0E00               	movlw	0
  5762  0020F4  6E04               	movwf	?__tdiv_to_l_+3,c
  5763  0020F6  0012               	return	
  5764  0020F8                     l4553:
  5765  0020F8  90D8               	bcf	status,0,c
  5766  0020FA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5767  0020FC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5768  0020FE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5769  002100  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5770  002102  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5771  002104  D7F9               	goto	l4553
  5772  002106  D014               	goto	l699
  5773  002108                     l4557:
  5774  002108  0E17               	movlw	23
  5775  00210A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5776  00210C  D00F               	goto	l4565
  5777  00210E  0E00               	movlw	0
  5778  002110  6E01               	movwf	?__tdiv_to_l_,c
  5779  002112  0E00               	movlw	0
  5780  002114  6E02               	movwf	?__tdiv_to_l_+1,c
  5781  002116  0E00               	movlw	0
  5782  002118  6E03               	movwf	?__tdiv_to_l_+2,c
  5783  00211A  0E00               	movlw	0
  5784  00211C  6E04               	movwf	?__tdiv_to_l_+3,c
  5785  00211E  0012               	return	
  5786  002120                     l4563:
  5787  002120  90D8               	bcf	status,0,c
  5788  002122  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5789  002124  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5790  002126  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5791  002128  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5792  00212A  060F               	decf	__tdiv_to_l_@exp1,f,c
  5793  00212C                     l4565:
  5794  00212C  660F               	tstfsz	__tdiv_to_l_@exp1,c
  5795  00212E  D7F8               	goto	l4563
  5796  002130                     l699:
  5797  002130  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5798  002134  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5799  002138  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5800  00213C  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5801  002140  0012               	return	
  5802  002142                     __end_of__tdiv_to_l_:
  5803                           	opt stack 0
  5804                           tblptru	equ	0xFF8
  5805                           tblptrh	equ	0xFF7
  5806                           tblptrl	equ	0xFF6
  5807                           tablat	equ	0xFF5
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon2	equ	0xFF1
  5811                           wreg	equ	0xFE8
  5812                           indf2	equ	0xFDF
  5813                           postinc2	equ	0xFDE
  5814                           postdec2	equ	0xFDD
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function __div_to_l_ *****************
  5820 ;; Defined at:
  5821 ;;		line 60 in file "/opt/microchip/xc8/v1.31/sources/common/fldivl.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  f1              3    0[COMRAM] unsigned long 
  5824 ;;  f2              3    3[COMRAM] unsigned long 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  quot            4   10[COMRAM] unsigned long 
  5827 ;;  exp1            1   15[COMRAM] unsigned char 
  5828 ;;  cntr            1   14[COMRAM] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  4    0[COMRAM] unsigned long 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5838 ;;      Params:         6       0       0       0       0       0       0       0       0
  5839 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5840 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5841 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5842 ;;Total ram usage:       16 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_sprintf
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text24
  5852  001C10                     __ptext24:
  5853                           	opt stack 0
  5854  001C10                     __div_to_l_:
  5855                           	opt stack 28
  5856                           
  5857                           ;incstack = 0
  5858  001C10  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  5859  001C14  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  5860  001C18  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  5861  001C1C  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  5862  001C20  0E18               	movlw	24
  5863  001C22  D005               	goto	u2170
  5864  001C24                     u2175:
  5865  001C24  90D8               	bcf	status,0,c
  5866  001C26  320A               	rrcf	??__div_to_l_+3,f,c
  5867  001C28  3209               	rrcf	??__div_to_l_+2,f,c
  5868  001C2A  3208               	rrcf	??__div_to_l_+1,f,c
  5869  001C2C  3207               	rrcf	??__div_to_l_,f,c
  5870  001C2E                     u2170:
  5871  001C2E  2EE8               	decfsz	wreg,f,c
  5872  001C30  D7F9               	goto	u2175
  5873  001C32  5007               	movf	??__div_to_l_,w,c
  5874  001C34  6E10               	movwf	__div_to_l_@exp1,c
  5875  001C36  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  5876  001C38  D009               	goto	l4573
  5877  001C3A  0E00               	movlw	0
  5878  001C3C  6E01               	movwf	?__div_to_l_,c
  5879  001C3E  0E00               	movlw	0
  5880  001C40  6E02               	movwf	?__div_to_l_+1,c
  5881  001C42  0E00               	movlw	0
  5882  001C44  6E03               	movwf	?__div_to_l_+2,c
  5883  001C46  0E00               	movlw	0
  5884  001C48  6E04               	movwf	?__div_to_l_+3,c
  5885  001C4A  0012               	return	
  5886  001C4C                     l4573:
  5887  001C4C  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  5888  001C50  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  5889  001C54  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  5890  001C58  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  5891  001C5C  0E18               	movlw	24
  5892  001C5E  D005               	goto	u2190
  5893  001C60                     u2195:
  5894  001C60  90D8               	bcf	status,0,c
  5895  001C62  320A               	rrcf	??__div_to_l_+3,f,c
  5896  001C64  3209               	rrcf	??__div_to_l_+2,f,c
  5897  001C66  3208               	rrcf	??__div_to_l_+1,f,c
  5898  001C68  3207               	rrcf	??__div_to_l_,f,c
  5899  001C6A                     u2190:
  5900  001C6A  2EE8               	decfsz	wreg,f,c
  5901  001C6C  D7F9               	goto	u2195
  5902  001C6E  5007               	movf	??__div_to_l_,w,c
  5903  001C70  6E0F               	movwf	__div_to_l_@cntr,c
  5904  001C72  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  5905  001C74  D009               	goto	l4579
  5906  001C76  0E00               	movlw	0
  5907  001C78  6E01               	movwf	?__div_to_l_,c
  5908  001C7A  0E00               	movlw	0
  5909  001C7C  6E02               	movwf	?__div_to_l_+1,c
  5910  001C7E  0E00               	movlw	0
  5911  001C80  6E03               	movwf	?__div_to_l_+2,c
  5912  001C82  0E00               	movlw	0
  5913  001C84  6E04               	movwf	?__div_to_l_+3,c
  5914  001C86  0012               	return	
  5915  001C88                     l4579:
  5916  001C88  8E03               	bsf	__div_to_l_@f1+2,7,c
  5917  001C8A  0EFF               	movlw	255
  5918  001C8C  1601               	andwf	__div_to_l_@f1,f,c
  5919  001C8E  0EFF               	movlw	255
  5920  001C90  1602               	andwf	__div_to_l_@f1+1,f,c
  5921  001C92  0EFF               	movlw	255
  5922  001C94  1603               	andwf	__div_to_l_@f1+2,f,c
  5923  001C96  0E00               	movlw	0
  5924  001C98  1604               	andwf	__div_to_l_@f1+3,f,c
  5925  001C9A  8E06               	bsf	__div_to_l_@f2+2,7,c
  5926  001C9C  0EFF               	movlw	255
  5927  001C9E  1604               	andwf	__div_to_l_@f2,f,c
  5928  001CA0  0EFF               	movlw	255
  5929  001CA2  1605               	andwf	__div_to_l_@f2+1,f,c
  5930  001CA4  0EFF               	movlw	255
  5931  001CA6  1606               	andwf	__div_to_l_@f2+2,f,c
  5932  001CA8  0E00               	movlw	0
  5933  001CAA  1607               	andwf	__div_to_l_@f2+3,f,c
  5934  001CAC  0E00               	movlw	0
  5935  001CAE  6E0B               	movwf	__div_to_l_@quot,c
  5936  001CB0  0E00               	movlw	0
  5937  001CB2  6E0C               	movwf	__div_to_l_@quot+1,c
  5938  001CB4  0E00               	movlw	0
  5939  001CB6  6E0D               	movwf	__div_to_l_@quot+2,c
  5940  001CB8  0E00               	movlw	0
  5941  001CBA  6E0E               	movwf	__div_to_l_@quot+3,c
  5942  001CBC  0E7F               	movlw	127
  5943  001CBE  5E10               	subwf	__div_to_l_@exp1,f,c
  5944  001CC0  500F               	movf	__div_to_l_@cntr,w,c
  5945  001CC2  0FA0               	addlw	160
  5946  001CC4  5E10               	subwf	__div_to_l_@exp1,f,c
  5947  001CC6  6E07               	movwf	??__div_to_l_& (0+255),c
  5948  001CC8  0E20               	movlw	32
  5949  001CCA  6E0F               	movwf	__div_to_l_@cntr,c
  5950  001CCC  5007               	movf	??__div_to_l_& (0+255),w,c
  5951  001CCE                     l574:
  5952  001CCE  90D8               	bcf	status,0,c
  5953  001CD0  360B               	rlcf	__div_to_l_@quot,f,c
  5954  001CD2  360C               	rlcf	__div_to_l_@quot+1,f,c
  5955  001CD4  360D               	rlcf	__div_to_l_@quot+2,f,c
  5956  001CD6  360E               	rlcf	__div_to_l_@quot+3,f,c
  5957  001CD8  5004               	movf	__div_to_l_@f2,w,c
  5958  001CDA  5C01               	subwf	__div_to_l_@f1,w,c
  5959  001CDC  5005               	movf	__div_to_l_@f2+1,w,c
  5960  001CDE  5802               	subwfb	__div_to_l_@f1+1,w,c
  5961  001CE0  5006               	movf	__div_to_l_@f2+2,w,c
  5962  001CE2  5803               	subwfb	__div_to_l_@f1+2,w,c
  5963  001CE4  5007               	movf	__div_to_l_@f2+3,w,c
  5964  001CE6  5804               	subwfb	__div_to_l_@f1+3,w,c
  5965  001CE8  A0D8               	btfss	status,0,c
  5966  001CEA  D009               	goto	l4599
  5967  001CEC  5004               	movf	__div_to_l_@f2,w,c
  5968  001CEE  5E01               	subwf	__div_to_l_@f1,f,c
  5969  001CF0  5005               	movf	__div_to_l_@f2+1,w,c
  5970  001CF2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5971  001CF4  5006               	movf	__div_to_l_@f2+2,w,c
  5972  001CF6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5973  001CF8  5007               	movf	__div_to_l_@f2+3,w,c
  5974  001CFA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5975  001CFC  800B               	bsf	__div_to_l_@quot,0,c
  5976  001CFE                     l4599:
  5977  001CFE  90D8               	bcf	status,0,c
  5978  001D00  3601               	rlcf	__div_to_l_@f1,f,c
  5979  001D02  3602               	rlcf	__div_to_l_@f1+1,f,c
  5980  001D04  3603               	rlcf	__div_to_l_@f1+2,f,c
  5981  001D06  3604               	rlcf	__div_to_l_@f1+3,f,c
  5982  001D08  2E0F               	decfsz	__div_to_l_@cntr,f,c
  5983  001D0A  D7E1               	goto	l574
  5984  001D0C  AE10               	btfss	__div_to_l_@exp1,7,c
  5985  001D0E  D019               	goto	l4613
  5986  001D10  5010               	movf	__div_to_l_@exp1,w,c
  5987  001D12  0A80               	xorlw	128
  5988  001D14  6E07               	movwf	??__div_to_l_& (0+255),c
  5989  001D16  0EE1               	movlw	225
  5990  001D18  0A80               	xorlw	128
  5991  001D1A  5C07               	subwf	??__div_to_l_,w,c
  5992  001D1C  B0D8               	btfsc	status,0,c
  5993  001D1E  D009               	goto	l4609
  5994  001D20  0E00               	movlw	0
  5995  001D22  6E01               	movwf	?__div_to_l_,c
  5996  001D24  0E00               	movlw	0
  5997  001D26  6E02               	movwf	?__div_to_l_+1,c
  5998  001D28  0E00               	movlw	0
  5999  001D2A  6E03               	movwf	?__div_to_l_+2,c
  6000  001D2C  0E00               	movlw	0
  6001  001D2E  6E04               	movwf	?__div_to_l_+3,c
  6002  001D30  0012               	return	
  6003  001D32                     l4609:
  6004  001D32  90D8               	bcf	status,0,c
  6005  001D34  320E               	rrcf	__div_to_l_@quot+3,f,c
  6006  001D36  320D               	rrcf	__div_to_l_@quot+2,f,c
  6007  001D38  320C               	rrcf	__div_to_l_@quot+1,f,c
  6008  001D3A  320B               	rrcf	__div_to_l_@quot,f,c
  6009  001D3C  3E10               	incfsz	__div_to_l_@exp1,f,c
  6010  001D3E  D7F9               	goto	l4609
  6011  001D40  D014               	goto	l581
  6012  001D42                     l4613:
  6013  001D42  0E1F               	movlw	31
  6014  001D44  6410               	cpfsgt	__div_to_l_@exp1,c
  6015  001D46  D00F               	goto	l4621
  6016  001D48  0E00               	movlw	0
  6017  001D4A  6E01               	movwf	?__div_to_l_,c
  6018  001D4C  0E00               	movlw	0
  6019  001D4E  6E02               	movwf	?__div_to_l_+1,c
  6020  001D50  0E00               	movlw	0
  6021  001D52  6E03               	movwf	?__div_to_l_+2,c
  6022  001D54  0E00               	movlw	0
  6023  001D56  6E04               	movwf	?__div_to_l_+3,c
  6024  001D58  0012               	return	
  6025  001D5A                     l4619:
  6026  001D5A  90D8               	bcf	status,0,c
  6027  001D5C  360B               	rlcf	__div_to_l_@quot,f,c
  6028  001D5E  360C               	rlcf	__div_to_l_@quot+1,f,c
  6029  001D60  360D               	rlcf	__div_to_l_@quot+2,f,c
  6030  001D62  360E               	rlcf	__div_to_l_@quot+3,f,c
  6031  001D64  0610               	decf	__div_to_l_@exp1,f,c
  6032  001D66                     l4621:
  6033  001D66  6610               	tstfsz	__div_to_l_@exp1,c
  6034  001D68  D7F8               	goto	l4619
  6035  001D6A                     l581:
  6036  001D6A  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6037  001D6E  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6038  001D72  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6039  001D76  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6040  001D7A  0012               	return	
  6041  001D7C                     __end_of__div_to_l_:
  6042                           	opt stack 0
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon2	equ	0xFF1
  6050                           wreg	equ	0xFE8
  6051                           indf2	equ	0xFDF
  6052                           postinc2	equ	0xFDE
  6053                           postdec2	equ	0xFDD
  6054                           fsr2h	equ	0xFDA
  6055                           fsr2l	equ	0xFD9
  6056                           status	equ	0xFD8
  6057                           
  6058 ;; *************** function ___lltoft *****************
  6059 ;; Defined at:
  6060 ;;		line 35 in file "/opt/microchip/xc8/v1.31/sources/common/lltoft.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  c               4    8[COMRAM] unsigned long 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  exp             1   16[COMRAM] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  3    8[COMRAM] float 
  6067 ;; Registers used:
  6068 ;;		wreg, status,2, status,0, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6074 ;;      Params:         4       0       0       0       0       0       0       0       0
  6075 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6076 ;;      Temps:          4       0       0       0       0       0       0       0       0
  6077 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6078 ;;Total ram usage:        9 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:    1
  6081 ;; This function calls:
  6082 ;;		___ftpack
  6083 ;; This function is called by:
  6084 ;;		_sprintf
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text25
  6089  002AA2                     __ptext25:
  6090                           	opt stack 0
  6091  002AA2                     ___lltoft:
  6092                           	opt stack 27
  6093                           
  6094                           ;incstack = 0
  6095  002AA2  6E0D               	movwf	??___lltoft& (0+255),c
  6096  002AA4  0E8E               	movlw	142
  6097  002AA6  6E11               	movwf	___lltoft@exp,c
  6098  002AA8  500D               	movf	??___lltoft& (0+255),w,c
  6099  002AAA  D006               	goto	l4757
  6100  002AAC                     l4755:
  6101  002AAC  90D8               	bcf	status,0,c
  6102  002AAE  320C               	rrcf	___lltoft@c+3,f,c
  6103  002AB0  320B               	rrcf	___lltoft@c+2,f,c
  6104  002AB2  320A               	rrcf	___lltoft@c+1,f,c
  6105  002AB4  3209               	rrcf	___lltoft@c,f,c
  6106  002AB6  2A11               	incf	___lltoft@exp,f,c
  6107  002AB8                     l4757:
  6108  002AB8  0E00               	movlw	0
  6109  002ABA  1409               	andwf	___lltoft@c,w,c
  6110  002ABC  6E0D               	movwf	??___lltoft& (0+255),c
  6111  002ABE  0E00               	movlw	0
  6112  002AC0  140A               	andwf	___lltoft@c+1,w,c
  6113  002AC2  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6114  002AC4  0E00               	movlw	0
  6115  002AC6  140B               	andwf	___lltoft@c+2,w,c
  6116  002AC8  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6117  002ACA  0EFF               	movlw	255
  6118  002ACC  140C               	andwf	___lltoft@c+3,w,c
  6119  002ACE  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6120  002AD0  5010               	movf	??___lltoft+3,w,c
  6121  002AD2  100D               	iorwf	??___lltoft,w,c
  6122  002AD4  100E               	iorwf	??___lltoft+1,w,c
  6123  002AD6  100F               	iorwf	??___lltoft+2,w,c
  6124  002AD8  A4D8               	btfss	status,2,c
  6125  002ADA  D7E8               	goto	l4755
  6126  002ADC  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6127  002AE0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6128  002AE4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6129  002AE8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6130  002AEC  6E0D               	movwf	??___lltoft& (0+255),c
  6131  002AEE  0E00               	movlw	0
  6132  002AF0  6E05               	movwf	___ftpack@sign,c
  6133  002AF2  500D               	movf	??___lltoft& (0+255),w,c
  6134  002AF4  ECA5  F013         	call	___ftpack	;wreg free
  6135  002AF8  C001  F009         	movff	?___ftpack,?___lltoft
  6136  002AFC  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6137  002B00  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6138  002B04  0012               	return	
  6139  002B06                     __end_of___lltoft:
  6140                           	opt stack 0
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon2	equ	0xFF1
  6148                           wreg	equ	0xFE8
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function ___llmod *****************
  6157 ;; Defined at:
  6158 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/llmod.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  dividend        4    0[COMRAM] unsigned long 
  6161 ;;  divisor         4    4[COMRAM] unsigned long 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  counter         1    9[COMRAM] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  4    0[COMRAM] unsigned long 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6173 ;;      Params:         8       0       0       0       0       0       0       0       0
  6174 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6175 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6176 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6177 ;;Total ram usage:       10 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_sprintf
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text26
  6187  002A38                     __ptext26:
  6188                           	opt stack 0
  6189  002A38                     ___llmod:
  6190                           	opt stack 28
  6191                           
  6192                           ;incstack = 0
  6193  002A38  5008               	movf	___llmod@divisor+3,w,c
  6194  002A3A  1005               	iorwf	___llmod@divisor,w,c
  6195  002A3C  1006               	iorwf	___llmod@divisor+1,w,c
  6196  002A3E  1007               	iorwf	___llmod@divisor+2,w,c
  6197  002A40  B4D8               	btfsc	status,2,c
  6198  002A42  D026               	goto	l788
  6199  002A44  6E09               	movwf	??___llmod& (0+255),c
  6200  002A46  0E01               	movlw	1
  6201  002A48  6E0A               	movwf	___llmod@counter,c
  6202  002A4A  5009               	movf	??___llmod& (0+255),w,c
  6203  002A4C  D006               	goto	l4743
  6204  002A4E                     l4741:
  6205  002A4E  90D8               	bcf	status,0,c
  6206  002A50  3605               	rlcf	___llmod@divisor,f,c
  6207  002A52  3606               	rlcf	___llmod@divisor+1,f,c
  6208  002A54  3607               	rlcf	___llmod@divisor+2,f,c
  6209  002A56  3608               	rlcf	___llmod@divisor+3,f,c
  6210  002A58  2A0A               	incf	___llmod@counter,f,c
  6211  002A5A                     l4743:
  6212  002A5A  AE08               	btfss	___llmod@divisor+3,7,c
  6213  002A5C  D7F8               	goto	l4741
  6214  002A5E                     l4745:
  6215  002A5E  5005               	movf	___llmod@divisor,w,c
  6216  002A60  5C01               	subwf	___llmod@dividend,w,c
  6217  002A62  5006               	movf	___llmod@divisor+1,w,c
  6218  002A64  5802               	subwfb	___llmod@dividend+1,w,c
  6219  002A66  5007               	movf	___llmod@divisor+2,w,c
  6220  002A68  5803               	subwfb	___llmod@dividend+2,w,c
  6221  002A6A  5008               	movf	___llmod@divisor+3,w,c
  6222  002A6C  5804               	subwfb	___llmod@dividend+3,w,c
  6223  002A6E  A0D8               	btfss	status,0,c
  6224  002A70  D008               	goto	l4749
  6225  002A72  5005               	movf	___llmod@divisor,w,c
  6226  002A74  5E01               	subwf	___llmod@dividend,f,c
  6227  002A76  5006               	movf	___llmod@divisor+1,w,c
  6228  002A78  5A02               	subwfb	___llmod@dividend+1,f,c
  6229  002A7A  5007               	movf	___llmod@divisor+2,w,c
  6230  002A7C  5A03               	subwfb	___llmod@dividend+2,f,c
  6231  002A7E  5008               	movf	___llmod@divisor+3,w,c
  6232  002A80  5A04               	subwfb	___llmod@dividend+3,f,c
  6233  002A82                     l4749:
  6234  002A82  90D8               	bcf	status,0,c
  6235  002A84  3208               	rrcf	___llmod@divisor+3,f,c
  6236  002A86  3207               	rrcf	___llmod@divisor+2,f,c
  6237  002A88  3206               	rrcf	___llmod@divisor+1,f,c
  6238  002A8A  3205               	rrcf	___llmod@divisor,f,c
  6239  002A8C  2E0A               	decfsz	___llmod@counter,f,c
  6240  002A8E  D7E7               	goto	l4745
  6241  002A90                     l788:
  6242  002A90  C001  F001         	movff	___llmod@dividend,?___llmod
  6243  002A94  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  6244  002A98  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  6245  002A9C  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  6246  002AA0  0012               	return	
  6247  002AA2                     __end_of___llmod:
  6248                           	opt stack 0
  6249                           tblptru	equ	0xFF8
  6250                           tblptrh	equ	0xFF7
  6251                           tblptrl	equ	0xFF6
  6252                           tablat	equ	0xFF5
  6253                           prodh	equ	0xFF4
  6254                           prodl	equ	0xFF3
  6255                           intcon2	equ	0xFF1
  6256                           wreg	equ	0xFE8
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function ___lldiv *****************
  6265 ;; Defined at:
  6266 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/lldiv.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  dividend        4    0[COMRAM] unsigned long 
  6269 ;;  divisor         4    4[COMRAM] unsigned long 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  quotient        4    9[COMRAM] unsigned long 
  6272 ;;  counter         1   13[COMRAM] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  4    0[COMRAM] unsigned long 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6282 ;;      Params:         8       0       0       0       0       0       0       0       0
  6283 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6284 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6285 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6286 ;;Total ram usage:       14 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_sprintf
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text27
  6296  0029B2                     __ptext27:
  6297                           	opt stack 0
  6298  0029B2                     ___lldiv:
  6299                           	opt stack 28
  6300                           
  6301                           ;incstack = 0
  6302  0029B2  0E00               	movlw	0
  6303  0029B4  6E0A               	movwf	___lldiv@quotient,c
  6304  0029B6  0E00               	movlw	0
  6305  0029B8  6E0B               	movwf	___lldiv@quotient+1,c
  6306  0029BA  0E00               	movlw	0
  6307  0029BC  6E0C               	movwf	___lldiv@quotient+2,c
  6308  0029BE  0E00               	movlw	0
  6309  0029C0  6E0D               	movwf	___lldiv@quotient+3,c
  6310  0029C2  5008               	movf	___lldiv@divisor+3,w,c
  6311  0029C4  1005               	iorwf	___lldiv@divisor,w,c
  6312  0029C6  1006               	iorwf	___lldiv@divisor+1,w,c
  6313  0029C8  1007               	iorwf	___lldiv@divisor+2,w,c
  6314  0029CA  B4D8               	btfsc	status,2,c
  6315  0029CC  D02C               	goto	l778
  6316  0029CE  6E09               	movwf	??___lldiv& (0+255),c
  6317  0029D0  0E01               	movlw	1
  6318  0029D2  6E0E               	movwf	___lldiv@counter,c
  6319  0029D4  5009               	movf	??___lldiv& (0+255),w,c
  6320  0029D6  D006               	goto	l4723
  6321  0029D8                     l4721:
  6322  0029D8  90D8               	bcf	status,0,c
  6323  0029DA  3605               	rlcf	___lldiv@divisor,f,c
  6324  0029DC  3606               	rlcf	___lldiv@divisor+1,f,c
  6325  0029DE  3607               	rlcf	___lldiv@divisor+2,f,c
  6326  0029E0  3608               	rlcf	___lldiv@divisor+3,f,c
  6327  0029E2  2A0E               	incf	___lldiv@counter,f,c
  6328  0029E4                     l4723:
  6329  0029E4  AE08               	btfss	___lldiv@divisor+3,7,c
  6330  0029E6  D7F8               	goto	l4721
  6331  0029E8                     l4725:
  6332  0029E8  90D8               	bcf	status,0,c
  6333  0029EA  360A               	rlcf	___lldiv@quotient,f,c
  6334  0029EC  360B               	rlcf	___lldiv@quotient+1,f,c
  6335  0029EE  360C               	rlcf	___lldiv@quotient+2,f,c
  6336  0029F0  360D               	rlcf	___lldiv@quotient+3,f,c
  6337  0029F2  5005               	movf	___lldiv@divisor,w,c
  6338  0029F4  5C01               	subwf	___lldiv@dividend,w,c
  6339  0029F6  5006               	movf	___lldiv@divisor+1,w,c
  6340  0029F8  5802               	subwfb	___lldiv@dividend+1,w,c
  6341  0029FA  5007               	movf	___lldiv@divisor+2,w,c
  6342  0029FC  5803               	subwfb	___lldiv@dividend+2,w,c
  6343  0029FE  5008               	movf	___lldiv@divisor+3,w,c
  6344  002A00  5804               	subwfb	___lldiv@dividend+3,w,c
  6345  002A02  A0D8               	btfss	status,0,c
  6346  002A04  D009               	goto	l4733
  6347  002A06  5005               	movf	___lldiv@divisor,w,c
  6348  002A08  5E01               	subwf	___lldiv@dividend,f,c
  6349  002A0A  5006               	movf	___lldiv@divisor+1,w,c
  6350  002A0C  5A02               	subwfb	___lldiv@dividend+1,f,c
  6351  002A0E  5007               	movf	___lldiv@divisor+2,w,c
  6352  002A10  5A03               	subwfb	___lldiv@dividend+2,f,c
  6353  002A12  5008               	movf	___lldiv@divisor+3,w,c
  6354  002A14  5A04               	subwfb	___lldiv@dividend+3,f,c
  6355  002A16  800A               	bsf	___lldiv@quotient,0,c
  6356  002A18                     l4733:
  6357  002A18  90D8               	bcf	status,0,c
  6358  002A1A  3208               	rrcf	___lldiv@divisor+3,f,c
  6359  002A1C  3207               	rrcf	___lldiv@divisor+2,f,c
  6360  002A1E  3206               	rrcf	___lldiv@divisor+1,f,c
  6361  002A20  3205               	rrcf	___lldiv@divisor,f,c
  6362  002A22  2E0E               	decfsz	___lldiv@counter,f,c
  6363  002A24  D7E1               	goto	l4725
  6364  002A26                     l778:
  6365  002A26  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  6366  002A2A  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6367  002A2E  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6368  002A32  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6369  002A36  0012               	return	
  6370  002A38                     __end_of___lldiv:
  6371                           	opt stack 0
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           intcon2	equ	0xFF1
  6379                           wreg	equ	0xFE8
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8
  6386                           
  6387 ;; *************** function ___fttol *****************
  6388 ;; Defined at:
  6389 ;;		line 44 in file "/opt/microchip/xc8/v1.31/sources/common/fttol.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;  f1              3   79[COMRAM] float 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  lval            4   89[COMRAM] unsigned long 
  6394 ;;  exp1            1   93[COMRAM] unsigned char 
  6395 ;;  sign1           1   88[COMRAM] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  4   79[COMRAM] long 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6405 ;;      Params:         4       0       0       0       0       0       0       0       0
  6406 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6407 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6408 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6409 ;;Total ram usage:       15 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; This function calls:
  6412 ;;		Nothing
  6413 ;; This function is called by:
  6414 ;;		_set_fan_speed
  6415 ;;		_sprintf
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text28
  6420  002340                     __ptext28:
  6421                           	opt stack 0
  6422  002340                     ___fttol:
  6423                           	opt stack 29
  6424                           
  6425                           ;incstack = 0
  6426  002340  C052  F054         	movff	___fttol@f1+2,??___fttol
  6427  002344  6A55               	clrf	(??___fttol+1)& (0+255),c
  6428  002346  6A56               	clrf	(??___fttol+2)& (0+255),c
  6429  002348  3451               	rlcf	___fttol@f1+1,w,c
  6430  00234A  3654               	rlcf	??___fttol& (0+255),f,c
  6431  00234C  E301               	bnc	u2311
  6432  00234E  8055               	bsf	(??___fttol+1)& (0+255),0,c
  6433  002350                     u2311:
  6434  002350  5054               	movf	??___fttol,w,c
  6435  002352  6E5E               	movwf	___fttol@exp1,c
  6436  002354  665E               	tstfsz	___fttol@exp1& (0+255),c
  6437  002356  D009               	goto	l4675
  6438  002358  0E00               	movlw	0
  6439  00235A  6E50               	movwf	?___fttol,c
  6440  00235C  0E00               	movlw	0
  6441  00235E  6E51               	movwf	?___fttol+1,c
  6442  002360  0E00               	movlw	0
  6443  002362  6E52               	movwf	?___fttol+2,c
  6444  002364  0E00               	movlw	0
  6445  002366  6E53               	movwf	?___fttol+3,c
  6446  002368  0012               	return	
  6447  00236A                     l4675:
  6448  00236A  0E17               	movlw	23
  6449  00236C  6E54               	movwf	??___fttol& (0+255),c
  6450  00236E  C050  F055         	movff	___fttol@f1,??___fttol+1
  6451  002372  C051  F056         	movff	___fttol@f1+1,??___fttol+2
  6452  002376  C052  F057         	movff	___fttol@f1+2,??___fttol+3
  6453  00237A  2854               	incf	??___fttol,w,c
  6454  00237C  6E58               	movwf	(??___fttol+4)& (0+255),c
  6455  00237E  D004               	goto	u2330
  6456  002380                     u2335:
  6457  002380  90D8               	bcf	status,0,c
  6458  002382  3257               	rrcf	??___fttol+3,f,c
  6459  002384  3256               	rrcf	??___fttol+2,f,c
  6460  002386  3255               	rrcf	??___fttol+1,f,c
  6461  002388                     u2330:
  6462  002388  2E58               	decfsz	(??___fttol+4)& (0+255),f,c
  6463  00238A  D7FA               	goto	u2335
  6464  00238C  5055               	movf	??___fttol+1,w,c
  6465  00238E  6E59               	movwf	___fttol@sign1,c
  6466  002390  8E51               	bsf	___fttol@f1+1,7,c
  6467  002392  0EFF               	movlw	255
  6468  002394  1650               	andwf	___fttol@f1,f,c
  6469  002396  0EFF               	movlw	255
  6470  002398  1651               	andwf	___fttol@f1+1,f,c
  6471  00239A  0E00               	movlw	0
  6472  00239C  1652               	andwf	___fttol@f1+2,f,c
  6473  00239E  5050               	movf	___fttol@f1,w,c
  6474  0023A0  6E5A               	movwf	___fttol@lval,c
  6475  0023A2  5051               	movf	___fttol@f1+1,w,c
  6476  0023A4  6E5B               	movwf	___fttol@lval+1,c
  6477  0023A6  5052               	movf	___fttol@f1+2,w,c
  6478  0023A8  6E5C               	movwf	___fttol@lval+2,c
  6479  0023AA  6A5D               	clrf	___fttol@lval+3,c
  6480  0023AC  0E8E               	movlw	142
  6481  0023AE  5E5E               	subwf	___fttol@exp1,f,c
  6482  0023B0  AE5E               	btfss	___fttol@exp1,7,c
  6483  0023B2  D019               	goto	l4697
  6484  0023B4  505E               	movf	___fttol@exp1,w,c
  6485  0023B6  0A80               	xorlw	128
  6486  0023B8  6E54               	movwf	??___fttol& (0+255),c
  6487  0023BA  0EF1               	movlw	241
  6488  0023BC  0A80               	xorlw	128
  6489  0023BE  5C54               	subwf	??___fttol,w,c
  6490  0023C0  B0D8               	btfsc	status,0,c
  6491  0023C2  D009               	goto	l4693
  6492  0023C4  0E00               	movlw	0
  6493  0023C6  6E50               	movwf	?___fttol,c
  6494  0023C8  0E00               	movlw	0
  6495  0023CA  6E51               	movwf	?___fttol+1,c
  6496  0023CC  0E00               	movlw	0
  6497  0023CE  6E52               	movwf	?___fttol+2,c
  6498  0023D0  0E00               	movlw	0
  6499  0023D2  6E53               	movwf	?___fttol+3,c
  6500  0023D4  0012               	return	
  6501  0023D6                     l4693:
  6502  0023D6  90D8               	bcf	status,0,c
  6503  0023D8  325D               	rrcf	___fttol@lval+3,f,c
  6504  0023DA  325C               	rrcf	___fttol@lval+2,f,c
  6505  0023DC  325B               	rrcf	___fttol@lval+1,f,c
  6506  0023DE  325A               	rrcf	___fttol@lval,f,c
  6507  0023E0  3E5E               	incfsz	___fttol@exp1,f,c
  6508  0023E2  D7F9               	goto	l4693
  6509  0023E4  D014               	goto	l4707
  6510  0023E6                     l4697:
  6511  0023E6  0E17               	movlw	23
  6512  0023E8  645E               	cpfsgt	___fttol@exp1,c
  6513  0023EA  D00F               	goto	l4705
  6514  0023EC  0E00               	movlw	0
  6515  0023EE  6E50               	movwf	?___fttol,c
  6516  0023F0  0E00               	movlw	0
  6517  0023F2  6E51               	movwf	?___fttol+1,c
  6518  0023F4  0E00               	movlw	0
  6519  0023F6  6E52               	movwf	?___fttol+2,c
  6520  0023F8  0E00               	movlw	0
  6521  0023FA  6E53               	movwf	?___fttol+3,c
  6522  0023FC  0012               	return	
  6523  0023FE                     l4703:
  6524  0023FE  90D8               	bcf	status,0,c
  6525  002400  365A               	rlcf	___fttol@lval,f,c
  6526  002402  365B               	rlcf	___fttol@lval+1,f,c
  6527  002404  365C               	rlcf	___fttol@lval+2,f,c
  6528  002406  365D               	rlcf	___fttol@lval+3,f,c
  6529  002408  065E               	decf	___fttol@exp1,f,c
  6530  00240A                     l4705:
  6531  00240A  665E               	tstfsz	___fttol@exp1,c
  6532  00240C  D7F8               	goto	l4703
  6533  00240E                     l4707:
  6534  00240E  5059               	movf	___fttol@sign1,w,c
  6535  002410  B4D8               	btfsc	status,2,c
  6536  002412  D008               	goto	l4711
  6537  002414  1E5D               	comf	___fttol@lval+3,f,c
  6538  002416  1E5C               	comf	___fttol@lval+2,f,c
  6539  002418  1E5B               	comf	___fttol@lval+1,f,c
  6540  00241A  6C5A               	negf	___fttol@lval,c
  6541  00241C  0E00               	movlw	0
  6542  00241E  225B               	addwfc	___fttol@lval+1,f,c
  6543  002420  225C               	addwfc	___fttol@lval+2,f,c
  6544  002422  225D               	addwfc	___fttol@lval+3,f,c
  6545  002424                     l4711:
  6546  002424  C05A  F050         	movff	___fttol@lval,?___fttol
  6547  002428  C05B  F051         	movff	___fttol@lval+1,?___fttol+1
  6548  00242C  C05C  F052         	movff	___fttol@lval+2,?___fttol+2
  6549  002430  C05D  F053         	movff	___fttol@lval+3,?___fttol+3
  6550  002434  0012               	return	
  6551  002436                     __end_of___fttol:
  6552                           	opt stack 0
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           intcon2	equ	0xFF1
  6560                           wreg	equ	0xFE8
  6561                           indf2	equ	0xFDF
  6562                           postinc2	equ	0xFDE
  6563                           postdec2	equ	0xFDD
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function ___ftneg *****************
  6569 ;; Defined at:
  6570 ;;		line 15 in file "/opt/microchip/xc8/v1.31/sources/common/ftneg.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  f1              3   27[COMRAM] float 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;		None
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  3   27[COMRAM] float 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6584 ;;      Params:         3       0       0       0       0       0       0       0       0
  6585 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6587 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6588 ;;Total ram usage:        3 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_get_temperature
  6594 ;;		_sprintf
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text29
  6599  002D88                     __ptext29:
  6600                           	opt stack 0
  6601  002D88                     ___ftneg:
  6602                           	opt stack 29
  6603                           
  6604                           ;incstack = 0
  6605  002D88  0E7F               	movlw	127
  6606  002D8A  141E               	andwf	___ftneg@f1+2,w,c
  6607  002D8C  101D               	iorwf	___ftneg@f1+1,w,c
  6608  002D8E  101C               	iorwf	___ftneg@f1,w,c
  6609  002D90  B4D8               	btfsc	status,2,c
  6610  002D92  D006               	goto	l724
  6611  002D94  0E00               	movlw	0
  6612  002D96  1A1C               	xorwf	___ftneg@f1,f,c
  6613  002D98  0E00               	movlw	0
  6614  002D9A  1A1D               	xorwf	___ftneg@f1+1,f,c
  6615  002D9C  0E80               	movlw	128
  6616  002D9E  1A1E               	xorwf	___ftneg@f1+2,f,c
  6617  002DA0                     l724:
  6618  002DA0  C01C  F01C         	movff	___ftneg@f1,?___ftneg
  6619  002DA4  C01D  F01D         	movff	___ftneg@f1+1,?___ftneg+1
  6620  002DA8  C01E  F01E         	movff	___ftneg@f1+2,?___ftneg+2
  6621  002DAC  0012               	return	
  6622  002DAE                     __end_of___ftneg:
  6623                           	opt stack 0
  6624                           tblptru	equ	0xFF8
  6625                           tblptrh	equ	0xFF7
  6626                           tblptrl	equ	0xFF6
  6627                           tablat	equ	0xFF5
  6628                           prodh	equ	0xFF4
  6629                           prodl	equ	0xFF3
  6630                           intcon2	equ	0xFF1
  6631                           wreg	equ	0xFE8
  6632                           indf2	equ	0xFDF
  6633                           postinc2	equ	0xFDE
  6634                           postdec2	equ	0xFDD
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           
  6639 ;; *************** function ___ftge *****************
  6640 ;; Defined at:
  6641 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/common/ftge.c"
  6642 ;; Parameters:    Size  Location     Type
  6643 ;;  ff1             3    0[COMRAM] float 
  6644 ;;  ff2             3    3[COMRAM] float 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		wreg, status,2, status,0
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6656 ;;      Params:         6       0       0       0       0       0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6658 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6659 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6660 ;;Total ram usage:        9 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; This function calls:
  6663 ;;		Nothing
  6664 ;; This function is called by:
  6665 ;;		_set_fan_speed
  6666 ;;		_MAX_7221_WRITE_FLOAT
  6667 ;;		_sprintf
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text30
  6672  002922                     __ptext30:
  6673                           	opt stack 0
  6674  002922                     ___ftge:
  6675                           	opt stack 29
  6676                           
  6677                           ;incstack = 0
  6678  002922  AE03               	btfss	___ftge@ff1+2,7,c
  6679  002924  D016               	goto	l4651
  6680  002926  C001  F007         	movff	___ftge@ff1,??___ftge
  6681  00292A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6682  00292E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6683  002932  1E07               	comf	??___ftge,f,c
  6684  002934  1E08               	comf	??___ftge+1,f,c
  6685  002936  1E09               	comf	??___ftge+2,f,c
  6686  002938  2A07               	incf	??___ftge,f,c
  6687  00293A  0E00               	movlw	0
  6688  00293C  2208               	addwfc	??___ftge+1,f,c
  6689  00293E  2209               	addwfc	??___ftge+2,f,c
  6690  002940  0E00               	movlw	0
  6691  002942  2407               	addwf	??___ftge,w,c
  6692  002944  6E01               	movwf	___ftge@ff1,c
  6693  002946  0E00               	movlw	0
  6694  002948  2008               	addwfc	??___ftge+1,w,c
  6695  00294A  6E02               	movwf	___ftge@ff1+1,c
  6696  00294C  0E80               	movlw	128
  6697  00294E  2009               	addwfc	??___ftge+2,w,c
  6698  002950  6E03               	movwf	___ftge@ff1+2,c
  6699  002952                     l4651:
  6700  002952  AE06               	btfss	___ftge@ff2+2,7,c
  6701  002954  D016               	goto	l4655
  6702  002956  C004  F007         	movff	___ftge@ff2,??___ftge
  6703  00295A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6704  00295E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6705  002962  1E07               	comf	??___ftge,f,c
  6706  002964  1E08               	comf	??___ftge+1,f,c
  6707  002966  1E09               	comf	??___ftge+2,f,c
  6708  002968  2A07               	incf	??___ftge,f,c
  6709  00296A  0E00               	movlw	0
  6710  00296C  2208               	addwfc	??___ftge+1,f,c
  6711  00296E  2209               	addwfc	??___ftge+2,f,c
  6712  002970  0E00               	movlw	0
  6713  002972  2407               	addwf	??___ftge,w,c
  6714  002974  6E04               	movwf	___ftge@ff2,c
  6715  002976  0E00               	movlw	0
  6716  002978  2008               	addwfc	??___ftge+1,w,c
  6717  00297A  6E05               	movwf	___ftge@ff2+1,c
  6718  00297C  0E80               	movlw	128
  6719  00297E  2009               	addwfc	??___ftge+2,w,c
  6720  002980  6E06               	movwf	___ftge@ff2+2,c
  6721  002982                     l4655:
  6722  002982  0E00               	movlw	0
  6723  002984  1A01               	xorwf	___ftge@ff1,f,c
  6724  002986  0E00               	movlw	0
  6725  002988  1A02               	xorwf	___ftge@ff1+1,f,c
  6726  00298A  0E80               	movlw	128
  6727  00298C  1A03               	xorwf	___ftge@ff1+2,f,c
  6728  00298E  0E00               	movlw	0
  6729  002990  1A04               	xorwf	___ftge@ff2,f,c
  6730  002992  0E00               	movlw	0
  6731  002994  1A05               	xorwf	___ftge@ff2+1,f,c
  6732  002996  0E80               	movlw	128
  6733  002998  1A06               	xorwf	___ftge@ff2+2,f,c
  6734  00299A  5004               	movf	___ftge@ff2,w,c
  6735  00299C  5C01               	subwf	___ftge@ff1,w,c
  6736  00299E  5005               	movf	___ftge@ff2+1,w,c
  6737  0029A0  5802               	subwfb	___ftge@ff1+1,w,c
  6738  0029A2  5006               	movf	___ftge@ff2+2,w,c
  6739  0029A4  5803               	subwfb	___ftge@ff1+2,w,c
  6740  0029A6  B0D8               	btfsc	status,0,c
  6741  0029A8  D002               	goto	l4661
  6742  0029AA  90D8               	bcf	status,0,c
  6743  0029AC  0012               	return	
  6744  0029AE                     l4661:
  6745  0029AE  80D8               	bsf	status,0,c
  6746  0029B0  0012               	return	
  6747  0029B2                     __end_of___ftge:
  6748                           	opt stack 0
  6749                           tblptru	equ	0xFF8
  6750                           tblptrh	equ	0xFF7
  6751                           tblptrl	equ	0xFF6
  6752                           tablat	equ	0xFF5
  6753                           prodh	equ	0xFF4
  6754                           prodl	equ	0xFF3
  6755                           intcon2	equ	0xFF1
  6756                           wreg	equ	0xFE8
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function ___asftsub *****************
  6765 ;; Defined at:
  6766 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftsub.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  f1p             2   48[COMRAM] PTR float 
  6769 ;;		 -> sprintf@fval(3), 
  6770 ;;  f2              3   50[COMRAM] float 
  6771 ;; Auto vars:     Size  Location     Type
  6772 ;;		None
  6773 ;; Return value:  Size  Location     Type
  6774 ;;                  3   48[COMRAM] float 
  6775 ;; Registers used:
  6776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6777 ;; Tracked objects:
  6778 ;;		On entry : 0/0
  6779 ;;		On exit  : 0/0
  6780 ;;		Unchanged: 0/0
  6781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6782 ;;      Params:         5       0       0       0       0       0       0       0       0
  6783 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6785 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6786 ;;Total ram usage:        5 bytes
  6787 ;; Hardware stack levels used:    1
  6788 ;; Hardware stack levels required when called:    3
  6789 ;; This function calls:
  6790 ;;		___ftsub
  6791 ;; This function is called by:
  6792 ;;		_sprintf
  6793 ;; This function uses a non-reentrant model
  6794 ;;
  6795                           
  6796                           	psect	text31
  6797  002BA8                     __ptext31:
  6798                           	opt stack 0
  6799  002BA8                     ___asftsub:
  6800                           	opt stack 25
  6801                           
  6802                           ;	Return value of ___asftsub is never used
  6803                           
  6804                           ;incstack = 0
  6805  002BA8  C031  FFD9         	movff	___asftsub@f1p,fsr2l
  6806  002BAC  C032  FFDA         	movff	___asftsub@f1p+1,fsr2h
  6807  002BB0  CFDE F02B          	movff	postinc2,___ftsub@f1
  6808  002BB4  CFDE F02C          	movff	postinc2,___ftsub@f1+1
  6809  002BB8  CFDD F02D          	movff	postdec2,___ftsub@f1+2
  6810  002BBC  C033  F02E         	movff	___asftsub@f2,___ftsub@f2
  6811  002BC0  C034  F02F         	movff	___asftsub@f2+1,___ftsub@f2+1
  6812  002BC4  C035  F030         	movff	___asftsub@f2+2,___ftsub@f2+2
  6813  002BC8  EC4B  F016         	call	___ftsub	;wreg free
  6814  002BCC  C031  FFD9         	movff	___asftsub@f1p,fsr2l
  6815  002BD0  C032  FFDA         	movff	___asftsub@f1p+1,fsr2h
  6816  002BD4  C02B  FFDE         	movff	?___ftsub,postinc2
  6817  002BD8  C02C  FFDE         	movff	?___ftsub+1,postinc2
  6818  002BDC  C02D  FFDD         	movff	?___ftsub+2,postdec2
  6819  002BE0  52DD               	movf	postdec2,f,c
  6820  002BE2  0012               	return	
  6821  002BE4                     __end_of___asftsub:
  6822                           	opt stack 0
  6823                           tblptru	equ	0xFF8
  6824                           tblptrh	equ	0xFF7
  6825                           tblptrl	equ	0xFF6
  6826                           tablat	equ	0xFF5
  6827                           prodh	equ	0xFF4
  6828                           prodl	equ	0xFF3
  6829                           intcon2	equ	0xFF1
  6830                           wreg	equ	0xFE8
  6831                           indf2	equ	0xFDF
  6832                           postinc2	equ	0xFDE
  6833                           postdec2	equ	0xFDD
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8
  6837                           
  6838 ;; *************** function ___ftsub *****************
  6839 ;; Defined at:
  6840 ;;		line 20 in file "/opt/microchip/xc8/v1.31/sources/common/ftsub.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  f1              3   42[COMRAM] float 
  6843 ;;  f2              3   45[COMRAM] float 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  3   42[COMRAM] float 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6855 ;;      Params:         6       0       0       0       0       0       0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6858 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6859 ;;Total ram usage:        6 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    2
  6862 ;; This function calls:
  6863 ;;		___ftadd
  6864 ;; This function is called by:
  6865 ;;		___asftsub
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text32
  6870  002C96                     __ptext32:
  6871                           	opt stack 0
  6872  002C96                     ___ftsub:
  6873                           	opt stack 25
  6874                           
  6875                           ;incstack = 0
  6876  002C96  0E00               	movlw	0
  6877  002C98  1A2E               	xorwf	___ftsub@f2,f,c
  6878  002C9A  0E00               	movlw	0
  6879  002C9C  1A2F               	xorwf	___ftsub@f2+1,f,c
  6880  002C9E  0E80               	movlw	128
  6881  002CA0  1A30               	xorwf	___ftsub@f2+2,f,c
  6882  002CA2  C02B  F01F         	movff	___ftsub@f1,___ftadd@f1
  6883  002CA6  C02C  F020         	movff	___ftsub@f1+1,___ftadd@f1+1
  6884  002CAA  C02D  F021         	movff	___ftsub@f1+2,___ftadd@f1+2
  6885  002CAE  C02E  F022         	movff	___ftsub@f2,___ftadd@f2
  6886  002CB2  C02F  F023         	movff	___ftsub@f2+1,___ftadd@f2+1
  6887  002CB6  C030  F024         	movff	___ftsub@f2+2,___ftadd@f2+2
  6888  002CBA  EC2C  F00D         	call	___ftadd	;wreg free
  6889  002CBE  C01F  F02B         	movff	?___ftadd,?___ftsub
  6890  002CC2  C020  F02C         	movff	?___ftadd+1,?___ftsub+1
  6891  002CC6  C021  F02D         	movff	?___ftadd+2,?___ftsub+2
  6892  002CCA  0012               	return	
  6893  002CCC                     __end_of___ftsub:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon2	equ	0xFF1
  6902                           wreg	equ	0xFE8
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           fsr2h	equ	0xFDA
  6907                           fsr2l	equ	0xFD9
  6908                           status	equ	0xFD8
  6909                           
  6910 ;; *************** function ___asftmul *****************
  6911 ;; Defined at:
  6912 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftmul.c"
  6913 ;; Parameters:    Size  Location     Type
  6914 ;;  f1p             2   72[COMRAM] PTR float 
  6915 ;;		 -> sprintf@integ(3), 
  6916 ;;  f2              3   74[COMRAM] float 
  6917 ;; Auto vars:     Size  Location     Type
  6918 ;;		None
  6919 ;; Return value:  Size  Location     Type
  6920 ;;                  3   72[COMRAM] float 
  6921 ;; Registers used:
  6922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6923 ;; Tracked objects:
  6924 ;;		On entry : 0/0
  6925 ;;		On exit  : 0/0
  6926 ;;		Unchanged: 0/0
  6927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6928 ;;      Params:         5       0       0       0       0       0       0       0       0
  6929 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6931 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6932 ;;Total ram usage:        5 bytes
  6933 ;; Hardware stack levels used:    1
  6934 ;; Hardware stack levels required when called:    2
  6935 ;; This function calls:
  6936 ;;		___ftmul
  6937 ;; This function is called by:
  6938 ;;		_sprintf
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text33
  6943  002BE4                     __ptext33:
  6944                           	opt stack 0
  6945  002BE4                     ___asftmul:
  6946                           	opt stack 26
  6947                           
  6948                           ;	Return value of ___asftmul is never used
  6949                           
  6950                           ;incstack = 0
  6951  002BE4  C049  FFD9         	movff	___asftmul@f1p,fsr2l
  6952  002BE8  C04A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  6953  002BEC  CFDE F03A          	movff	postinc2,___ftmul@f1
  6954  002BF0  CFDE F03B          	movff	postinc2,___ftmul@f1+1
  6955  002BF4  CFDD F03C          	movff	postdec2,___ftmul@f1+2
  6956  002BF8  C04B  F03D         	movff	___asftmul@f2,___ftmul@f2
  6957  002BFC  C04C  F03E         	movff	___asftmul@f2+1,___ftmul@f2+1
  6958  002C00  C04D  F03F         	movff	___asftmul@f2+2,___ftmul@f2+2
  6959  002C04  EC24  F011         	call	___ftmul	;wreg free
  6960  002C08  C049  FFD9         	movff	___asftmul@f1p,fsr2l
  6961  002C0C  C04A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  6962  002C10  C03A  FFDE         	movff	?___ftmul,postinc2
  6963  002C14  C03B  FFDE         	movff	?___ftmul+1,postinc2
  6964  002C18  C03C  FFDD         	movff	?___ftmul+2,postdec2
  6965  002C1C  52DD               	movf	postdec2,f,c
  6966  002C1E  0012               	return	
  6967  002C20                     __end_of___asftmul:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           tblptrh	equ	0xFF7
  6971                           tblptrl	equ	0xFF6
  6972                           tablat	equ	0xFF5
  6973                           prodh	equ	0xFF4
  6974                           prodl	equ	0xFF3
  6975                           intcon2	equ	0xFF1
  6976                           wreg	equ	0xFE8
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function ___ftmul *****************
  6985 ;; Defined at:
  6986 ;;		line 51 in file "/opt/microchip/xc8/v1.31/sources/common/ftmul.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  f1              3   57[COMRAM] float 
  6989 ;;  f2              3   60[COMRAM] float 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;  f3_as_produc    3   67[COMRAM] unsigned um
  6992 ;;  sign            1   71[COMRAM] unsigned char 
  6993 ;;  cntr            1   70[COMRAM] unsigned char 
  6994 ;;  exp             1   66[COMRAM] unsigned char 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  3   57[COMRAM] float 
  6997 ;; Registers used:
  6998 ;;		wreg, status,2, status,0, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 0/0
  7001 ;;		On exit  : 0/0
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7004 ;;      Params:         6       0       0       0       0       0       0       0       0
  7005 ;;      Locals:         6       0       0       0       0       0       0       0       0
  7006 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7007 ;;      Totals:        15       0       0       0       0       0       0       0       0
  7008 ;;Total ram usage:       15 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    1
  7011 ;; This function calls:
  7012 ;;		___ftpack
  7013 ;; This function is called by:
  7014 ;;		_set_fan_speed
  7015 ;;		_get_temperature
  7016 ;;		_fround
  7017 ;;		_scale
  7018 ;;		_sprintf
  7019 ;;		___asftmul
  7020 ;;		_log
  7021 ;;		_eval_poly
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text34
  7026  002248                     __ptext34:
  7027                           	opt stack 0
  7028  002248                     ___ftmul:
  7029                           	opt stack 28
  7030                           
  7031                           ;incstack = 0
  7032  002248  C03C  F040         	movff	___ftmul@f1+2,??___ftmul
  7033  00224C  6A41               	clrf	(??___ftmul+1)& (0+255),c
  7034  00224E  6A42               	clrf	(??___ftmul+2)& (0+255),c
  7035  002250  343B               	rlcf	___ftmul@f1+1,w,c
  7036  002252  3640               	rlcf	??___ftmul& (0+255),f,c
  7037  002254  E301               	bnc	u1801
  7038  002256  8041               	bsf	(??___ftmul+1)& (0+255),0,c
  7039  002258                     u1801:
  7040  002258  5040               	movf	??___ftmul,w,c
  7041  00225A  6E43               	movwf	___ftmul@exp,c
  7042  00225C  6643               	tstfsz	___ftmul@exp& (0+255),c
  7043  00225E  D007               	goto	l4301
  7044  002260  0E00               	movlw	0
  7045  002262  6E3A               	movwf	?___ftmul,c
  7046  002264  0E00               	movlw	0
  7047  002266  6E3B               	movwf	?___ftmul+1,c
  7048  002268  0E00               	movlw	0
  7049  00226A  6E3C               	movwf	?___ftmul+2,c
  7050  00226C  0012               	return	
  7051  00226E                     l4301:
  7052  00226E  C03F  F040         	movff	___ftmul@f2+2,??___ftmul
  7053  002272  6A41               	clrf	(??___ftmul+1)& (0+255),c
  7054  002274  6A42               	clrf	(??___ftmul+2)& (0+255),c
  7055  002276  343E               	rlcf	___ftmul@f2+1,w,c
  7056  002278  3640               	rlcf	??___ftmul& (0+255),f,c
  7057  00227A  E301               	bnc	u1821
  7058  00227C  8041               	bsf	(??___ftmul+1)& (0+255),0,c
  7059  00227E                     u1821:
  7060  00227E  5040               	movf	??___ftmul,w,c
  7061  002280  6E48               	movwf	___ftmul@sign,c
  7062  002282  6648               	tstfsz	___ftmul@sign& (0+255),c
  7063  002284  D007               	goto	l4307
  7064  002286  0E00               	movlw	0
  7065  002288  6E3A               	movwf	?___ftmul,c
  7066  00228A  0E00               	movlw	0
  7067  00228C  6E3B               	movwf	?___ftmul+1,c
  7068  00228E  0E00               	movlw	0
  7069  002290  6E3C               	movwf	?___ftmul+2,c
  7070  002292  0012               	return	
  7071  002294                     l4307:
  7072  002294  5048               	movf	___ftmul@sign,w,c
  7073  002296  0F7B               	addlw	123
  7074  002298  2643               	addwf	___ftmul@exp,f,c
  7075  00229A  C03C  F048         	movff	___ftmul@f1+2,___ftmul@sign
  7076  00229E  503F               	movf	___ftmul@f2+2,w,c
  7077  0022A0  1A48               	xorwf	___ftmul@sign,f,c
  7078  0022A2  0E80               	movlw	128
  7079  0022A4  1648               	andwf	___ftmul@sign,f,c
  7080  0022A6  8E3B               	bsf	___ftmul@f1+1,7,c
  7081  0022A8  8E3E               	bsf	___ftmul@f2+1,7,c
  7082  0022AA  0EFF               	movlw	255
  7083  0022AC  163D               	andwf	___ftmul@f2,f,c
  7084  0022AE  0EFF               	movlw	255
  7085  0022B0  163E               	andwf	___ftmul@f2+1,f,c
  7086  0022B2  0E00               	movlw	0
  7087  0022B4  163F               	andwf	___ftmul@f2+2,f,c
  7088  0022B6  0E00               	movlw	0
  7089  0022B8  6E44               	movwf	___ftmul@f3_as_product,c
  7090  0022BA  0E00               	movlw	0
  7091  0022BC  6E45               	movwf	___ftmul@f3_as_product+1,c
  7092  0022BE  0E00               	movlw	0
  7093  0022C0  6E46               	movwf	___ftmul@f3_as_product+2,c
  7094  0022C2  6E40               	movwf	??___ftmul& (0+255),c
  7095  0022C4  0E07               	movlw	7
  7096  0022C6  6E47               	movwf	___ftmul@cntr,c
  7097  0022C8  5040               	movf	??___ftmul& (0+255),w,c
  7098  0022CA                     l4321:
  7099  0022CA  A03A               	btfss	___ftmul@f1,0,c
  7100  0022CC  D006               	goto	l4325
  7101  0022CE  503D               	movf	___ftmul@f2,w,c
  7102  0022D0  2644               	addwf	___ftmul@f3_as_product,f,c
  7103  0022D2  503E               	movf	___ftmul@f2+1,w,c
  7104  0022D4  2245               	addwfc	___ftmul@f3_as_product+1,f,c
  7105  0022D6  503F               	movf	___ftmul@f2+2,w,c
  7106  0022D8  2246               	addwfc	___ftmul@f3_as_product+2,f,c
  7107  0022DA                     l4325:
  7108  0022DA  90D8               	bcf	status,0,c
  7109  0022DC  323C               	rrcf	___ftmul@f1+2,f,c
  7110  0022DE  323B               	rrcf	___ftmul@f1+1,f,c
  7111  0022E0  323A               	rrcf	___ftmul@f1,f,c
  7112  0022E2  90D8               	bcf	status,0,c
  7113  0022E4  363D               	rlcf	___ftmul@f2,f,c
  7114  0022E6  363E               	rlcf	___ftmul@f2+1,f,c
  7115  0022E8  363F               	rlcf	___ftmul@f2+2,f,c
  7116  0022EA  2E47               	decfsz	___ftmul@cntr,f,c
  7117  0022EC  D7EE               	goto	l4321
  7118  0022EE  6E40               	movwf	??___ftmul& (0+255),c
  7119  0022F0  0E09               	movlw	9
  7120  0022F2  6E47               	movwf	___ftmul@cntr,c
  7121  0022F4  5040               	movf	??___ftmul& (0+255),w,c
  7122  0022F6                     l4331:
  7123  0022F6  A03A               	btfss	___ftmul@f1,0,c
  7124  0022F8  D006               	goto	l4335
  7125  0022FA  503D               	movf	___ftmul@f2,w,c
  7126  0022FC  2644               	addwf	___ftmul@f3_as_product,f,c
  7127  0022FE  503E               	movf	___ftmul@f2+1,w,c
  7128  002300  2245               	addwfc	___ftmul@f3_as_product+1,f,c
  7129  002302  503F               	movf	___ftmul@f2+2,w,c
  7130  002304  2246               	addwfc	___ftmul@f3_as_product+2,f,c
  7131  002306                     l4335:
  7132  002306  90D8               	bcf	status,0,c
  7133  002308  323C               	rrcf	___ftmul@f1+2,f,c
  7134  00230A  323B               	rrcf	___ftmul@f1+1,f,c
  7135  00230C  323A               	rrcf	___ftmul@f1,f,c
  7136  00230E  90D8               	bcf	status,0,c
  7137  002310  3246               	rrcf	___ftmul@f3_as_product+2,f,c
  7138  002312  3245               	rrcf	___ftmul@f3_as_product+1,f,c
  7139  002314  3244               	rrcf	___ftmul@f3_as_product,f,c
  7140  002316  2E47               	decfsz	___ftmul@cntr,f,c
  7141  002318  D7EE               	goto	l4331
  7142  00231A  C044  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7143  00231E  C045  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7144  002322  C046  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7145  002326  C043  F004         	movff	___ftmul@exp,___ftpack@exp
  7146  00232A  C048  F005         	movff	___ftmul@sign,___ftpack@sign
  7147  00232E  ECA5  F013         	call	___ftpack	;wreg free
  7148  002332  C001  F03A         	movff	?___ftpack,?___ftmul
  7149  002336  C002  F03B         	movff	?___ftpack+1,?___ftmul+1
  7150  00233A  C003  F03C         	movff	?___ftpack+2,?___ftmul+2
  7151  00233E  0012               	return	
  7152  002340                     __end_of___ftmul:
  7153                           	opt stack 0
  7154                           tblptru	equ	0xFF8
  7155                           tblptrh	equ	0xFF7
  7156                           tblptrl	equ	0xFF6
  7157                           tablat	equ	0xFF5
  7158                           prodh	equ	0xFF4
  7159                           prodl	equ	0xFF3
  7160                           intcon2	equ	0xFF1
  7161                           wreg	equ	0xFE8
  7162                           indf2	equ	0xFDF
  7163                           postinc2	equ	0xFDE
  7164                           postdec2	equ	0xFDD
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function ___asftadd *****************
  7170 ;; Defined at:
  7171 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftadd.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;  f1p             2   82[COMRAM] PTR float 
  7174 ;;		 -> sprintf@fval(3), 
  7175 ;;  f2              3   84[COMRAM] float 
  7176 ;; Auto vars:     Size  Location     Type
  7177 ;;		None
  7178 ;; Return value:  Size  Location     Type
  7179 ;;                  3   82[COMRAM] float 
  7180 ;; Registers used:
  7181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7182 ;; Tracked objects:
  7183 ;;		On entry : 0/0
  7184 ;;		On exit  : 0/0
  7185 ;;		Unchanged: 0/0
  7186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7187 ;;      Params:         5       0       0       0       0       0       0       0       0
  7188 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7189 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7190 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7191 ;;Total ram usage:        5 bytes
  7192 ;; Hardware stack levels used:    1
  7193 ;; Hardware stack levels required when called:    2
  7194 ;; This function calls:
  7195 ;;		___ftadd
  7196 ;; This function is called by:
  7197 ;;		_sprintf
  7198 ;; This function uses a non-reentrant model
  7199 ;;
  7200                           
  7201                           	psect	text35
  7202  002C20                     __ptext35:
  7203                           	opt stack 0
  7204  002C20                     ___asftadd:
  7205                           	opt stack 26
  7206                           
  7207                           ;	Return value of ___asftadd is never used
  7208                           
  7209                           ;incstack = 0
  7210  002C20  C053  FFD9         	movff	___asftadd@f1p,fsr2l
  7211  002C24  C054  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7212  002C28  CFDE F01F          	movff	postinc2,___ftadd@f1
  7213  002C2C  CFDE F020          	movff	postinc2,___ftadd@f1+1
  7214  002C30  CFDD F021          	movff	postdec2,___ftadd@f1+2
  7215  002C34  C055  F022         	movff	___asftadd@f2,___ftadd@f2
  7216  002C38  C056  F023         	movff	___asftadd@f2+1,___ftadd@f2+1
  7217  002C3C  C057  F024         	movff	___asftadd@f2+2,___ftadd@f2+2
  7218  002C40  EC2C  F00D         	call	___ftadd	;wreg free
  7219  002C44  C053  FFD9         	movff	___asftadd@f1p,fsr2l
  7220  002C48  C054  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7221  002C4C  C01F  FFDE         	movff	?___ftadd,postinc2
  7222  002C50  C020  FFDE         	movff	?___ftadd+1,postinc2
  7223  002C54  C021  FFDD         	movff	?___ftadd+2,postdec2
  7224  002C58  52DD               	movf	postdec2,f,c
  7225  002C5A  0012               	return	
  7226  002C5C                     __end_of___asftadd:
  7227                           	opt stack 0
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon2	equ	0xFF1
  7235                           wreg	equ	0xFE8
  7236                           indf2	equ	0xFDF
  7237                           postinc2	equ	0xFDE
  7238                           postdec2	equ	0xFDD
  7239                           fsr2h	equ	0xFDA
  7240                           fsr2l	equ	0xFD9
  7241                           status	equ	0xFD8
  7242                           
  7243 ;; *************** function ___ftadd *****************
  7244 ;; Defined at:
  7245 ;;		line 86 in file "/opt/microchip/xc8/v1.31/sources/common/ftadd.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  f1              3   30[COMRAM] float 
  7248 ;;  f2              3   33[COMRAM] float 
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;  exp1            1   41[COMRAM] unsigned char 
  7251 ;;  exp2            1   40[COMRAM] unsigned char 
  7252 ;;  sign            1   39[COMRAM] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  3   30[COMRAM] float 
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7262 ;;      Params:         6       0       0       0       0       0       0       0       0
  7263 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7264 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7265 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7266 ;;Total ram usage:       12 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:    1
  7269 ;; This function calls:
  7270 ;;		___ftpack
  7271 ;; This function is called by:
  7272 ;;		_get_temperature
  7273 ;;		___asftadd
  7274 ;;		___ftsub
  7275 ;;		_log
  7276 ;;		_eval_poly
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text36
  7281  001A58                     __ptext36:
  7282                           	opt stack 0
  7283  001A58                     ___ftadd:
  7284                           	opt stack 26
  7285                           
  7286                           ;incstack = 0
  7287  001A58  C021  F025         	movff	___ftadd@f1+2,??___ftadd
  7288  001A5C  6A26               	clrf	(??___ftadd+1)& (0+255),c
  7289  001A5E  6A27               	clrf	(??___ftadd+2)& (0+255),c
  7290  001A60  3420               	rlcf	___ftadd@f1+1,w,c
  7291  001A62  3625               	rlcf	??___ftadd& (0+255),f,c
  7292  001A64  E301               	bnc	u1591
  7293  001A66  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  7294  001A68                     u1591:
  7295  001A68  5025               	movf	??___ftadd,w,c
  7296  001A6A  6E2A               	movwf	___ftadd@exp1,c
  7297  001A6C  C024  F025         	movff	___ftadd@f2+2,??___ftadd
  7298  001A70  6A26               	clrf	(??___ftadd+1)& (0+255),c
  7299  001A72  6A27               	clrf	(??___ftadd+2)& (0+255),c
  7300  001A74  3423               	rlcf	___ftadd@f2+1,w,c
  7301  001A76  3625               	rlcf	??___ftadd& (0+255),f,c
  7302  001A78  E301               	bnc	u1601
  7303  001A7A  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  7304  001A7C                     u1601:
  7305  001A7C  5025               	movf	??___ftadd,w,c
  7306  001A7E  6E29               	movwf	___ftadd@exp2,c
  7307  001A80  502A               	movf	___ftadd@exp1,w,c
  7308  001A82  B4D8               	btfsc	status,2,c
  7309  001A84  D00C               	goto	l650
  7310  001A86  5029               	movf	___ftadd@exp2,w,c
  7311  001A88  5C2A               	subwf	___ftadd@exp1,w,c
  7312  001A8A  B0D8               	btfsc	status,0,c
  7313  001A8C  D00F               	goto	l4233
  7314  001A8E  502A               	movf	___ftadd@exp1,w,c
  7315  001A90  0800               	sublw	0
  7316  001A92  2429               	addwf	___ftadd@exp2,w,c
  7317  001A94  6E25               	movwf	??___ftadd& (0+255),c
  7318  001A96  0E19               	movlw	25
  7319  001A98  5C25               	subwf	??___ftadd,w,c
  7320  001A9A  A0D8               	btfss	status,0,c
  7321  001A9C  D007               	goto	l4233
  7322  001A9E                     l650:
  7323  001A9E  C022  F01F         	movff	___ftadd@f2,?___ftadd
  7324  001AA2  C023  F020         	movff	___ftadd@f2+1,?___ftadd+1
  7325  001AA6  C024  F021         	movff	___ftadd@f2+2,?___ftadd+2
  7326  001AAA  0012               	return	
  7327  001AAC                     l4233:
  7328  001AAC  5029               	movf	___ftadd@exp2,w,c
  7329  001AAE  B4D8               	btfsc	status,2,c
  7330  001AB0  D00C               	goto	l654
  7331  001AB2  502A               	movf	___ftadd@exp1,w,c
  7332  001AB4  5C29               	subwf	___ftadd@exp2,w,c
  7333  001AB6  B0D8               	btfsc	status,0,c
  7334  001AB8  D00F               	goto	l4239
  7335  001ABA  5029               	movf	___ftadd@exp2,w,c
  7336  001ABC  0800               	sublw	0
  7337  001ABE  242A               	addwf	___ftadd@exp1,w,c
  7338  001AC0  6E25               	movwf	??___ftadd& (0+255),c
  7339  001AC2  0E19               	movlw	25
  7340  001AC4  5C25               	subwf	??___ftadd,w,c
  7341  001AC6  A0D8               	btfss	status,0,c
  7342  001AC8  D007               	goto	l4239
  7343  001ACA                     l654:
  7344  001ACA  C01F  F01F         	movff	___ftadd@f1,?___ftadd
  7345  001ACE  C020  F020         	movff	___ftadd@f1+1,?___ftadd+1
  7346  001AD2  C021  F021         	movff	___ftadd@f1+2,?___ftadd+2
  7347  001AD6  0012               	return	
  7348  001AD8                     l4239:
  7349  001AD8  6E25               	movwf	??___ftadd& (0+255),c
  7350  001ADA  0E06               	movlw	6
  7351  001ADC  6E28               	movwf	___ftadd@sign,c
  7352  001ADE  5025               	movf	??___ftadd& (0+255),w,c
  7353  001AE0  BE21               	btfsc	___ftadd@f1+2,7,c
  7354  001AE2  8E28               	bsf	___ftadd@sign,7,c
  7355  001AE4  BE24               	btfsc	___ftadd@f2+2,7,c
  7356  001AE6  8C28               	bsf	___ftadd@sign,6,c
  7357  001AE8  8E20               	bsf	___ftadd@f1+1,7,c
  7358  001AEA  0EFF               	movlw	255
  7359  001AEC  161F               	andwf	___ftadd@f1,f,c
  7360  001AEE  0EFF               	movlw	255
  7361  001AF0  1620               	andwf	___ftadd@f1+1,f,c
  7362  001AF2  0E00               	movlw	0
  7363  001AF4  1621               	andwf	___ftadd@f1+2,f,c
  7364  001AF6  8E23               	bsf	___ftadd@f2+1,7,c
  7365  001AF8  0EFF               	movlw	255
  7366  001AFA  1622               	andwf	___ftadd@f2,f,c
  7367  001AFC  0EFF               	movlw	255
  7368  001AFE  1623               	andwf	___ftadd@f2+1,f,c
  7369  001B00  0E00               	movlw	0
  7370  001B02  1624               	andwf	___ftadd@f2+2,f,c
  7371  001B04  5029               	movf	___ftadd@exp2,w,c
  7372  001B06  5C2A               	subwf	___ftadd@exp1,w,c
  7373  001B08  B0D8               	btfsc	status,0,c
  7374  001B0A  D01A               	goto	l4265
  7375  001B0C                     l4255:
  7376  001B0C  90D8               	bcf	status,0,c
  7377  001B0E  3622               	rlcf	___ftadd@f2,f,c
  7378  001B10  3623               	rlcf	___ftadd@f2+1,f,c
  7379  001B12  3624               	rlcf	___ftadd@f2+2,f,c
  7380  001B14  0629               	decf	___ftadd@exp2,f,c
  7381  001B16  5029               	movf	___ftadd@exp2,w,c
  7382  001B18  182A               	xorwf	___ftadd@exp1,w,c
  7383  001B1A  B4D8               	btfsc	status,2,c
  7384  001B1C  D00D               	goto	l4263
  7385  001B1E  0628               	decf	___ftadd@sign,f,c
  7386  001B20  C028  F025         	movff	___ftadd@sign,??___ftadd
  7387  001B24  0E07               	movlw	7
  7388  001B26  1625               	andwf	??___ftadd,f,c
  7389  001B28  B4D8               	btfsc	status,2,c
  7390  001B2A  D006               	goto	l4263
  7391  001B2C  D7EF               	goto	l4255
  7392  001B2E                     l4261:
  7393  001B2E  90D8               	bcf	status,0,c
  7394  001B30  3221               	rrcf	___ftadd@f1+2,f,c
  7395  001B32  3220               	rrcf	___ftadd@f1+1,f,c
  7396  001B34  321F               	rrcf	___ftadd@f1,f,c
  7397  001B36  2A2A               	incf	___ftadd@exp1,f,c
  7398  001B38                     l4263:
  7399  001B38  5029               	movf	___ftadd@exp2,w,c
  7400  001B3A  622A               	cpfseq	___ftadd@exp1,c
  7401  001B3C  D7F8               	goto	l4261
  7402  001B3E  D01D               	goto	l665
  7403  001B40                     l4265:
  7404  001B40  502A               	movf	___ftadd@exp1,w,c
  7405  001B42  5C29               	subwf	___ftadd@exp2,w,c
  7406  001B44  B0D8               	btfsc	status,0,c
  7407  001B46  D019               	goto	l665
  7408  001B48                     l4267:
  7409  001B48  90D8               	bcf	status,0,c
  7410  001B4A  361F               	rlcf	___ftadd@f1,f,c
  7411  001B4C  3620               	rlcf	___ftadd@f1+1,f,c
  7412  001B4E  3621               	rlcf	___ftadd@f1+2,f,c
  7413  001B50  062A               	decf	___ftadd@exp1,f,c
  7414  001B52  5029               	movf	___ftadd@exp2,w,c
  7415  001B54  182A               	xorwf	___ftadd@exp1,w,c
  7416  001B56  B4D8               	btfsc	status,2,c
  7417  001B58  D00D               	goto	l4275
  7418  001B5A  0628               	decf	___ftadd@sign,f,c
  7419  001B5C  C028  F025         	movff	___ftadd@sign,??___ftadd
  7420  001B60  0E07               	movlw	7
  7421  001B62  1625               	andwf	??___ftadd,f,c
  7422  001B64  B4D8               	btfsc	status,2,c
  7423  001B66  D006               	goto	l4275
  7424  001B68  D7EF               	goto	l4267
  7425  001B6A                     l4273:
  7426  001B6A  90D8               	bcf	status,0,c
  7427  001B6C  3224               	rrcf	___ftadd@f2+2,f,c
  7428  001B6E  3223               	rrcf	___ftadd@f2+1,f,c
  7429  001B70  3222               	rrcf	___ftadd@f2,f,c
  7430  001B72  2A29               	incf	___ftadd@exp2,f,c
  7431  001B74                     l4275:
  7432  001B74  5029               	movf	___ftadd@exp2,w,c
  7433  001B76  622A               	cpfseq	___ftadd@exp1,c
  7434  001B78  D7F8               	goto	l4273
  7435  001B7A                     l665:
  7436  001B7A  AE28               	btfss	___ftadd@sign,7,c
  7437  001B7C  D00C               	goto	l674
  7438  001B7E  0EFF               	movlw	255
  7439  001B80  1A1F               	xorwf	___ftadd@f1,f,c
  7440  001B82  0EFF               	movlw	255
  7441  001B84  1A20               	xorwf	___ftadd@f1+1,f,c
  7442  001B86  0EFF               	movlw	255
  7443  001B88  1A21               	xorwf	___ftadd@f1+2,f,c
  7444  001B8A  0E01               	movlw	1
  7445  001B8C  261F               	addwf	___ftadd@f1,f,c
  7446  001B8E  0E00               	movlw	0
  7447  001B90  2220               	addwfc	___ftadd@f1+1,f,c
  7448  001B92  0E00               	movlw	0
  7449  001B94  2221               	addwfc	___ftadd@f1+2,f,c
  7450  001B96                     l674:
  7451  001B96  AC28               	btfss	___ftadd@sign,6,c
  7452  001B98  D00C               	goto	l4281
  7453  001B9A  0EFF               	movlw	255
  7454  001B9C  1A22               	xorwf	___ftadd@f2,f,c
  7455  001B9E  0EFF               	movlw	255
  7456  001BA0  1A23               	xorwf	___ftadd@f2+1,f,c
  7457  001BA2  0EFF               	movlw	255
  7458  001BA4  1A24               	xorwf	___ftadd@f2+2,f,c
  7459  001BA6  0E01               	movlw	1
  7460  001BA8  2622               	addwf	___ftadd@f2,f,c
  7461  001BAA  0E00               	movlw	0
  7462  001BAC  2223               	addwfc	___ftadd@f2+1,f,c
  7463  001BAE  0E00               	movlw	0
  7464  001BB0  2224               	addwfc	___ftadd@f2+2,f,c
  7465  001BB2                     l4281:
  7466  001BB2  6E25               	movwf	??___ftadd& (0+255),c
  7467  001BB4  0E00               	movlw	0
  7468  001BB6  6E28               	movwf	___ftadd@sign,c
  7469  001BB8  5025               	movf	??___ftadd& (0+255),w,c
  7470  001BBA  501F               	movf	___ftadd@f1,w,c
  7471  001BBC  2622               	addwf	___ftadd@f2,f,c
  7472  001BBE  5020               	movf	___ftadd@f1+1,w,c
  7473  001BC0  2223               	addwfc	___ftadd@f2+1,f,c
  7474  001BC2  5021               	movf	___ftadd@f1+2,w,c
  7475  001BC4  2224               	addwfc	___ftadd@f2+2,f,c
  7476  001BC6  AE24               	btfss	___ftadd@f2+2,7,c
  7477  001BC8  D010               	goto	l4291
  7478  001BCA  0EFF               	movlw	255
  7479  001BCC  1A22               	xorwf	___ftadd@f2,f,c
  7480  001BCE  0EFF               	movlw	255
  7481  001BD0  1A23               	xorwf	___ftadd@f2+1,f,c
  7482  001BD2  0EFF               	movlw	255
  7483  001BD4  1A24               	xorwf	___ftadd@f2+2,f,c
  7484  001BD6  0E01               	movlw	1
  7485  001BD8  2622               	addwf	___ftadd@f2,f,c
  7486  001BDA  0E00               	movlw	0
  7487  001BDC  2223               	addwfc	___ftadd@f2+1,f,c
  7488  001BDE  0E00               	movlw	0
  7489  001BE0  2224               	addwfc	___ftadd@f2+2,f,c
  7490  001BE2  6E25               	movwf	??___ftadd& (0+255),c
  7491  001BE4  0E01               	movlw	1
  7492  001BE6  6E28               	movwf	___ftadd@sign,c
  7493  001BE8  5025               	movf	??___ftadd& (0+255),w,c
  7494  001BEA                     l4291:
  7495  001BEA  C022  F001         	movff	___ftadd@f2,___ftpack@arg
  7496  001BEE  C023  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7497  001BF2  C024  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7498  001BF6  C02A  F004         	movff	___ftadd@exp1,___ftpack@exp
  7499  001BFA  C028  F005         	movff	___ftadd@sign,___ftpack@sign
  7500  001BFE  ECA5  F013         	call	___ftpack	;wreg free
  7501  001C02  C001  F01F         	movff	?___ftpack,?___ftadd
  7502  001C06  C002  F020         	movff	?___ftpack+1,?___ftadd+1
  7503  001C0A  C003  F021         	movff	?___ftpack+2,?___ftadd+2
  7504  001C0E  0012               	return	
  7505  001C10                     __end_of___ftadd:
  7506                           	opt stack 0
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon2	equ	0xFF1
  7514                           wreg	equ	0xFE8
  7515                           indf2	equ	0xFDF
  7516                           postinc2	equ	0xFDE
  7517                           postdec2	equ	0xFDD
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function ___ftpack *****************
  7523 ;; Defined at:
  7524 ;;		line 62 in file "/opt/microchip/xc8/v1.31/sources/common/float.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  arg             3    0[COMRAM] unsigned um
  7527 ;;  exp             1    3[COMRAM] unsigned char 
  7528 ;;  sign            1    4[COMRAM] unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  3    0[COMRAM] float 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7540 ;;      Params:         5       0       0       0       0       0       0       0       0
  7541 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7542 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7543 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7544 ;;Total ram usage:        8 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		___awtoft
  7550 ;;		___ftadd
  7551 ;;		___ftdiv
  7552 ;;		___ftmul
  7553 ;;		___lltoft
  7554 ;;		___lwtoft
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text37
  7559  00274A                     __ptext37:
  7560                           	opt stack 0
  7561  00274A                     ___ftpack:
  7562                           	opt stack 28
  7563                           
  7564                           ;incstack = 0
  7565  00274A  5004               	movf	___ftpack@exp,w,c
  7566  00274C  B4D8               	btfsc	status,2,c
  7567  00274E  D005               	goto	l4195
  7568  002750  5001               	movf	___ftpack@arg,w,c
  7569  002752  1002               	iorwf	___ftpack@arg+1,w,c
  7570  002754  1003               	iorwf	___ftpack@arg+2,w,c
  7571  002756  A4D8               	btfss	status,2,c
  7572  002758  D00C               	goto	l4201
  7573  00275A                     l4195:
  7574  00275A  0E00               	movlw	0
  7575  00275C  6E01               	movwf	?___ftpack,c
  7576  00275E  0E00               	movlw	0
  7577  002760  6E02               	movwf	?___ftpack+1,c
  7578  002762  0E00               	movlw	0
  7579  002764  6E03               	movwf	?___ftpack+2,c
  7580  002766  0012               	return	
  7581  002768                     l4199:
  7582  002768  2A04               	incf	___ftpack@exp,f,c
  7583  00276A  90D8               	bcf	status,0,c
  7584  00276C  3203               	rrcf	___ftpack@arg+2,f,c
  7585  00276E  3202               	rrcf	___ftpack@arg+1,f,c
  7586  002770  3201               	rrcf	___ftpack@arg,f,c
  7587  002772                     l4201:
  7588  002772  0E00               	movlw	0
  7589  002774  1401               	andwf	___ftpack@arg,w,c
  7590  002776  6E06               	movwf	??___ftpack& (0+255),c
  7591  002778  0E00               	movlw	0
  7592  00277A  1402               	andwf	___ftpack@arg+1,w,c
  7593  00277C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7594  00277E  0EFE               	movlw	254
  7595  002780  1403               	andwf	___ftpack@arg+2,w,c
  7596  002782  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7597  002784  5006               	movf	??___ftpack,w,c
  7598  002786  1007               	iorwf	??___ftpack+1,w,c
  7599  002788  1008               	iorwf	??___ftpack+2,w,c
  7600  00278A  B4D8               	btfsc	status,2,c
  7601  00278C  D00C               	goto	l4207
  7602  00278E  D7EC               	goto	l4199
  7603  002790                     l4203:
  7604  002790  2A04               	incf	___ftpack@exp,f,c
  7605  002792  0E01               	movlw	1
  7606  002794  2601               	addwf	___ftpack@arg,f,c
  7607  002796  0E00               	movlw	0
  7608  002798  2202               	addwfc	___ftpack@arg+1,f,c
  7609  00279A  0E00               	movlw	0
  7610  00279C  2203               	addwfc	___ftpack@arg+2,f,c
  7611  00279E  90D8               	bcf	status,0,c
  7612  0027A0  3203               	rrcf	___ftpack@arg+2,f,c
  7613  0027A2  3202               	rrcf	___ftpack@arg+1,f,c
  7614  0027A4  3201               	rrcf	___ftpack@arg,f,c
  7615  0027A6                     l4207:
  7616  0027A6  0E00               	movlw	0
  7617  0027A8  1401               	andwf	___ftpack@arg,w,c
  7618  0027AA  6E06               	movwf	??___ftpack& (0+255),c
  7619  0027AC  0E00               	movlw	0
  7620  0027AE  1402               	andwf	___ftpack@arg+1,w,c
  7621  0027B0  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7622  0027B2  0EFF               	movlw	255
  7623  0027B4  1403               	andwf	___ftpack@arg+2,w,c
  7624  0027B6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7625  0027B8  5006               	movf	??___ftpack,w,c
  7626  0027BA  1007               	iorwf	??___ftpack+1,w,c
  7627  0027BC  1008               	iorwf	??___ftpack+2,w,c
  7628  0027BE  B4D8               	btfsc	status,2,c
  7629  0027C0  D006               	goto	l4211
  7630  0027C2  D7E6               	goto	l4203
  7631  0027C4                     l4209:
  7632  0027C4  0604               	decf	___ftpack@exp,f,c
  7633  0027C6  90D8               	bcf	status,0,c
  7634  0027C8  3601               	rlcf	___ftpack@arg,f,c
  7635  0027CA  3602               	rlcf	___ftpack@arg+1,f,c
  7636  0027CC  3603               	rlcf	___ftpack@arg+2,f,c
  7637  0027CE                     l4211:
  7638  0027CE  AE02               	btfss	___ftpack@arg+1,7,c
  7639  0027D0  D7F9               	goto	l4209
  7640  0027D2  A004               	btfss	___ftpack@exp,0,c
  7641  0027D4  9E02               	bcf	___ftpack@arg+1,7,c
  7642  0027D6  90D8               	bcf	status,0,c
  7643  0027D8  3204               	rrcf	___ftpack@exp,f,c
  7644  0027DA  5004               	movf	___ftpack@exp,w,c
  7645  0027DC  1203               	iorwf	___ftpack@arg+2,f,c
  7646  0027DE  5005               	movf	___ftpack@sign,w,c
  7647  0027E0  A4D8               	btfss	status,2,c
  7648  0027E2  8E03               	bsf	___ftpack@arg+2,7,c
  7649  0027E4  C001  F001         	movff	___ftpack@arg,?___ftpack
  7650  0027E8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7651  0027EC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7652  0027F0  0012               	return	
  7653  0027F2                     __end_of___ftpack:
  7654                           	opt stack 0
  7655                           tblptru	equ	0xFF8
  7656                           tblptrh	equ	0xFF7
  7657                           tblptrl	equ	0xFF6
  7658                           tablat	equ	0xFF5
  7659                           prodh	equ	0xFF4
  7660                           prodl	equ	0xFF3
  7661                           intcon2	equ	0xFF1
  7662                           wreg	equ	0xFE8
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           fsr2h	equ	0xFDA
  7667                           fsr2l	equ	0xFD9
  7668                           status	equ	0xFD8
  7669                           
  7670 ;; *************** function _MAX_7221_INIT *****************
  7671 ;; Defined at:
  7672 ;;		line 68 in file "max7221.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;		None
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;		None
  7677 ;; Return value:  Size  Location     Type
  7678 ;;		None               void
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7686 ;;      Params:         0       0       0       0       0       0       0       0       0
  7687 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7689 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7690 ;;Total ram usage:        0 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    2
  7693 ;; This function calls:
  7694 ;;		_MAX_7221_INTENSITY
  7695 ;;		_MAX_7221_SCAN_LIMIT
  7696 ;;		_MAX_7221_WRITE
  7697 ;; This function is called by:
  7698 ;;		_main
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           	psect	text38
  7703  002CCC                     __ptext38:
  7704                           	opt stack 0
  7705  002CCC                     _MAX_7221_INIT:
  7706                           	opt stack 28
  7707                           
  7708                           ;max7221.c: 70: MAX_7221_INTENSITY(0x0d);
  7709                           
  7710                           ;incstack = 0
  7711  002CCC  0E0D               	movlw	13
  7712  002CCE  EC01  F017         	call	_MAX_7221_INTENSITY
  7713                           
  7714                           ;max7221.c: 71: MAX_7221_SCAN_LIMIT(0x02);
  7715  002CD2  0E02               	movlw	2
  7716  002CD4  ECF6  F016         	call	_MAX_7221_SCAN_LIMIT
  7717                           
  7718                           ;max7221.c: 72: MAX_7221_WRITE(0x09, 0x07);
  7719  002CD8  0E00               	movlw	0
  7720  002CDA  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  7721  002CDC  0E09               	movlw	9
  7722  002CDE  6E02               	movwf	MAX_7221_WRITE@reg,c
  7723  002CE0  0E00               	movlw	0
  7724  002CE2  6E05               	movwf	MAX_7221_WRITE@value+1,c
  7725  002CE4  0E07               	movlw	7
  7726  002CE6  6E04               	movwf	MAX_7221_WRITE@value,c
  7727  002CE8  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  7728                           
  7729                           ;max7221.c: 73: MAX_7221_WRITE(0x0c, 0x01);
  7730  002CEC  0E00               	movlw	0
  7731  002CEE  6E03               	movwf	MAX_7221_WRITE@reg+1,c
  7732  002CF0  0E0C               	movlw	12
  7733  002CF2  6E02               	movwf	MAX_7221_WRITE@reg,c
  7734  002CF4  0E00               	movlw	0
  7735  002CF6  6E05               	movwf	MAX_7221_WRITE@value+1,c
  7736  002CF8  0E01               	movlw	1
  7737  002CFA  6E04               	movwf	MAX_7221_WRITE@value,c
  7738  002CFC  EC15  F017         	call	_MAX_7221_WRITE	;wreg free
  7739  002D00  0012               	return	
  7740  002D02                     __end_of_MAX_7221_INIT:
  7741                           	opt stack 0
  7742                           tblptru	equ	0xFF8
  7743                           tblptrh	equ	0xFF7
  7744                           tblptrl	equ	0xFF6
  7745                           tablat	equ	0xFF5
  7746                           prodh	equ	0xFF4
  7747                           prodl	equ	0xFF3
  7748                           intcon2	equ	0xFF1
  7749                           wreg	equ	0xFE8
  7750                           indf2	equ	0xFDF
  7751                           postinc2	equ	0xFDE
  7752                           postdec2	equ	0xFDD
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function _MAX_7221_WRITE *****************
  7758 ;; Defined at:
  7759 ;;		line 22 in file "max7221.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  reg             2    1[COMRAM] unsigned int 
  7762 ;;  value           2    3[COMRAM] unsigned int 
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;		None               void
  7767 ;; Registers used:
  7768 ;;		wreg, status,2, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7774 ;;      Params:         4       0       0       0       0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7777 ;;      Totals:         4       0       0       0       0       0       0       0       0
  7778 ;;Total ram usage:        4 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    1
  7781 ;; This function calls:
  7782 ;;		_SPI1_Exchange8bit
  7783 ;; This function is called by:
  7784 ;;		_MAX_7221_WRITE_FLOAT
  7785 ;;		_MAX_7221_INIT
  7786 ;;		_MAX_7221_WRITE_NUMBER
  7787 ;;		_MAX_7221_TESTMODE
  7788 ;; This function uses a non-reentrant model
  7789 ;;
  7790                           
  7791                           	psect	text39
  7792  002E2A                     __ptext39:
  7793                           	opt stack 0
  7794  002E2A                     _MAX_7221_WRITE:
  7795                           	opt stack 28
  7796                           
  7797                           ;max7221.c: 24: LATCbits.LATC6 = 0;
  7798                           
  7799                           ;incstack = 0
  7800  002E2A  9C8B               	bcf	3979,6,c	;volatile
  7801                           
  7802                           ;max7221.c: 25: SPI1_Exchange8bit(reg);
  7803  002E2C  5002               	movf	MAX_7221_WRITE@reg,w,c
  7804  002E2E  EC1E  F017         	call	_SPI1_Exchange8bit
  7805                           
  7806                           ;max7221.c: 26: SPI1_Exchange8bit(value);
  7807  002E32  5004               	movf	MAX_7221_WRITE@value,w,c
  7808  002E34  EC1E  F017         	call	_SPI1_Exchange8bit
  7809                           
  7810                           ;max7221.c: 27: LATCbits.LATC6 = 1;
  7811  002E38  8C8B               	bsf	3979,6,c	;volatile
  7812  002E3A  0012               	return	
  7813  002E3C                     __end_of_MAX_7221_WRITE:
  7814                           	opt stack 0
  7815                           tblptru	equ	0xFF8
  7816                           tblptrh	equ	0xFF7
  7817                           tblptrl	equ	0xFF6
  7818                           tablat	equ	0xFF5
  7819                           prodh	equ	0xFF4
  7820                           prodl	equ	0xFF3
  7821                           intcon2	equ	0xFF1
  7822                           wreg	equ	0xFE8
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _MAX_7221_SCAN_LIMIT *****************
  7831 ;; Defined at:
  7832 ;;		line 13 in file "max7221.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  limit           1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  limit           1    1[COMRAM] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;		None               void
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0
  7847 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7849 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7850 ;;Total ram usage:        1 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    1
  7853 ;; This function calls:
  7854 ;;		_SPI1_Exchange8bit
  7855 ;; This function is called by:
  7856 ;;		_MAX_7221_INIT
  7857 ;; This function uses a non-reentrant model
  7858 ;;
  7859                           
  7860                           	psect	text40
  7861  002DEC                     __ptext40:
  7862                           	opt stack 0
  7863  002DEC                     _MAX_7221_SCAN_LIMIT:
  7864                           	opt stack 28
  7865                           
  7866                           ;incstack = 0
  7867                           ;MAX_7221_SCAN_LIMIT@limit stored from wreg
  7868  002DEC  CFE8 F002          	movff	wreg,MAX_7221_SCAN_LIMIT@limit
  7869                           
  7870                           ;max7221.c: 15: LATCbits.LATC6 = 0;
  7871  002DF0  9C8B               	bcf	3979,6,c	;volatile
  7872                           
  7873                           ;max7221.c: 16: SPI1_Exchange8bit(0x0b);
  7874  002DF2  0E0B               	movlw	11
  7875  002DF4  EC1E  F017         	call	_SPI1_Exchange8bit
  7876                           
  7877                           ;max7221.c: 17: SPI1_Exchange8bit(limit);
  7878  002DF8  5002               	movf	MAX_7221_SCAN_LIMIT@limit,w,c
  7879  002DFA  EC1E  F017         	call	_SPI1_Exchange8bit
  7880                           
  7881                           ;max7221.c: 18: LATCbits.LATC6 = 1;
  7882  002DFE  8C8B               	bsf	3979,6,c	;volatile
  7883  002E00  0012               	return	
  7884  002E02                     __end_of_MAX_7221_SCAN_LIMIT:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon2	equ	0xFF1
  7893                           wreg	equ	0xFE8
  7894                           indf2	equ	0xFDF
  7895                           postinc2	equ	0xFDE
  7896                           postdec2	equ	0xFDD
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _MAX_7221_INTENSITY *****************
  7902 ;; Defined at:
  7903 ;;		line 5 in file "max7221.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  value           1    wreg     unsigned char 
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;  value           1    1[COMRAM] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;		None               void
  7910 ;; Registers used:
  7911 ;;		wreg, status,2, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0
  7918 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7920 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7921 ;;Total ram usage:        1 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    1
  7924 ;; This function calls:
  7925 ;;		_SPI1_Exchange8bit
  7926 ;; This function is called by:
  7927 ;;		_MAX_7221_INIT
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           	psect	text41
  7932  002E02                     __ptext41:
  7933                           	opt stack 0
  7934  002E02                     _MAX_7221_INTENSITY:
  7935                           	opt stack 28
  7936                           
  7937                           ;incstack = 0
  7938                           ;MAX_7221_INTENSITY@value stored from wreg
  7939  002E02  CFE8 F002          	movff	wreg,MAX_7221_INTENSITY@value
  7940                           
  7941                           ;max7221.c: 7: LATCbits.LATC6 = 0;
  7942  002E06  9C8B               	bcf	3979,6,c	;volatile
  7943                           
  7944                           ;max7221.c: 8: SPI1_Exchange8bit(0x0a);
  7945  002E08  0E0A               	movlw	10
  7946  002E0A  EC1E  F017         	call	_SPI1_Exchange8bit
  7947                           
  7948                           ;max7221.c: 9: SPI1_Exchange8bit(value);
  7949  002E0E  5002               	movf	MAX_7221_INTENSITY@value,w,c
  7950  002E10  EC1E  F017         	call	_SPI1_Exchange8bit
  7951                           
  7952                           ;max7221.c: 10: LATCbits.LATC6 = 1;
  7953  002E14  8C8B               	bsf	3979,6,c	;volatile
  7954  002E16  0012               	return	
  7955  002E18                     __end_of_MAX_7221_INTENSITY:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon2	equ	0xFF1
  7964                           wreg	equ	0xFE8
  7965                           indf2	equ	0xFDF
  7966                           postinc2	equ	0xFDE
  7967                           postdec2	equ	0xFDD
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           
  7972 ;; *************** function _SPI1_Exchange8bit *****************
  7973 ;; Defined at:
  7974 ;;		line 20 in file "spi.c"
  7975 ;; Parameters:    Size  Location     Type
  7976 ;;  data            1    wreg     unsigned char 
  7977 ;; Auto vars:     Size  Location     Type
  7978 ;;  data            1    0[COMRAM] unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  1    wreg      unsigned char 
  7981 ;; Registers used:
  7982 ;;		wreg, status,2
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7988 ;;      Params:         0       0       0       0       0       0       0       0       0
  7989 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7990 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7991 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7992 ;;Total ram usage:        1 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; This function calls:
  7995 ;;		Nothing
  7996 ;; This function is called by:
  7997 ;;		_MAX_7221_INTENSITY
  7998 ;;		_MAX_7221_SCAN_LIMIT
  7999 ;;		_MAX_7221_WRITE
  8000 ;;		_SPI1_Exchange8bitBuffer
  8001 ;; This function uses a non-reentrant model
  8002 ;;
  8003                           
  8004                           	psect	text42
  8005  002E3C                     __ptext42:
  8006                           	opt stack 0
  8007  002E3C                     _SPI1_Exchange8bit:
  8008                           	opt stack 28
  8009                           
  8010                           ;incstack = 0
  8011                           ;SPI1_Exchange8bit@data stored from wreg
  8012  002E3C  CFE8 F001          	movff	wreg,SPI1_Exchange8bit@data
  8013                           
  8014                           ;spi.c: 23: SSP1CON1bits.WCOL = 0;
  8015  002E40  9EC6               	bcf	4038,7,c	;volatile
  8016                           
  8017                           ;spi.c: 25: SSP1BUF = data;
  8018  002E42  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  8019  002E46                     l163:
  8020  002E46  A0C7               	btfss	4039,0,c	;volatile
  8021  002E48  D7FE               	goto	l163
  8022                           
  8023                           ;spi.c: 29: }
  8024                           ;spi.c: 31: return (SSP1BUF);
  8025  002E4A  50C9               	movf	4041,w,c	;volatile
  8026  002E4C  0012               	return	
  8027  002E4E                     __end_of_SPI1_Exchange8bit:
  8028                           	opt stack 0
  8029                           tblptru	equ	0xFF8
  8030                           tblptrh	equ	0xFF7
  8031                           tblptrl	equ	0xFF6
  8032                           tablat	equ	0xFF5
  8033                           prodh	equ	0xFF4
  8034                           prodl	equ	0xFF3
  8035                           intcon2	equ	0xFF1
  8036                           wreg	equ	0xFE8
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           tblptru	equ	0xFF8
  8044                           tblptrh	equ	0xFF7
  8045                           tblptrl	equ	0xFF6
  8046                           tablat	equ	0xFF5
  8047                           prodh	equ	0xFF4
  8048                           prodl	equ	0xFF3
  8049                           intcon2	equ	0xFF1
  8050                           wreg	equ	0xFE8
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           fsr2h	equ	0xFDA
  8055                           fsr2l	equ	0xFD9
  8056                           status	equ	0xFD8
  8057                           
  8058                           	psect	rparam
  8059  0000                     tblptru	equ	0xFF8
  8060                           tblptrh	equ	0xFF7
  8061                           tblptrl	equ	0xFF6
  8062                           tablat	equ	0xFF5
  8063                           prodh	equ	0xFF4
  8064                           prodl	equ	0xFF3
  8065                           intcon2	equ	0xFF1
  8066                           wreg	equ	0xFE8
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           fsr2h	equ	0xFDA
  8071                           fsr2l	equ	0xFD9
  8072                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    158
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     94      94
    BANK0           160     68      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> MAX_7221_WRITE_FLOAT@digits(BANK0[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S967$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _set_fan_speed->___fttol
    _get_temperature->_log
    _log->_eval_poly
    _eval_poly->___ftmul
    ___awtoft->___ftpack
    ___lwtoft->___wmul
    ___ftdiv->___ftadd
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftneg->___lwtoft
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___ftmul->___ftdiv
    ___asftadd->_fround
    ___ftadd->___ftneg
    _MAX_7221_INIT->_MAX_7221_WRITE
    _MAX_7221_WRITE->_SPI1_Exchange8bit
    _MAX_7221_SCAN_LIMIT->_SPI1_Exchange8bit
    _MAX_7221_INTENSITY->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_MAX_7221_WRITE_FLOAT
    _MAX_7221_WRITE_FLOAT->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  116102
                                             63 BANK0      5     5      0
                      _MAX_7221_INIT
               _MAX_7221_WRITE_FLOAT
                    _SPI1_Initialize
                            ___awmod
                      _configure_adc
                      _configure_pwm
                    _get_temperature
                    _init_oscillator
                          _init_pins
                      _set_fan_speed
 ---------------------------------------------------------------------------------
 (1) _set_fan_speed                                       12     9      3   12195
                                              0 BANK0     12     9      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _init_pins                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_oscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_temperature                                     27    24      3   42996
                                             89 COMRAM     3     0      3
                                              0 BANK0     24    24      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                             ___wmul
                        _adc_convert
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   24702
                                             84 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                           ___lwtoft (ARG)
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     3      5     352
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   12407
                                             72 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3    2345
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _adc_convert                                          4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             5     2      3    2532
                                             22 COMRAM     5     2      3
                           ___ftpack
                             ___wmul (ARG)
                        _adc_convert (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3020
                                             42 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _configure_pwm                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_adc                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MAX_7221_WRITE_FLOAT                                15    12      3   57574
                                             48 BANK0     15    12      3
                     _MAX_7221_WRITE
                             ___ftge
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    47      7   54692
                                              0 BANK0     48    41      7
                          ___asftadd
                          ___asftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11606
                                             72 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11408
                                             72 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2719
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1576
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          16    10      6     574
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2259
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     508
                                             79 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             27 COMRAM     3     0      3
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     904
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___asftsub                                            5     0      5    4443
                                             48 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4249
                                             42 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___asftmul                                            5     0      5    5436
                                             72 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5242
                                             57 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                        _adc_convert (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asftadd                                            5     0      5    4270
                                             82 COMRAM     5     0      5
                            ___ftadd
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4076
                                             30 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2126
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _MAX_7221_INIT                                        0     0      0    1690
                 _MAX_7221_INTENSITY
                _MAX_7221_SCAN_LIMIT
                     _MAX_7221_WRITE
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_WRITE                                       4     0      4    1602
                                              1 COMRAM     4     0      4
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_SCAN_LIMIT                                  1     1      0      44
                                              1 COMRAM     1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_INTENSITY                                   1     1      0      44
                                              1 COMRAM     1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX_7221_INIT
     _MAX_7221_INTENSITY
       _SPI1_Exchange8bit
     _MAX_7221_SCAN_LIMIT
       _SPI1_Exchange8bit
     _MAX_7221_WRITE
       _SPI1_Exchange8bit
   _MAX_7221_WRITE_FLOAT
     _MAX_7221_WRITE
       _SPI1_Exchange8bit
     ___ftge
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _adc_convert (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       ___ftneg
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _adc_convert (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SPI1_Initialize
   ___awmod
   _configure_adc
   _configure_pwm
   _get_temperature
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
       _frexp (ARG)
     ___ftneg
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
     ___lwtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _adc_convert
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp (ARG)
   _init_oscillator
   _init_pins
   _set_fan_speed
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      46       5       43.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5E      5E       1       98.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A4       6        0.0%
DATA                 0      0      A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat Dec  3 21:35:29 2016

            _SPI1_Exchange8bit 2E3C                   ___asftadd@f2 0055                  ___asftadd@f1p 0053  
           ?_SPI1_Exchange8bit 0001                   ___awdiv@sign 000E                 ?_configure_adc 0001  
          ___wmul@multiplicand 0013                 ?_configure_pwm 0001                   ___asftmul@f2 004B  
                 __CFG_CP0$OFF 000000                   ___asftsub@f2 0033                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   ___ftadd@exp1 002A  
                 ___ftadd@exp2 0029                    __CFG_LVP$ON 000000                   ___ftadd@sign 0028  
                          l106 26DA                            l203 2D16                            l163 2E46  
                          l287 0EF0                            l650 1A9E           __size_of_adc_convert 0030  
                          l724 2DA0                            l581 1D6A                            l654 1ACA  
                          l574 1CCE                            l665 1B7A                            l674 1B96  
                          l684 24C4                            l693 20C6                            l685 24EA  
                          l778 2A26                            l699 2130                            l788 2A90  
                 __CFG_CPB$OFF 000000                            _PR2 000FBB                   __CFG_CPD$OFF 000000  
          ??_SPI1_Exchange8bit 0001                            _log 1ED2                   ___awmod@sign 0007  
                          wreg 000FE8                  ___asftmul@f1p 0049                    _sprintf$978 0070  
                _MAX_7221_INIT 2CCC                  ___asftsub@f1p 0031                   ___ftdiv@cntr 0034  
                 ___ftdiv@sign 0039                           l4201 2772                           l5001 10FC  
                         l4211 27CE                           l4203 2790                           l5011 1172  
                         l4301 226E                           l5005 113C                           l5013 1196  
                         l4207 27A6                           l5031 1F04                           l4209 27C4  
                         l4233 1AAC                           l4321 22CA                           l4401 281E  
                         l4331 22F6                           l4307 2294                           l4411 2854  
                         l4261 1B2E                           l4325 22DA                           l4413 2858  
                         l4421 2876                           l4405 283A                           l5053 245C  
                         l5037 1F2C                           l5133 21E6                           l4263 1B38  
                         l4255 1B0C                           l4239 1AD8                           l4335 2306  
                         l5127 2180                           l5207 2740                           l4281 1BB2  
                         l4273 1B6A                           l4265 1B40                           l4425 2884  
                         l4417 286C                           l4409 284C                           l4195 275A  
                         l4291 1BEA                           l4275 1B74                           l4267 1B48  
                         l4523 2060                           l4371 265C                           l4363 263A  
                         l4507 2D80                           l5059 2482                           l4621 1D66  
                         l4613 1D42                           l4517 2036                           l4381 267C  
                         l4373 2660                           l4357 261A                           l4199 2768  
                         l4711 2424                           l4703 23FE                           l4471 12DA  
                         l5175 1E4A                           l4705 240A                           l4721 29D8  
                         l4609 1D32                           l4553 20F8                           l4537 209E  
                         l4369 2654                           l4385 2686                           l4457 1A18  
                         l4449 194C                           l4481 13AE                           l5177 1E5E  
                         l4651 2952                           l4707 240E                           l4723 29E4  
                         l4619 1D5A                           l4563 2120                           l4643 2B32  
                         l4661 29AE                           l4733 2A18                           l4725 29E8  
                         l4741 2A4E                           l4573 1C4C                           l4565 212C  
                         l4557 2108                           l4389 2694                           l4477 138A  
                         l4655 2982                           l4743 2A5A                           l4495 158A  
                         l4911 0CFC                           l4823 091E                           l4815 08DC  
                         l4745 2A5E                           l4489 14DA                           l4833 0992  
                         l4809 08BE                           l4675 236A                           l4755 2AAC  
                         l4579 1C88                           l4931 0DB8                           l4827 0962  
                         l4771 28B8                           l4693 23D6                           l4749 2A82  
                         l4757 2AB8                           l4917 0D5A                           l4845 09EA  
                         l4837 099A                           l4829 097C                           ?_log 0055  
                         l4599 1CFE                           l4871 0B28                           l4855 0A54  
                         l4839 09C8                           l4697 23E6                           l4953 0EB2  
                         l4937 0DE6                           l4945 0E84                           l4785 255C  
                         l4971 0F80                           l4947 0E94                           l4883 0BB0  
                         l4787 25D8                           l4981 106E                           l4983 107E  
                         l4967 0F2C                           l4959 0EF4                           l4895 0C5C  
                         l4887 0BEE                           l4879 0B88                           l4991 10AA  
                         l4899 0C82                           l4997 10CE                           l4989 109C  
                         STR_1 089F                           u2101 2046                           _LATA 000F89  
                         _LATB 000F8A                           u2311 2350                           _LATC 000F8B  
                         _LATD 000F8C                           u1601 1A7C                           u2081 201C  
                         _LATE 000F8D                           u2330 2388                           u2170 1C2E  
                         u2190 1C6A                           u2335 2380                           u2175 1C24  
                         u1801 2258                           u2195 1C60                           u1821 227E  
                         u2470 28E2                           u1591 1A68                           u2560 0AA8  
                         u2545 0A2C                           u2565 0A9C                           u2478 28E4  
                         u2851 2446                           u2835 1EE4                           u2935 1DB6  
                         u2871 246C   __size_of_MAX_7221_SCAN_LIMIT 0016                           _main 269E  
                 ___ftpack@arg 0001                   ___ftpack@exp 0004                           fsr2h 000FDA  
                         indf2 000FDF                           fsr2l 000FD9                  __CFG_BORV$190 000000  
            ??_init_oscillator 0001                           log@x 0055                           prodh 000FF4  
                         prodl 000FF3                           start 0000      __end_of_SPI1_Exchange8bit 2E4E  
                __CFG_IESO$OFF 000000                   _sprintf$1703 006D                   ___ftmul@cntr 0047  
                 ___ftmul@sign 0048              get_temperature@R1 006C              get_temperature@R2 0071  
            get_temperature@Tn 006E                 _MAX_7221_WRITE 2E2A                   ___fttol@exp1 005E  
                 ___fttol@lval 005A                          ??_log 0058            MAX_7221_WRITE@value 0004  
                        ?_main 0001               __end_of_MAX_TEMP 087D                __end_of___awdiv 269E  
              __end_of___ftadd 1C10                __end_of___awmod 288E                __end_of___ftdiv 251C  
              __end_of___ftneg 2DAE                __end_of___lldiv 2A38                __end_of___ftmul 2340  
              ___awdiv@divisor 000A                __end_of___llmod 2AA2                __end_of___ftsub 2CCC  
              __end_of___fttol 2436                          _T2CON 000FBA                 __CFG_DEBUG$OFF 000000  
             __end_of_MIN_TEMP 0880                ___awdiv@counter 000D                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96               ?_get_temperature 005A                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
                 ___lltoft@exp 0011                 ?_MAX_7221_INIT 0001                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                  ___awtoft@sign 000D  
              __end_of_dpowers 0829                          _frexp 288E                          _errno 00A4  
                        _scale 11A4                __end_of_isdigit 2D88                  ___ftpack@sign 0005  
                        tablat 000FF5                          status 000FD8                 __CFG_T3CMX$RC0 000000  
              __end_of_sprintf 11A4                 __CFG_ICPRT$OFF 000000       __size_of_SPI1_Initialize 000E  
               __CFG_MCLRE$OFF 000000         __end_of_MAX_7221_WRITE 2E3C                __initialization 2E4E  
           _MAX_7221_INTENSITY 2E02                    log@exponent 0058                   __end_of_main 274A  
              ??_configure_adc 0001                ??_configure_pwm 0001                 __CFG_PCLKEN$ON 000000  
           get_temperature@Bth 0073             get_temperature@Rth 0063            ?_MAX_7221_INTENSITY 0001  
                       ??_main 005F                  ___fttol@sign1 0059                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0136                 __CFG_SDOMX$RB3 000000                __CFG_CCP2MX$RC1 000000  
                       ?_frexp 0001               ___llmod@dividend 0001                         _ACTCON 000FB5  
                       ?_scale 0049                         _ADRESH 000FC4                         _ADRESL 000FC3  
                       _CCPR1L 000FBE               ___awdiv@dividend 0008               __end_of___awtoft 2B5A  
                       _ANSELA 000F5B                         _ANSELB 000F5C                         _ANSELC 000F5D  
                       _ANSELD 000F5E                         _ANSELE 000F5F               __end_of___ftpack 27F2  
             __end_of___lltoft 2B06                 __CFG_WDTEN$OFF 000000               __end_of___lwtoft 2D5E  
                       _OSCCON 000FD3           ??_MAX_7221_INTENSITY 0002          get_temperature@sensor 005A  
        SPI1_Exchange8bit@data 0001     __size_of_SPI1_Exchange8bit 0012                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 0877                ?_MAX_7221_WRITE 0002        MAX_7221_INTENSITY@value 0002  
                       ___ftge 2922                         ___wmul 2C5C                      ??___awdiv 000C  
                    ??___ftadd 0025                 __CFG_STVREN$ON 000000                      ??___awmod 0005  
                    ??___ftdiv 0031                      ??___ftneg 001F                      ??___lldiv 0009  
                    ??___ftmul 0040                      ??___llmod 0009                      ??___ftsub 0031  
                    ??___fttol 0054                         _fround 1804               ___awdiv@quotient 000F  
              ___awmod@divisor 0003                ___awmod@counter 0006          ___ftmul@f3_as_product 0044  
              ??_MAX_7221_INIT 0006                      ??_isdigit 0001          __end_of_set_fan_speed 2248  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_sprintf 0067             __size_of___asftadd 003C  
           __size_of___asftmul 003C             __size_of___asftsub 003C           __CFG_LS48MHZ$SYS24X4 000000  
             __end_oflog@coeff 089F                     __accesstop 0060        __end_of__initialization 2E54  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 001F                     ___ftadd@f2 0022  
                   ___ftge@ff1 0001                     ___ftge@ff2 0004                   eval_poly@res 0052  
                   ___ftdiv@f1 002B                     ___ftdiv@f2 002E                     ___ftdiv@f3 0035  
                   ___ftneg@f1 001C                     ___awtoft@c 0009                     ___ftmul@f1 003A  
                   ___ftmul@f2 003D                     ___ftsub@f1 002B                     ___ftsub@f2 002E  
                   ___fttol@f1 0050                 __pcstackCOMRAM 0001       MAX_7221_SCAN_LIMIT@limit 0002  
             __CFG_nPWRTEN$OFF 000000                     ___lltoft@c 0009                  __end_of_frexp 2922  
                __end_of_scale 15AE              ??_SPI1_Initialize 0001            _MAX_7221_SCAN_LIMIT 2DEC  
                   ___lwtoft@c 0017                     __div_to_l_ 1C10            get_temperature@Vout 0060  
          get_temperature@temp 0075                _init_oscillator 2E18                __div_to_l_@exp1 0010  
              __div_to_l_@cntr 000F                   sprintf@integ 0085                        ??_frexp 0006  
                      ??_scale 004C                __div_to_l_@quot 000B                     __pbssBANK0 00A4  
           __size_of_eval_poly 00D2           ?_MAX_7221_SCAN_LIMIT 0001  __size_of_MAX_7221_WRITE_FLOAT 0156  
                __div_to_l_@f1 0001                  __div_to_l_@f2 0004             __size_of_init_pins 004E  
            __CFG_PLLSEL$PLL4X 000000                        ?___ftge 0001                        ?___wmul 0011  
               _ADC_RESOLUTION 0877                  ??_adc_convert 0003                        _CCP1CON 000FBD  
                      _ECCP1AS 000FB6              __end_of___asftadd 2C5C                        ?_fround 0049  
            __end_of___asftmul 2C20              __end_of___asftsub 2BE4                      ?___awtoft 0009  
                    ?___ftpack 0001                      ?___lltoft 0009                      ?___lwtoft 0017  
                      _OSCCON2 000FD2    set_fan_speed@new_duty_cycle 0067                        _OSCTUNE 000F9B  
                      _SSP1ADD 000FC8                        _SSP1BUF 000FC9      MAX_7221_WRITE_FLOAT@value 0090  
        ??_MAX_7221_SCAN_LIMIT 0002               __CFG_CFGPLLEN$ON 000000       MAX_7221_WRITE_FLOAT@dig1 0097  
     MAX_7221_WRITE_FLOAT@dig2 0099              __end_of__npowers_ 0850                        __Hparam 0000  
                   _scale$1702 004C                        __Lparam 0000         __end_of_ADC_RESOLUTION 087A  
              __size_of___ftge 0090                        ___awdiv 25EE                        ___ftadd 1A58  
                      ___awmod 27F2                        ___ftdiv 2436                        ___ftneg 2D88  
                      ___lldiv 29B2                __size_of___wmul 003A                        ___ftmul 2248  
                      ___llmod 2A38                        ___ftsub 2C96                        ___fttol 2340  
                 __psmallconst 0800                        __pcinit 2E4E                     ??___awtoft 000C  
                   ??___ftpack 0006              __end_of_eval_poly 25EE                __size_of_fround 0254  
      __end_of_init_oscillator 2E2A                        __ramtop 0800                     ??___lltoft 000D  
                      __ptext0 269E                        __ptext1 2142                        __ptext2 2B5A  
                      __ptext3 2E18                        __ptext4 15AE                        __ptext5 1ED2  
                      __ptext6 288E                        __ptext7 251C                        __ptext8 2B06  
                      __ptext9 2D02                     ??___lwtoft 001A                    ?__div_to_l_ 0001  
                      _dpowers 0801                   __size_of_log 013A                        _isdigit 2D5E  
            __end_of_init_pins 2BA8               ___awmod@dividend 0001            __end_of_adc_convert 2D32  
                      _sprintf 08A6                 _MAX_DUTY_CYCLE 0880           end_of_initialization 2E54  
     __size_of_get_temperature 0256                  __Lmediumconst 0000               ??_MAX_7221_WRITE 0006  
              ___lldiv@divisor 0005                ___lldiv@counter 000E                        postdec2 000FDD  
                      postinc2 000FDE             set_fan_speed@tTemp 0069                 __tdiv_to_l_@f1 0001  
               __tdiv_to_l_@f2 0004          __end_of_configure_adc 2DCE          __end_of_configure_pwm 2DEC  
                ??__tdiv_to_l_ 0007                      _TRISAbits 000F92                      _TRISCbits 000F94  
       __end_of_MAX_DUTY_CYCLE 0882    __size_of_MAX_7221_INTENSITY 0016              MAX_7221_WRITE@reg 0002  
                  _CCP1CONbits 000FBD                    ___ftdiv@exp 0038                _SPI1_Initialize 2E5E  
          __size_of__div_to_l_ 016C                    ___ftmul@exp 0043             adc_convert@channel 0001  
               __end_of___ftge 29B2                 __end_of___wmul 2C96                    _adc_convert 2D02  
             ?_init_oscillator 0001                 __end_of_fround 1A58            start_initialization 2E4E  
                   eval_poly@d 004C                     eval_poly@n 004E                     eval_poly@x 0049  
        __end_of_MAX_7221_INIT 2D02            __end_of__tdiv_to_l_ 2142                    __end_of_log 200C  
                   frexp@value 0001                __CFG_nLPBOR$OFF 000000                ___llmod@divisor 0005  
              ___llmod@counter 000A              ??_get_temperature 005D         __size_of_set_fan_speed 0106  
                     ??___ftge 0007                       ??___wmul 0015                  sprintf@vd_980 007A  
                     ??_fround 004C   __end_of_MAX_7221_WRITE_FLOAT 1ED2                     fround@prec 0052  
            __size_of___awtoft 0054              __size_of___ftpack 00A8                      ___asftadd 2C20  
                    ___asftmul 2BE4                      ___asftsub 2BA8              __size_of___lltoft 0064  
            __size_of___lwtoft 002C                  __pcstackBANK0 0060            __end_of__stringdata 08A4  
      __end_of_SPI1_Initialize 2E6C                   _isdigit$1253 0002                 _MIN_DUTY_CYCLE 0882  
                  sprintf@_val 0080                    sprintf@flag 007E                    sprintf@fval 008C  
                  sprintf@prec 008A                       ?___awdiv 0008                       ?___ftadd 001F  
                     ?___awmod 0001                       ?___ftdiv 002B                       ?___ftneg 001C  
                     ?___lldiv 0001                       ?___ftmul 003A                       ?___llmod 0001  
                     ?___ftsub 002B                      __npowers_ 0829                       ?___fttol 0050  
                  __tdiv_to_l_ 200C                   ??__div_to_l_ 0007                    __smallconst 0800  
                   ?___asftadd 0053                       ?_isdigit 0001                     ?___asftmul 0049  
                   ?___asftsub 0031                      _eval_poly 251C    __end_of_MAX_7221_SCAN_LIMIT 2E02  
                _set_fan_speed 2142         __end_of_MIN_DUTY_CYCLE 0884                       ?_sprintf 0060  
               __size_of_frexp 0094                      _init_pins 2B5A                 __size_of_scale 040A  
               ___wmul@product 0015                       _LATCbits 000F8B                       _MAX_TEMP 087A  
                     _MIN_TEMP 087D             __end_of__div_to_l_ 1D7C               __CFG_WDTPS$32768 000000  
            set_fan_speed@temp 0060                       _SSP1CON1 000FC6                       _PSTR1CON 000FB9  
                     _SSP1STAT 000FC7     MAX_7221_WRITE_FLOAT@digits 009B                     _ADCON0bits 000FC2  
                   _ADCON1bits 000FC1                    __stringdata 089F                     _ADCON2bits 000FC0  
            ___wmul@multiplier 0011                     ?_eval_poly 0049                      main@ticks 009F  
               ?_set_fan_speed 0060               ?_SPI1_Initialize 0001                     ?_init_pins 0001  
                  _INTCON2bits 000FF1           _MAX_7221_WRITE_FLOAT 1D7C                      frexp@eptr 0004  
                     __Hrparam 0000                       __Lrparam 0000             __CFG_BOREN$SBORDIS 000000  
             __size_of___awdiv 00B0               __size_of___ftadd 01B8               __size_of___awmod 009C  
             __size_of___ftdiv 00E6                   ?_adc_convert 0001               __size_of___ftneg 0026  
             __size_of___lldiv 0086               __size_of___ftmul 00F8               __size_of___llmod 006A  
             __size_of___ftsub 0036               __size_of___fttol 00F6                       ___awtoft 2B06  
                     ___ftpack 274A                    _fround$1700 004F                    _fround$1701 004C  
                     ___lltoft 2AA2                     _ANSELAbits 000F5B                       ___lwtoft 2D32  
                  ??___asftadd 0058                     sprintf@exp 0088                    ??___asftmul 004E  
                  ??___asftsub 0036               __size_of_isdigit 002A                       __ptext10 2D32  
                     __ptext11 2436                       __ptext20 2C5C                       __ptext12 2DCE  
                     __ptext21 27F2                       __ptext13 2DAE                       __ptext30 2922  
                     __ptext22 25EE                       __ptext14 2E5E                       __ptext31 2BA8  
                     __ptext23 200C                       __ptext15 1D7C                       __ptext40 2DEC  
                     __ptext32 2C96                       __ptext24 1C10                       __ptext16 08A6  
                     __ptext41 2E02                       __ptext33 2BE4                       __ptext25 2AA2  
                     __ptext17 11A4                       __ptext42 2E3C                       __ptext34 2248  
                     __ptext26 2A38                       __ptext18 2D5E                       __ptext35 2C20  
                     __ptext27 29B2                       __ptext19 1804                       __ptext36 1A58  
                     __ptext28 2340                       __ptext37 274A                       __ptext29 2D88  
                     __ptext38 2CCC                       __ptext39 2E2A                   _SSP1CON1bits 000FC6  
                     __powers_ 0850     __end_of_MAX_7221_INTENSITY 2E18                _get_temperature 15AE  
             __size_of_sprintf 08FE         __size_of_configure_adc 0020         __size_of_configure_pwm 001E  
                __size_of_main 00AC          ?_MAX_7221_WRITE_FLOAT 0090        __size_of_MAX_7221_WRITE 0012  
                 _SSP1STATbits 000FC7                       main@temp 00A1                       log@coeff 0884  
              ??_set_fan_speed 0063                    ??_eval_poly 0050                       isdigit@c 0003  
     __size_of_init_oscillator 0012                       scale@scl 004F                    ??_init_pins 0001  
                    sprintf@ap 0074               __tdiv_to_l_@exp1 000F                      sprintf@vd 0076  
             __tdiv_to_l_@cntr 000E                      sprintf@sp 0060               __tdiv_to_l_@quot 000A  
             ___lldiv@dividend 0001         __size_of_MAX_7221_INIT 0036           __CFG_CPUDIV$NOCLKDIV 000000  
                _configure_adc 2DAE                   ?__tdiv_to_l_ 0001                  _configure_pwm 2DCE  
                     sprintf@c 008F                       sprintf@f 0062               ___lldiv@quotient 000A  
      __end_of_get_temperature 1804             __CFG_FOSC$INTOSCIO 000000         ??_MAX_7221_WRITE_FLOAT 0093  
         _get_temperature$1698 0066           _get_temperature$1699 0069  
