

Microchip Technology PIC18 LITE Macro Assembler V1.31 build 56723 
                                                                                               Sat Dec  3 20:53:24 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 56723
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	smallconst
    57  000800                     __psmallconst:
    58                           	opt stack 0
    59  000800  00                 	db	0
    60  000801                     _dpowers:
    61                           	opt stack 0
    62  000801  0001               	dw	1
    63  000803  0000               	dw	0
    64  000805  000A               	dw	10
    65  000807  0000               	dw	0
    66  000809  0064               	dw	100
    67  00080B  0000               	dw	0
    68  00080D  03E8               	dw	1000
    69  00080F  0000               	dw	0
    70  000811  2710               	dw	10000
    71  000813  0000               	dw	0
    72  000815  86A0               	dw	34464
    73  000817  0001               	dw	1
    74  000819  4240               	dw	16960
    75  00081B  000F               	dw	15
    76  00081D  9680               	dw	38528
    77  00081F  0098               	dw	152
    78  000821  E100               	dw	57600
    79  000823  05F5               	dw	1525
    80  000825  CA00               	dw	51712
    81  000827  3B9A               	dw	15258
    82  000829                     __end_of_dpowers:
    83                           	opt stack 0
    84  000829                     __npowers_:
    85                           	opt stack 0
    86  000829  00                 	db	0
    87  00082A  80                 	db	128
    88  00082B  3F                 	db	63
    89  00082C  CD                 	db	205
    90  00082D  CC                 	db	204
    91  00082E  3D                 	db	61
    92  00082F  D7                 	db	215
    93  000830  23                 	db	35
    94  000831  3C                 	db	60
    95  000832  12                 	db	18
    96  000833  83                 	db	131
    97  000834  3A                 	db	58
    98  000835  B7                 	db	183
    99  000836  D1                 	db	209
   100  000837  38                 	db	56
   101  000838  C6                 	db	198
   102  000839  27                 	db	39
   103  00083A  37                 	db	55
   104  00083B  38                 	db	56
   105  00083C  86                 	db	134
   106  00083D  35                 	db	53
   107  00083E  C0                 	db	192
   108  00083F  D6                 	db	214
   109  000840  33                 	db	51
   110  000841  CC                 	db	204
   111  000842  2B                 	db	43
   112  000843  32                 	db	50
   113  000844  70                 	db	112
   114  000845  89                 	db	137
   115  000846  30                 	db	48
   116  000847  E7                 	db	231
   117  000848  DB                 	db	219
   118  000849  2E                 	db	46
   119  00084A  E5                 	db	229
   120  00084B  3C                 	db	60
   121  00084C  1E                 	db	30
   122  00084D  42                 	db	66
   123  00084E  A2                 	db	162
   124  00084F  0D                 	db	13
   125  000850                     __end_of__npowers_:
   126                           	opt stack 0
   127  000850                     __powers_:
   128                           	opt stack 0
   129  000850  00                 	db	0
   130  000851  80                 	db	128
   131  000852  3F                 	db	63
   132  000853  00                 	db	0
   133  000854  20                 	db	32
   134  000855  41                 	db	65
   135  000856  00                 	db	0
   136  000857  C8                 	db	200
   137  000858  42                 	db	66
   138  000859  00                 	db	0
   139  00085A  7A                 	db	122
   140  00085B  44                 	db	68
   141  00085C  40                 	db	64
   142  00085D  1C                 	db	28
   143  00085E  46                 	db	70
   144  00085F  50                 	db	80
   145  000860  C3                 	db	195
   146  000861  47                 	db	71
   147  000862  24                 	db	36
   148  000863  74                 	db	116
   149  000864  49                 	db	73
   150  000865  97                 	db	151
   151  000866  18                 	db	24
   152  000867  4B                 	db	75
   153  000868  BC                 	db	188
   154  000869  BE                 	db	190
   155  00086A  4C                 	db	76
   156  00086B  6B                 	db	107
   157  00086C  6E                 	db	110
   158  00086D  4E                 	db	78
   159  00086E  03                 	db	3
   160  00086F  15                 	db	21
   161  000870  50                 	db	80
   162  000871  79                 	db	121
   163  000872  AD                 	db	173
   164  000873  60                 	db	96
   165  000874  F3                 	db	243
   166  000875  49                 	db	73
   167  000876  71                 	db	113
   168  000877                     __end_of__powers_:
   169                           	opt stack 0
   170  000877                     _ADC_RESOLUTION:
   171                           	opt stack 0
   172  000877  00                 	db	0
   173  000878  A0                 	db	160
   174  000879  3B                 	db	59
   175  00087A                     __end_of_ADC_RESOLUTION:
   176                           	opt stack 0
   177  00087A                     _MAX_TEMP:
   178                           	opt stack 0
   179  00087A  00                 	db	0
   180  00087B  20                 	db	32
   181  00087C  42                 	db	66
   182  00087D                     __end_of_MAX_TEMP:
   183                           	opt stack 0
   184  00087D                     _MIN_TEMP:
   185                           	opt stack 0
   186  00087D  00                 	db	0
   187  00087E  A0                 	db	160
   188  00087F  41                 	db	65
   189  000880                     __end_of_MIN_TEMP:
   190                           	opt stack 0
   191  000880                     _MAX_DUTY_CYCLE:
   192                           	opt stack 0
   193  000880  00FF               	dw	255
   194  000882                     __end_of_MAX_DUTY_CYCLE:
   195                           	opt stack 0
   196  000882                     _MIN_DUTY_CYCLE:
   197                           	opt stack 0
   198  000882  0064               	dw	100
   199  000884                     __end_of_MIN_DUTY_CYCLE:
   200                           	opt stack 0
   201  000884                     log@coeff:
   202                           	opt stack 0
   203  000884  00                 	db	0
   204  000885  00                 	db	0
   205  000886  00                 	db	0
   206  000887  00                 	db	0
   207  000888  80                 	db	128
   208  000889  3F                 	db	63
   209  00088A  F0                 	db	240
   210  00088B  FF                 	db	255
   211  00088C  BE                 	db	190
   212  00088D  E2                 	db	226
   213  00088E  A9                 	db	169
   214  00088F  3E                 	db	62
   215  000890  83                 	db	131
   216  000891  76                 	db	118
   217  000892  BE                 	db	190
   218  000893  AE                 	db	174
   219  000894  2B                 	db	43
   220  000895  3E                 	db	62
   221  000896  3C                 	db	60
   222  000897  C3                 	db	195
   223  000898  BD                 	db	189
   224  000899  D2                 	db	210
   225  00089A  13                 	db	19
   226  00089B  3D                 	db	61
   227  00089C  78                 	db	120
   228  00089D  D3                 	db	211
   229  00089E  BB                 	db	187
   230  00089F                     __end_oflog@coeff:
   231                           	opt stack 0
   232  0000                     _ACTCON	set	4021
   233  0000                     _ADCON0bits	set	4034
   234  0000                     _ADCON1bits	set	4033
   235  0000                     _ADCON2bits	set	4032
   236  0000                     _ADRESH	set	4036
   237  0000                     _ADRESL	set	4035
   238  0000                     _ANSELA	set	3931
   239  0000                     _ANSELAbits	set	3931
   240  0000                     _ANSELB	set	3932
   241  0000                     _ANSELC	set	3933
   242  0000                     _ANSELD	set	3934
   243  0000                     _ANSELE	set	3935
   244  0000                     _CCP1CON	set	4029
   245  0000                     _CCP1CONbits	set	4029
   246  0000                     _CCPR1L	set	4030
   247  0000                     _ECCP1AS	set	4022
   248  0000                     _INTCON2bits	set	4081
   249  0000                     _LATA	set	3977
   250  0000                     _LATB	set	3978
   251  0000                     _LATC	set	3979
   252  0000                     _LATCbits	set	3979
   253  0000                     _LATD	set	3980
   254  0000                     _LATE	set	3981
   255  0000                     _OSCCON	set	4051
   256  0000                     _OSCCON2	set	4050
   257  0000                     _OSCTUNE	set	3995
   258  0000                     _PR2	set	4027
   259  0000                     _PSTR1CON	set	4025
   260  0000                     _SSP1ADD	set	4040
   261  0000                     _SSP1BUF	set	4041
   262  0000                     _SSP1CON1	set	4038
   263  0000                     _SSP1CON1bits	set	4038
   264  0000                     _SSP1STAT	set	4039
   265  0000                     _SSP1STATbits	set	4039
   266  0000                     _T2CON	set	4026
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISAbits	set	3986
   269  0000                     _TRISB	set	3987
   270  0000                     _TRISC	set	3988
   271  0000                     _TRISCbits	set	3988
   272  0000                     _TRISD	set	3989
   273  0000                     _TRISE	set	3990
   274  00089F                     __stringdata:
   275                           	opt stack 0
   276  00089F                     STR_1:
   277  00089F  25                 	db	37
   278  0008A0  2E                 	db	46
   279  0008A1  31                 	db	49	;'1'
   280  0008A2  66                 	db	102	;'f'
   281  0008A3  00                 	db	0
   282  0008A4                     __end_of__stringdata:
   283                           	opt stack 0
   284                           
   285                           ; #config settings
   286  0008A4  00                 	db	0	; dummy byte at the end
   287  0000                     
   288                           	psect	cinit
   289  002DBE                     __pcinit:
   290                           	opt stack 0
   291  002DBE                     start_initialization:
   292                           	opt stack 0
   293  002DBE                     __initialization:
   294                           	opt stack 0
   295                           
   296                           ; Clear objects allocated to BANK0 (2 bytes)
   297  002DBE  0100               	movlb	0
   298  002DC0  6B9D               	clrf	(__pbssBANK0+1)& (0+255),b
   299  002DC2  6B9C               	clrf	__pbssBANK0& (0+255),b
   300  002DC4                     end_of_initialization:
   301                           	opt stack 0
   302  002DC4                     __end_of__initialization:
   303                           	opt stack 0
   304  002DC4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   305  002DC6  6EF8               	movwf	tblptru,c
   306  002DC8  0100               	movlb	0
   307  002DCA  EFAD  F012         	goto	_main	;jump to C main() function
   308                           tblptru	equ	0xFF8
   309                           
   310                           	psect	bssBANK0
   311  00009C                     __pbssBANK0:
   312                           	opt stack 0
   313  00009C                     _errno:
   314                           	opt stack 0
   315  00009C                     	ds	2
   316                           tblptru	equ	0xFF8
   317                           
   318                           	psect	cstackBANK0
   319  000060                     __pcstackBANK0:
   320                           	opt stack 0
   321  000060                     ?_sprintf:
   322                           	opt stack 0
   323  000060                     sprintf@sp:
   324                           	opt stack 0
   325  000060                     set_fan_speed@temp:
   326                           	opt stack 0
   327  000060                     get_temperature@Vout:
   328                           	opt stack 0
   329                           
   330                           ; 3 bytes @ 0x0
   331  000060                     	ds	2
   332  000062                     sprintf@f:
   333                           	opt stack 0
   334                           
   335                           ; 2 bytes @ 0x2
   336  000062                     	ds	1
   337  000063                     ??_set_fan_speed:
   338  000063                     get_temperature@Rth:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x3
   342  000063                     	ds	3
   343  000066                     _get_temperature$1696:
   344                           	opt stack 0
   345                           
   346                           ; 3 bytes @ 0x6
   347  000066                     	ds	1
   348  000067                     ??_sprintf:
   349  000067                     set_fan_speed@new_duty_cycle:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x7
   353  000067                     	ds	2
   354  000069                     set_fan_speed@tTemp:
   355                           	opt stack 0
   356  000069                     _get_temperature$1697:
   357                           	opt stack 0
   358                           
   359                           ; 3 bytes @ 0x9
   360  000069                     	ds	3
   361  00006C                     get_temperature@R1:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0xC
   365  00006C                     	ds	1
   366  00006D                     _sprintf$1701:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0xD
   370  00006D                     	ds	1
   371  00006E                     get_temperature@Tn:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0xE
   375  00006E                     	ds	2
   376  000070                     _sprintf$976:
   377                           	opt stack 0
   378                           
   379                           ; 4 bytes @ 0x10
   380  000070                     	ds	1
   381  000071                     get_temperature@R2:
   382                           	opt stack 0
   383                           
   384                           ; 2 bytes @ 0x11
   385  000071                     	ds	2
   386  000073                     get_temperature@Bth:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x13
   390  000073                     	ds	1
   391  000074                     sprintf@ap:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x14
   395  000074                     	ds	1
   396  000075                     get_temperature@temp:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x15
   400  000075                     	ds	1
   401  000076                     sprintf@vd:
   402                           	opt stack 0
   403                           
   404                           ; 4 bytes @ 0x16
   405  000076                     	ds	4
   406  00007A                     sprintf@vd_978:
   407                           	opt stack 0
   408                           
   409                           ; 4 bytes @ 0x1A
   410  00007A                     	ds	4
   411  00007E                     sprintf@flag:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0x1E
   415  00007E                     	ds	2
   416  000080                     sprintf@_val:
   417                           	opt stack 0
   418                           
   419                           ; 5 bytes @ 0x20
   420  000080                     	ds	5
   421  000085                     sprintf@integ:
   422                           	opt stack 0
   423                           
   424                           ; 3 bytes @ 0x25
   425  000085                     	ds	3
   426  000088                     sprintf@exp:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x28
   430  000088                     	ds	2
   431  00008A                     sprintf@prec:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x2A
   435  00008A                     	ds	2
   436  00008C                     sprintf@fval:
   437                           	opt stack 0
   438                           
   439                           ; 3 bytes @ 0x2C
   440  00008C                     	ds	3
   441  00008F                     sprintf@c:
   442                           	opt stack 0
   443                           
   444                           ; 1 bytes @ 0x2F
   445  00008F                     	ds	1
   446  000090                     MAX_7221_WRITE_FLOAT@value:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x30
   450  000090                     	ds	3
   451  000093                     MAX_7221_WRITE_FLOAT@digits:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x33
   455  000093                     	ds	4
   456  000097                     main@temp:
   457                           	opt stack 0
   458                           
   459                           ; 3 bytes @ 0x37
   460  000097                     	ds	3
   461  00009A                     main@ticks:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x3A
   465  00009A                     	ds	2
   466                           tblptru	equ	0xFF8
   467                           
   468                           	psect	cstackCOMRAM
   469  000001                     __pcstackCOMRAM:
   470                           	opt stack 0
   471  000001                     ??_isdigit:
   472  000001                     ?_adc_convert:
   473                           	opt stack 0
   474  000001                     ?___awmod:
   475                           	opt stack 0
   476  000001                     ?___ftpack:
   477                           	opt stack 0
   478  000001                     ?_frexp:
   479                           	opt stack 0
   480  000001                     ?__tdiv_to_l_:
   481                           	opt stack 0
   482  000001                     ?__div_to_l_:
   483                           	opt stack 0
   484  000001                     ?___lldiv:
   485                           	opt stack 0
   486  000001                     ?___llmod:
   487                           	opt stack 0
   488  000001                     SPI1_Exchange8bit@data:
   489                           	opt stack 0
   490  000001                     adc_convert@channel:
   491                           	opt stack 0
   492  000001                     ___awmod@dividend:
   493                           	opt stack 0
   494  000001                     __div_to_l_@f1:
   495                           	opt stack 0
   496  000001                     ___ftpack@arg:
   497                           	opt stack 0
   498  000001                     __tdiv_to_l_@f1:
   499                           	opt stack 0
   500  000001                     ___ftge@ff1:
   501                           	opt stack 0
   502  000001                     frexp@value:
   503                           	opt stack 0
   504  000001                     ___lldiv@dividend:
   505                           	opt stack 0
   506  000001                     ___llmod@dividend:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x0
   510  000001                     	ds	1
   511  000002                     MAX_7221_INTENSITY@value:
   512                           	opt stack 0
   513  000002                     MAX_7221_SCAN_LIMIT@limit:
   514                           	opt stack 0
   515  000002                     MAX_7221_WRITE@value:
   516                           	opt stack 0
   517  000002                     _isdigit$1251:
   518                           	opt stack 0
   519                           
   520                           ; 1 bytes @ 0x1
   521  000002                     	ds	1
   522  000003                     ??_adc_convert:
   523  000003                     MAX_7221_WRITE@reg:
   524                           	opt stack 0
   525  000003                     isdigit@c:
   526                           	opt stack 0
   527  000003                     ___awmod@divisor:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x2
   531  000003                     	ds	1
   532  000004                     ??_MAX_7221_INIT:
   533  000004                     ___ftpack@exp:
   534                           	opt stack 0
   535  000004                     frexp@eptr:
   536                           	opt stack 0
   537  000004                     __div_to_l_@f2:
   538                           	opt stack 0
   539  000004                     __tdiv_to_l_@f2:
   540                           	opt stack 0
   541  000004                     ___ftge@ff2:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x3
   545  000004                     	ds	1
   546  000005                     ??___awmod:
   547  000005                     ___ftpack@sign:
   548                           	opt stack 0
   549  000005                     ___lldiv@divisor:
   550                           	opt stack 0
   551  000005                     ___llmod@divisor:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x4
   555  000005                     	ds	1
   556  000006                     ??___ftpack:
   557  000006                     ??_frexp:
   558  000006                     ___awmod@counter:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x5
   562  000006                     	ds	1
   563  000007                     ??__tdiv_to_l_:
   564  000007                     ??__div_to_l_:
   565  000007                     ??___ftge:
   566  000007                     ___awmod@sign:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x6
   570  000007                     	ds	1
   571  000008                     ?___awdiv:
   572                           	opt stack 0
   573  000008                     ___awdiv@dividend:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x7
   577  000008                     	ds	1
   578  000009                     ??___lldiv:
   579  000009                     ??___llmod:
   580  000009                     ?___awtoft:
   581                           	opt stack 0
   582  000009                     ?___lltoft:
   583                           	opt stack 0
   584  000009                     ___awtoft@c:
   585                           	opt stack 0
   586  000009                     ___lltoft@c:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x8
   590  000009                     	ds	1
   591  00000A                     ___llmod@counter:
   592                           	opt stack 0
   593  00000A                     ___awdiv@divisor:
   594                           	opt stack 0
   595  00000A                     __tdiv_to_l_@quot:
   596                           	opt stack 0
   597  00000A                     ___lldiv@quotient:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x9
   601  00000A                     	ds	1
   602  00000B                     __div_to_l_@quot:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0xA
   606  00000B                     	ds	1
   607  00000C                     ??___awdiv:
   608  00000C                     ??___awtoft:
   609                           
   610                           ; 0 bytes @ 0xB
   611  00000C                     	ds	1
   612  00000D                     ??___lltoft:
   613  00000D                     ___awdiv@counter:
   614                           	opt stack 0
   615  00000D                     ___awtoft@sign:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0xC
   619  00000D                     	ds	1
   620  00000E                     ___awdiv@sign:
   621                           	opt stack 0
   622  00000E                     __tdiv_to_l_@cntr:
   623                           	opt stack 0
   624  00000E                     ___lldiv@counter:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0xD
   628  00000E                     	ds	1
   629  00000F                     __div_to_l_@cntr:
   630                           	opt stack 0
   631  00000F                     __tdiv_to_l_@exp1:
   632                           	opt stack 0
   633  00000F                     ___awdiv@quotient:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0xE
   637  00000F                     	ds	1
   638  000010                     __div_to_l_@exp1:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0xF
   642  000010                     	ds	1
   643  000011                     ?___wmul:
   644                           	opt stack 0
   645  000011                     ___lltoft@exp:
   646                           	opt stack 0
   647  000011                     ___wmul@multiplier:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x10
   651  000011                     	ds	2
   652  000013                     ___wmul@multiplicand:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x12
   656  000013                     	ds	2
   657  000015                     ___wmul@product:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x14
   661  000015                     	ds	2
   662  000017                     ?___lwtoft:
   663                           	opt stack 0
   664  000017                     ___lwtoft@c:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x16
   668  000017                     	ds	3
   669  00001A                     ??___lwtoft:
   670                           
   671                           ; 0 bytes @ 0x19
   672  00001A                     	ds	2
   673  00001C                     ?___ftneg:
   674                           	opt stack 0
   675  00001C                     ___ftneg@f1:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x1B
   679  00001C                     	ds	3
   680  00001F                     ?___ftadd:
   681                           	opt stack 0
   682  00001F                     ___ftadd@f1:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x1E
   686  00001F                     	ds	3
   687  000022                     ___ftadd@f2:
   688                           	opt stack 0
   689                           
   690                           ; 3 bytes @ 0x21
   691  000022                     	ds	3
   692  000025                     ??___ftadd:
   693                           
   694                           ; 0 bytes @ 0x24
   695  000025                     	ds	3
   696  000028                     ___ftadd@sign:
   697                           	opt stack 0
   698                           
   699                           ; 1 bytes @ 0x27
   700  000028                     	ds	1
   701  000029                     ___ftadd@exp2:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x28
   705  000029                     	ds	1
   706  00002A                     ___ftadd@exp1:
   707                           	opt stack 0
   708                           
   709                           ; 1 bytes @ 0x29
   710  00002A                     	ds	1
   711  00002B                     ?___ftdiv:
   712                           	opt stack 0
   713  00002B                     ?___ftsub:
   714                           	opt stack 0
   715  00002B                     ___ftdiv@f1:
   716                           	opt stack 0
   717  00002B                     ___ftsub@f1:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x2A
   721  00002B                     	ds	3
   722  00002E                     ___ftdiv@f2:
   723                           	opt stack 0
   724  00002E                     ___ftsub@f2:
   725                           	opt stack 0
   726                           
   727                           ; 3 bytes @ 0x2D
   728  00002E                     	ds	3
   729  000031                     ??___ftdiv:
   730  000031                     ___asftsub@f1p:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x30
   734  000031                     	ds	2
   735  000033                     ___asftsub@f2:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x32
   739  000033                     	ds	1
   740  000034                     ___ftdiv@cntr:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x33
   744  000034                     	ds	1
   745  000035                     ___ftdiv@f3:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x34
   749  000035                     	ds	1
   750  000036                     
   751                           ; 0 bytes @ 0x35
   752  000036                     	ds	2
   753  000038                     ___ftdiv@exp:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x37
   757  000038                     	ds	1
   758  000039                     ___ftdiv@sign:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x38
   762  000039                     	ds	1
   763  00003A                     ?___ftmul:
   764                           	opt stack 0
   765  00003A                     ___ftmul@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x39
   769  00003A                     	ds	3
   770  00003D                     ___ftmul@f2:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x3C
   774  00003D                     	ds	3
   775  000040                     ??___ftmul:
   776                           
   777                           ; 0 bytes @ 0x3F
   778  000040                     	ds	3
   779  000043                     ___ftmul@exp:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x42
   783  000043                     	ds	1
   784  000044                     ___ftmul@f3_as_product:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0x43
   788  000044                     	ds	3
   789  000047                     ___ftmul@cntr:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x46
   793  000047                     	ds	1
   794  000048                     ___ftmul@sign:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x47
   798  000048                     	ds	1
   799  000049                     ?_eval_poly:
   800                           	opt stack 0
   801  000049                     ?_fround:
   802                           	opt stack 0
   803  000049                     ?_scale:
   804                           	opt stack 0
   805  000049                     ___asftmul@f1p:
   806                           	opt stack 0
   807  000049                     eval_poly@x:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x48
   811  000049                     	ds	2
   812  00004B                     ___asftmul@f2:
   813                           	opt stack 0
   814                           
   815                           ; 3 bytes @ 0x4A
   816  00004B                     	ds	1
   817  00004C                     eval_poly@d:
   818                           	opt stack 0
   819  00004C                     _fround$1699:
   820                           	opt stack 0
   821  00004C                     _scale$1700:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x4B
   825  00004C                     	ds	2
   826  00004E                     eval_poly@n:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x4D
   830  00004E                     	ds	1
   831  00004F                     scale@scl:
   832                           	opt stack 0
   833  00004F                     _fround$1698:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x4E
   837  00004F                     	ds	1
   838  000050                     ??_eval_poly:
   839  000050                     ?___fttol:
   840                           	opt stack 0
   841  000050                     ___fttol@f1:
   842                           	opt stack 0
   843                           
   844                           ; 3 bytes @ 0x4F
   845  000050                     	ds	2
   846  000052                     fround@prec:
   847                           	opt stack 0
   848  000052                     eval_poly@res:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x51
   852  000052                     	ds	1
   853  000053                     ___asftadd@f1p:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x52
   857  000053                     	ds	1
   858  000054                     ??___fttol:
   859                           
   860                           ; 0 bytes @ 0x53
   861  000054                     	ds	1
   862  000055                     ?_log:
   863                           	opt stack 0
   864  000055                     ___asftadd@f2:
   865                           	opt stack 0
   866  000055                     log@x:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x54
   870  000055                     	ds	3
   871  000058                     log@exponent:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x57
   875  000058                     	ds	1
   876  000059                     ___fttol@sign1:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x58
   880  000059                     	ds	1
   881  00005A                     ?_get_temperature:
   882                           	opt stack 0
   883  00005A                     get_temperature@sensor:
   884                           	opt stack 0
   885  00005A                     ___fttol@lval:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x59
   889  00005A                     	ds	3
   890  00005D                     
   891                           ; 0 bytes @ 0x5C
   892  00005D                     	ds	1
   893  00005E                     ___fttol@exp1:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x5D
   897  00005E                     	ds	1
   898  00005F                     ??_MAX_7221_WRITE_FLOAT:
   899                           
   900                           ; 0 bytes @ 0x5E
   901  00005F                     	ds	1
   902  000060                     tblptru	equ	0xFF8
   903                           
   904                           ; 0 bytes @ 0x5F
   905 ;;
   906 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   907 ;;
   908 ;; *************** function _main *****************
   909 ;; Defined at:
   910 ;;		line 121 in file "main.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  temp            3   55[BANK0 ] float 
   915 ;;  ticks           2   58[BANK0 ] int 
   916 ;; Return value:  Size  Location     Type
   917 ;;		None               void
   918 ;; Registers used:
   919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   920 ;; Tracked objects:
   921 ;;		On entry : 0/0
   922 ;;		On exit  : 0/0
   923 ;;		Unchanged: 0/0
   924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   925 ;;      Params:         0       0       0       0       0       0       0       0       0
   926 ;;      Locals:         0       5       0       0       0       0       0       0       0
   927 ;;      Temps:          0       0       0       0       0       0       0       0       0
   928 ;;      Totals:         0       5       0       0       0       0       0       0       0
   929 ;;Total ram usage:        5 bytes
   930 ;; Hardware stack levels required when called:    6
   931 ;; This function calls:
   932 ;;		_MAX_7221_INIT
   933 ;;		_MAX_7221_WRITE_FLOAT
   934 ;;		_SPI1_Initialize
   935 ;;		___awmod
   936 ;;		_configure_adc
   937 ;;		_configure_pwm
   938 ;;		_get_temperature
   939 ;;		_init_oscillator
   940 ;;		_init_pins
   941 ;;		_set_fan_speed
   942 ;; This function is called by:
   943 ;;		Startup code after reset
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           	psect	text0
   948  00255A                     __ptext0:
   949                           	opt stack 0
   950  00255A                     _main:
   951                           	opt stack 24
   952                           
   953                           ;main.c: 123: init_pins();
   954                           
   955                           ;incstack = 0
   956  00255A  EC69  F015         	call	_init_pins	;wreg free
   957                           
   958                           ;main.c: 124: init_oscillator();
   959  00255E  ECCD  F016         	call	_init_oscillator	;wreg free
   960                           
   961                           ;main.c: 125: SPI1_Initialize();
   962  002562  ECE7  F016         	call	_SPI1_Initialize	;wreg free
   963                           
   964                           ;main.c: 127: float temp = 0;
   965  002566  0E00               	movlw	0
   966  002568  0100               	movlb	0	; () banked
   967  00256A  0100               	movlb	0	; () banked
   968  00256C  6F97               	movwf	main@temp& (0+255),b
   969  00256E  0E00               	movlw	0
   970  002570  0100               	movlb	0	; () banked
   971  002572  0100               	movlb	0	; () banked
   972  002574  6F98               	movwf	(main@temp+1)& (0+255),b
   973  002576  0E00               	movlw	0
   974  002578  0100               	movlb	0	; () banked
   975  00257A  0100               	movlb	0	; () banked
   976  00257C  6F99               	movwf	(main@temp+2)& (0+255),b
   977                           
   978                           ; BSR set to: 0
   979                           ;main.c: 131: TRISCbits.RC2 = 0;
   980  00257E  9494               	bcf	3988,2,c	;volatile
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 133: configure_adc();
   984  002580  EC8D  F016         	call	_configure_adc	;wreg free
   985                           
   986                           ;main.c: 134: configure_pwm();
   987  002584  EC9D  F016         	call	_configure_pwm	;wreg free
   988                           
   989                           ;main.c: 135: int ticks = 0;
   990  002588  0E00               	movlw	0
   991  00258A  0100               	movlb	0	; () banked
   992  00258C  0100               	movlb	0	; () banked
   993  00258E  6F9B               	movwf	(main@ticks+1)& (0+255),b
   994  002590  0E00               	movlw	0
   995  002592  0100               	movlb	0	; () banked
   996  002594  6F9A               	movwf	main@ticks& (0+255),b
   997  002596                     l106:
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 138: {
  1001                           ;main.c: 139: MAX_7221_INIT();
  1002  002596  EC65  F016         	call	_MAX_7221_INIT	;wreg free
  1003                           
  1004                           ;main.c: 140: temp = get_temperature(0);
  1005  00259A  0E00               	movlw	0
  1006  00259C  6E5B               	movwf	get_temperature@sensor+1,c
  1007  00259E  0E00               	movlw	0
  1008  0025A0  6E5A               	movwf	get_temperature@sensor,c
  1009  0025A2  ECD7  F00A         	call	_get_temperature	;wreg free
  1010  0025A6  C05A  F097         	movff	?_get_temperature,main@temp
  1011  0025AA  C05B  F098         	movff	?_get_temperature+1,main@temp+1
  1012  0025AE  C05C  F099         	movff	?_get_temperature+2,main@temp+2
  1013                           
  1014                           ;main.c: 141: set_fan_speed(temp);
  1015  0025B2  C097  F060         	movff	main@temp,set_fan_speed@temp
  1016  0025B6  C098  F061         	movff	main@temp+1,set_fan_speed@temp+1
  1017  0025BA  C099  F062         	movff	main@temp+2,set_fan_speed@temp+2
  1018  0025BE  ECF6  F00F         	call	_set_fan_speed	;wreg free
  1019                           
  1020                           ;main.c: 142: if(ticks % 80 == 0) {
  1021  0025C2  C09A  F001         	movff	main@ticks,___awmod@dividend
  1022  0025C6  C09B  F002         	movff	main@ticks+1,___awmod@dividend+1
  1023  0025CA  0E00               	movlw	0
  1024  0025CC  6E04               	movwf	___awmod@divisor+1,c
  1025  0025CE  0E50               	movlw	80
  1026  0025D0  6E03               	movwf	___awmod@divisor,c
  1027  0025D2  ECB5  F013         	call	___awmod	;wreg free
  1028  0025D6  5002               	movf	?___awmod+1,w,c
  1029  0025D8  1001               	iorwf	?___awmod,w,c
  1030  0025DA  A4D8               	btfss	status,2,c
  1031  0025DC  D015               	goto	l5199
  1032                           
  1033                           ;main.c: 143: MAX_7221_WRITE_FLOAT(21.1);
  1034  0025DE  0ECD               	movlw	205
  1035  0025E0  0100               	movlb	0	; () banked
  1036  0025E2  0100               	movlb	0	; () banked
  1037  0025E4  6F90               	movwf	MAX_7221_WRITE_FLOAT@value& (0+255),b
  1038  0025E6  0EA8               	movlw	168
  1039  0025E8  0100               	movlb	0	; () banked
  1040  0025EA  0100               	movlb	0	; () banked
  1041  0025EC  6F91               	movwf	(MAX_7221_WRITE_FLOAT@value+1)& (0+255),b
  1042  0025EE  0E41               	movlw	65
  1043  0025F0  0100               	movlb	0	; () banked
  1044  0025F2  0100               	movlb	0	; () banked
  1045  0025F4  6F92               	movwf	(MAX_7221_WRITE_FLOAT@value+2)& (0+255),b
  1046  0025F6  EC4C  F012         	call	_MAX_7221_WRITE_FLOAT	;wreg free
  1047                           
  1048                           ;main.c: 144: ticks = 0;
  1049  0025FA  0E00               	movlw	0
  1050  0025FC  0100               	movlb	0	; () banked
  1051  0025FE  0100               	movlb	0	; () banked
  1052  002600  6F9B               	movwf	(main@ticks+1)& (0+255),b
  1053  002602  0E00               	movlw	0
  1054  002604  0100               	movlb	0	; () banked
  1055  002606  6F9A               	movwf	main@ticks& (0+255),b
  1056  002608                     l5199:
  1057                           
  1058                           ;main.c: 145: }
  1059                           ;main.c: 146: ticks++;
  1060  002608  0100               	movlb	0	; () banked
  1061  00260A  0100               	movlb	0	; () banked
  1062  00260C  4B9A               	infsnz	main@ticks& (0+255),f,b
  1063  00260E  2B9B               	incf	(main@ticks+1)& (0+255),f,b
  1064  002610  D7C2               	goto	l106
  1065  002612                     __end_of_main:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           status	equ	0xFD8
  1069                           
  1070 ;; *************** function _set_fan_speed *****************
  1071 ;; Defined at:
  1072 ;;		line 100 in file "main.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;  temp            3    0[BANK0 ] float 
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;  new_duty_cyc    2    7[BANK0 ] int 
  1077 ;;  tTemp           3    9[BANK0 ] float 
  1078 ;; Return value:  Size  Location     Type
  1079 ;;		None               void
  1080 ;; Registers used:
  1081 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  1082 ;; Tracked objects:
  1083 ;;		On entry : 0/0
  1084 ;;		On exit  : 0/0
  1085 ;;		Unchanged: 0/0
  1086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1087 ;;      Params:         0       3       0       0       0       0       0       0       0
  1088 ;;      Locals:         0       5       0       0       0       0       0       0       0
  1089 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1090 ;;      Totals:         0      12       0       0       0       0       0       0       0
  1091 ;;Total ram usage:       12 bytes
  1092 ;; Hardware stack levels used:    1
  1093 ;; Hardware stack levels required when called:    2
  1094 ;; This function calls:
  1095 ;;		___awtoft
  1096 ;;		___ftdiv
  1097 ;;		___ftge
  1098 ;;		___ftmul
  1099 ;;		___fttol
  1100 ;; This function is called by:
  1101 ;;		_main
  1102 ;; This function uses a non-reentrant model
  1103 ;;
  1104                           
  1105                           	psect	text1
  1106  001FEC                     __ptext1:
  1107                           	opt stack 0
  1108  001FEC                     _set_fan_speed:
  1109                           	opt stack 27
  1110                           
  1111                           ;main.c: 102: if(temp < MIN_TEMP)
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;incstack = 0
  1115  001FEC  C060  F001         	movff	set_fan_speed@temp,___ftge@ff1
  1116  001FF0  C061  F002         	movff	set_fan_speed@temp+1,___ftge@ff1+1
  1117  001FF4  C062  F003         	movff	set_fan_speed@temp+2,___ftge@ff1+2
  1118  001FF8  0E7D               	movlw	low _MIN_TEMP
  1119  001FFA  6EF6               	movwf	tblptrl,c
  1120  001FFC  0E08               	movlw	high _MIN_TEMP
  1121  001FFE  6EF7               	movwf	tblptrh,c
  1122  002000  0009               	tblrd		*+
  1123  002002  CFF5 F004          	movff	tablat,___ftge@ff2
  1124  002006  0009               	tblrd		*+
  1125  002008  CFF5 F005          	movff	tablat,___ftge@ff2+1
  1126  00200C  000A               	tblrd		*-
  1127  00200E  CFF5 F006          	movff	tablat,___ftge@ff2+2
  1128  002012  EC4D  F014         	call	___ftge	;wreg free
  1129  002016  B0D8               	btfsc	status,0,c
  1130  002018  D008               	goto	l5123
  1131                           
  1132                           ;main.c: 103: {
  1133                           ;main.c: 104: CCPR1L = MIN_DUTY_CYCLE;
  1134  00201A  0E82               	movlw	low _MIN_DUTY_CYCLE
  1135  00201C  6EF6               	movwf	tblptrl,c
  1136  00201E  0E08               	movlw	high _MIN_DUTY_CYCLE
  1137  002020  6EF7               	movwf	tblptrh,c
  1138  002022  0008               	tblrd		*
  1139  002024  CFF5 FFBE          	movff	tablat,4030	;volatile
  1140                           
  1141                           ;main.c: 105: }
  1142  002028  0012               	return	
  1143  00202A                     l5123:
  1144                           
  1145                           ;main.c: 106: else
  1146                           ;main.c: 107: {
  1147                           ;main.c: 108: float tTemp = temp / MAX_TEMP;
  1148  00202A  C060  F02B         	movff	set_fan_speed@temp,___ftdiv@f1
  1149  00202E  C061  F02C         	movff	set_fan_speed@temp+1,___ftdiv@f1+1
  1150  002032  C062  F02D         	movff	set_fan_speed@temp+2,___ftdiv@f1+2
  1151  002036  0E7A               	movlw	low _MAX_TEMP
  1152  002038  6EF6               	movwf	tblptrl,c
  1153  00203A  0E08               	movlw	high _MAX_TEMP
  1154  00203C  6EF7               	movwf	tblptrh,c
  1155  00203E  0009               	tblrd		*+
  1156  002040  CFF5 F02E          	movff	tablat,___ftdiv@f2
  1157  002044  0009               	tblrd		*+
  1158  002046  CFF5 F02F          	movff	tablat,___ftdiv@f2+1
  1159  00204A  000A               	tblrd		*-
  1160  00204C  CFF5 F030          	movff	tablat,___ftdiv@f2+2
  1161  002050  EC70  F011         	call	___ftdiv	;wreg free
  1162  002054  C02B  F069         	movff	?___ftdiv,set_fan_speed@tTemp
  1163  002058  C02C  F06A         	movff	?___ftdiv+1,set_fan_speed@tTemp+1
  1164  00205C  C02D  F06B         	movff	?___ftdiv+2,set_fan_speed@tTemp+2
  1165                           
  1166                           ;main.c: 109: if(tTemp >= 1)
  1167  002060  C069  F001         	movff	set_fan_speed@tTemp,___ftge@ff1
  1168  002064  C06A  F002         	movff	set_fan_speed@tTemp+1,___ftge@ff1+1
  1169  002068  C06B  F003         	movff	set_fan_speed@tTemp+2,___ftge@ff1+2
  1170  00206C  0E00               	movlw	0
  1171  00206E  6E04               	movwf	___ftge@ff2,c
  1172  002070  0E80               	movlw	128
  1173  002072  6E05               	movwf	___ftge@ff2+1,c
  1174  002074  0E3F               	movlw	63
  1175  002076  6E06               	movwf	___ftge@ff2+2,c
  1176  002078  EC4D  F014         	call	___ftge	;wreg free
  1177  00207C  A0D8               	btfss	status,0,c
  1178  00207E  D008               	goto	l5129
  1179                           
  1180                           ;main.c: 110: {
  1181                           ;main.c: 111: CCPR1L = MAX_DUTY_CYCLE;
  1182  002080  0E80               	movlw	low _MAX_DUTY_CYCLE
  1183  002082  6EF6               	movwf	tblptrl,c
  1184  002084  0E08               	movlw	high _MAX_DUTY_CYCLE
  1185  002086  6EF7               	movwf	tblptrh,c
  1186  002088  0008               	tblrd		*
  1187  00208A  CFF5 FFBE          	movff	tablat,4030	;volatile
  1188                           
  1189                           ;main.c: 112: }
  1190  00208E  0012               	return	
  1191  002090                     l5129:
  1192                           
  1193                           ;main.c: 113: else
  1194                           ;main.c: 114: {
  1195                           ;main.c: 115: int new_duty_cycle = (int)MAX_DUTY_CYCLE * tTemp;
  1196  002090  C069  F03D         	movff	set_fan_speed@tTemp,___ftmul@f2
  1197  002094  C06A  F03E         	movff	set_fan_speed@tTemp+1,___ftmul@f2+1
  1198  002098  C06B  F03F         	movff	set_fan_speed@tTemp+2,___ftmul@f2+2
  1199  00209C  0E80               	movlw	low _MAX_DUTY_CYCLE
  1200  00209E  6EF6               	movwf	tblptrl,c
  1201  0020A0  0E08               	movlw	high _MAX_DUTY_CYCLE
  1202  0020A2  6EF7               	movwf	tblptrh,c
  1203  0020A4  0009               	tblrd		*+
  1204  0020A6  CFF5 F009          	movff	tablat,___awtoft@c
  1205  0020AA  000A               	tblrd		*-
  1206  0020AC  CFF5 F00A          	movff	tablat,___awtoft@c+1
  1207  0020B0  EC3F  F015         	call	___awtoft	;wreg free
  1208  0020B4  C009  F03A         	movff	?___awtoft,___ftmul@f1
  1209  0020B8  C00A  F03B         	movff	?___awtoft+1,___ftmul@f1+1
  1210  0020BC  C00B  F03C         	movff	?___awtoft+2,___ftmul@f1+2
  1211  0020C0  EC79  F010         	call	___ftmul	;wreg free
  1212  0020C4  C03A  F050         	movff	?___ftmul,___fttol@f1
  1213  0020C8  C03B  F051         	movff	?___ftmul+1,___fttol@f1+1
  1214  0020CC  C03C  F052         	movff	?___ftmul+2,___fttol@f1+2
  1215  0020D0  ECF5  F010         	call	___fttol	;wreg free
  1216  0020D4  C050  F063         	movff	?___fttol,??_set_fan_speed
  1217  0020D8  C051  F064         	movff	?___fttol+1,??_set_fan_speed+1
  1218  0020DC  C052  F065         	movff	?___fttol+2,??_set_fan_speed+2
  1219  0020E0  C053  F066         	movff	?___fttol+3,??_set_fan_speed+3
  1220  0020E4  C063  F067         	movff	??_set_fan_speed,set_fan_speed@new_duty_cycle
  1221  0020E8  C064  F068         	movff	??_set_fan_speed+1,set_fan_speed@new_duty_cycle+1
  1222                           
  1223                           ;main.c: 116: CCPR1L = new_duty_cycle;
  1224  0020EC  C067  FFBE         	movff	set_fan_speed@new_duty_cycle,4030	;volatile
  1225  0020F0  0012               	return	
  1226  0020F2                     __end_of_set_fan_speed:
  1227                           	opt stack 0
  1228                           tblptru	equ	0xFF8
  1229                           tblptrh	equ	0xFF7
  1230                           tblptrl	equ	0xFF6
  1231                           tablat	equ	0xFF5
  1232                           status	equ	0xFD8
  1233                           
  1234 ;; *************** function _init_pins *****************
  1235 ;; Defined at:
  1236 ;;		line 33 in file "main.c"
  1237 ;; Parameters:    Size  Location     Type
  1238 ;;		None
  1239 ;; Auto vars:     Size  Location     Type
  1240 ;;		None
  1241 ;; Return value:  Size  Location     Type
  1242 ;;		None               void
  1243 ;; Registers used:
  1244 ;;		wreg, status,2
  1245 ;; Tracked objects:
  1246 ;;		On entry : 0/0
  1247 ;;		On exit  : 0/0
  1248 ;;		Unchanged: 0/0
  1249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1250 ;;      Params:         0       0       0       0       0       0       0       0       0
  1251 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1252 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1253 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1254 ;;Total ram usage:        0 bytes
  1255 ;; Hardware stack levels used:    1
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           	psect	text2
  1264  002AD2                     __ptext2:
  1265                           	opt stack 0
  1266  002AD2                     _init_pins:
  1267                           	opt stack 29
  1268                           
  1269                           ;main.c: 35: LATE = 0x00;
  1270                           
  1271                           ;incstack = 0
  1272  002AD2  0E00               	movlw	0
  1273  002AD4  6E8D               	movwf	3981,c	;volatile
  1274                           
  1275                           ;main.c: 36: LATD = 0x00;
  1276  002AD6  0E00               	movlw	0
  1277  002AD8  6E8C               	movwf	3980,c	;volatile
  1278                           
  1279                           ;main.c: 37: LATA = 0x00;
  1280  002ADA  0E00               	movlw	0
  1281  002ADC  6E89               	movwf	3977,c	;volatile
  1282                           
  1283                           ;main.c: 38: LATB = 0x00;
  1284  002ADE  0E00               	movlw	0
  1285  002AE0  6E8A               	movwf	3978,c	;volatile
  1286                           
  1287                           ;main.c: 39: LATC = 0x00;
  1288  002AE2  0E00               	movlw	0
  1289  002AE4  6E8B               	movwf	3979,c	;volatile
  1290                           
  1291                           ;main.c: 44: TRISE = 0x07;
  1292  002AE6  0E07               	movlw	7
  1293  002AE8  6E96               	movwf	3990,c	;volatile
  1294                           
  1295                           ;main.c: 45: TRISA = 0xFF;
  1296  002AEA  6892               	setf	3986,c	;volatile
  1297                           
  1298                           ;main.c: 46: TRISB = 0xF5;
  1299  002AEC  0EF5               	movlw	245
  1300  002AEE  6E93               	movwf	3987,c	;volatile
  1301                           
  1302                           ;main.c: 47: TRISC = 0x87;
  1303  002AF0  0E87               	movlw	135
  1304  002AF2  6E94               	movwf	3988,c	;volatile
  1305                           
  1306                           ;main.c: 48: TRISD = 0xFF;
  1307  002AF4  6895               	setf	3989,c	;volatile
  1308                           
  1309                           ;main.c: 53: ANSELC = 0x84;
  1310  002AF6  0E84               	movlw	132
  1311  002AF8  010F               	movlb	15	; () banked
  1312  002AFA  010F               	movlb	15	; () banked
  1313  002AFC  6F5D               	movwf	93,b	;volatile
  1314                           
  1315                           ;main.c: 54: ANSELB = 0x34;
  1316  002AFE  0E34               	movlw	52
  1317  002B00  010F               	movlb	15	; () banked
  1318  002B02  010F               	movlb	15	; () banked
  1319  002B04  6F5C               	movwf	92,b	;volatile
  1320                           
  1321                           ; BSR set to: 15
  1322                           ;main.c: 55: ANSELD = 0xFF;
  1323  002B06  010F               	movlb	15	; () banked
  1324  002B08  010F               	movlb	15	; () banked
  1325  002B0A  695E               	setf	94,b	;volatile
  1326                           
  1327                           ;main.c: 56: ANSELE = 0x07;
  1328  002B0C  0E07               	movlw	7
  1329  002B0E  010F               	movlb	15	; () banked
  1330  002B10  010F               	movlb	15	; () banked
  1331  002B12  6F5F               	movwf	95,b	;volatile
  1332                           
  1333                           ;main.c: 57: ANSELA = 0x2F;
  1334  002B14  0E2F               	movlw	47
  1335  002B16  010F               	movlb	15	; () banked
  1336  002B18  010F               	movlb	15	; () banked
  1337  002B1A  6F5B               	movwf	91,b	;volatile
  1338                           
  1339                           ; BSR set to: 15
  1340                           ;main.c: 63: INTCON2bits.nRBPU = 0;
  1341  002B1C  9EF1               	bcf	intcon2,7,c	;volatile
  1342                           
  1343                           ; BSR set to: 15
  1344  002B1E  0012               	return	
  1345  002B20                     __end_of_init_pins:
  1346                           	opt stack 0
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           intcon2	equ	0xFF1
  1352                           status	equ	0xFD8
  1353                           
  1354 ;; *************** function _init_oscillator *****************
  1355 ;; Defined at:
  1356 ;;		line 20 in file "main.c"
  1357 ;; Parameters:    Size  Location     Type
  1358 ;;		None
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, status,2
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1370 ;;      Params:         0       0       0       0       0       0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1373 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1374 ;;Total ram usage:        0 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; This function calls:
  1377 ;;		Nothing
  1378 ;; This function is called by:
  1379 ;;		_main
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           	psect	text3
  1384  002D9A                     __ptext3:
  1385                           	opt stack 0
  1386  002D9A                     _init_oscillator:
  1387                           	opt stack 29
  1388                           
  1389                           ;main.c: 23: OSCCON = 0x60;
  1390                           
  1391                           ; BSR set to: 15
  1392                           ;incstack = 0
  1393  002D9A  0E60               	movlw	96
  1394  002D9C  6ED3               	movwf	4051,c	;volatile
  1395                           
  1396                           ;main.c: 25: OSCCON2 = 0x08;
  1397  002D9E  0E08               	movlw	8
  1398  002DA0  6ED2               	movwf	4050,c	;volatile
  1399                           
  1400                           ;main.c: 27: OSCTUNE = 0x00;
  1401  002DA2  0E00               	movlw	0
  1402  002DA4  6E9B               	movwf	3995,c	;volatile
  1403                           
  1404                           ;main.c: 29: ACTCON = 0x00;
  1405  002DA6  0E00               	movlw	0
  1406  002DA8  6EB5               	movwf	4021,c	;volatile
  1407  002DAA  0012               	return	
  1408  002DAC                     __end_of_init_oscillator:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           intcon2	equ	0xFF1
  1415                           status	equ	0xFD8
  1416                           
  1417 ;; *************** function _get_temperature *****************
  1418 ;; Defined at:
  1419 ;;		line 18 in file "ntc_temperature.c"
  1420 ;; Parameters:    Size  Location     Type
  1421 ;;  sensor          2   89[COMRAM] int 
  1422 ;; Auto vars:     Size  Location     Type
  1423 ;;  temp            3   21[BANK0 ] float 
  1424 ;;  Tn              3   14[BANK0 ] float 
  1425 ;;  Rth             3    3[BANK0 ] float 
  1426 ;;  Vout            3    0[BANK0 ] float 
  1427 ;;  Bth             2   19[BANK0 ] unsigned int 
  1428 ;;  R2              2   17[BANK0 ] unsigned int 
  1429 ;;  R1              2   12[BANK0 ] unsigned int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  3   89[COMRAM] float 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1439 ;;      Params:         3       0       0       0       0       0       0       0       0
  1440 ;;      Locals:         0      24       0       0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1442 ;;      Totals:         3      24       0       0       0       0       0       0       0
  1443 ;;Total ram usage:       27 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    4
  1446 ;; This function calls:
  1447 ;;		___ftadd
  1448 ;;		___ftdiv
  1449 ;;		___ftmul
  1450 ;;		___ftneg
  1451 ;;		___lwtoft
  1452 ;;		___wmul
  1453 ;;		_adc_convert
  1454 ;;		_log
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           	psect	text4
  1461  0015AE                     __ptext4:
  1462                           	opt stack 0
  1463  0015AE                     _get_temperature:
  1464                           	opt stack 25
  1465                           
  1466                           ;ntc_temperature.c: 20: float Vout;
  1467                           ;ntc_temperature.c: 22: unsigned int R1 = 10000;
  1468                           
  1469                           ;incstack = 0
  1470  0015AE  0E27               	movlw	39
  1471  0015B0  0100               	movlb	0	; () banked
  1472  0015B2  0100               	movlb	0	; () banked
  1473  0015B4  6F6D               	movwf	(get_temperature@R1+1)& (0+255),b
  1474  0015B6  0E10               	movlw	16
  1475  0015B8  0100               	movlb	0	; () banked
  1476  0015BA  6F6C               	movwf	get_temperature@R1& (0+255),b
  1477                           
  1478                           ;ntc_temperature.c: 24: unsigned int R2 = 10000;
  1479  0015BC  0E27               	movlw	39
  1480  0015BE  0100               	movlb	0	; () banked
  1481  0015C0  0100               	movlb	0	; () banked
  1482  0015C2  6F72               	movwf	(get_temperature@R2+1)& (0+255),b
  1483  0015C4  0E10               	movlw	16
  1484  0015C6  0100               	movlb	0	; () banked
  1485  0015C8  6F71               	movwf	get_temperature@R2& (0+255),b
  1486                           
  1487                           ;ntc_temperature.c: 25: float Rth;
  1488                           ;ntc_temperature.c: 26: float Tn = 25+273.15;
  1489  0015CA  0E13               	movlw	19
  1490  0015CC  0100               	movlb	0	; () banked
  1491  0015CE  0100               	movlb	0	; () banked
  1492  0015D0  6F6E               	movwf	get_temperature@Tn& (0+255),b
  1493  0015D2  0E95               	movlw	149
  1494  0015D4  0100               	movlb	0	; () banked
  1495  0015D6  0100               	movlb	0	; () banked
  1496  0015D8  6F6F               	movwf	(get_temperature@Tn+1)& (0+255),b
  1497  0015DA  0E43               	movlw	67
  1498  0015DC  0100               	movlb	0	; () banked
  1499  0015DE  0100               	movlb	0	; () banked
  1500  0015E0  6F70               	movwf	(get_temperature@Tn+2)& (0+255),b
  1501                           
  1502                           ;ntc_temperature.c: 27: unsigned int Bth = 4073;
  1503  0015E2  0E0F               	movlw	15
  1504  0015E4  0100               	movlb	0	; () banked
  1505  0015E6  0100               	movlb	0	; () banked
  1506  0015E8  6F74               	movwf	(get_temperature@Bth+1)& (0+255),b
  1507  0015EA  0EE9               	movlw	233
  1508  0015EC  0100               	movlb	0	; () banked
  1509  0015EE  6F73               	movwf	get_temperature@Bth& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;ntc_temperature.c: 28: float temp;
  1513                           ;ntc_temperature.c: 33: Vout = adc_convert(sensor) * ADC_RESOLUTION;
  1514  0015F0  C05A  F001         	movff	get_temperature@sensor,adc_convert@channel
  1515  0015F4  C05B  F002         	movff	get_temperature@sensor+1,adc_convert@channel+1
  1516  0015F8  EC22  F016         	call	_adc_convert	;wreg free
  1517  0015FC  C001  F017         	movff	?_adc_convert,___lwtoft@c
  1518  001600  C002  F018         	movff	?_adc_convert+1,___lwtoft@c+1
  1519  001604  EC3A  F016         	call	___lwtoft	;wreg free
  1520  001608  C017  F03A         	movff	?___lwtoft,___ftmul@f1
  1521  00160C  C018  F03B         	movff	?___lwtoft+1,___ftmul@f1+1
  1522  001610  C019  F03C         	movff	?___lwtoft+2,___ftmul@f1+2
  1523  001614  0E77               	movlw	low _ADC_RESOLUTION
  1524  001616  6EF6               	movwf	tblptrl,c
  1525  001618  0E08               	movlw	high _ADC_RESOLUTION
  1526  00161A  6EF7               	movwf	tblptrh,c
  1527  00161C  0009               	tblrd		*+
  1528  00161E  CFF5 F03D          	movff	tablat,___ftmul@f2
  1529  001622  0009               	tblrd		*+
  1530  001624  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  1531  001628  000A               	tblrd		*-
  1532  00162A  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  1533  00162E  EC79  F010         	call	___ftmul	;wreg free
  1534  001632  C03A  F060         	movff	?___ftmul,get_temperature@Vout
  1535  001636  C03B  F061         	movff	?___ftmul+1,get_temperature@Vout+1
  1536  00163A  C03C  F062         	movff	?___ftmul+2,get_temperature@Vout+2
  1537                           
  1538                           ;ntc_temperature.c: 34: Rth = ((5 * R2) / (5 - Vout)) - R2;
  1539  00163E  0E00               	movlw	0
  1540  001640  6E22               	movwf	___ftadd@f2,c
  1541  001642  0EA0               	movlw	160
  1542  001644  6E23               	movwf	___ftadd@f2+1,c
  1543  001646  0E40               	movlw	64
  1544  001648  6E24               	movwf	___ftadd@f2+2,c
  1545  00164A  C060  F01C         	movff	get_temperature@Vout,___ftneg@f1
  1546  00164E  C061  F01D         	movff	get_temperature@Vout+1,___ftneg@f1+1
  1547  001652  C062  F01E         	movff	get_temperature@Vout+2,___ftneg@f1+2
  1548  001656  EC7A  F016         	call	___ftneg	;wreg free
  1549  00165A  C01C  F01F         	movff	?___ftneg,___ftadd@f1
  1550  00165E  C01D  F020         	movff	?___ftneg+1,___ftadd@f1+1
  1551  001662  C01E  F021         	movff	?___ftneg+2,___ftadd@f1+2
  1552  001666  EC2C  F00D         	call	___ftadd	;wreg free
  1553  00166A  C01F  F02E         	movff	?___ftadd,___ftdiv@f2
  1554  00166E  C020  F02F         	movff	?___ftadd+1,___ftdiv@f2+1
  1555  001672  C021  F030         	movff	?___ftadd+2,___ftdiv@f2+2
  1556  001676  0E00               	movlw	0
  1557  001678  6E14               	movwf	___wmul@multiplicand+1,c
  1558  00167A  0E05               	movlw	5
  1559  00167C  6E13               	movwf	___wmul@multiplicand,c
  1560  00167E  C071  F011         	movff	get_temperature@R2,___wmul@multiplier
  1561  001682  C072  F012         	movff	get_temperature@R2+1,___wmul@multiplier+1
  1562  001686  ECEA  F015         	call	___wmul	;wreg free
  1563  00168A  C011  F017         	movff	?___wmul,___lwtoft@c
  1564  00168E  C012  F018         	movff	?___wmul+1,___lwtoft@c+1
  1565  001692  EC3A  F016         	call	___lwtoft	;wreg free
  1566  001696  C017  F02B         	movff	?___lwtoft,___ftdiv@f1
  1567  00169A  C018  F02C         	movff	?___lwtoft+1,___ftdiv@f1+1
  1568  00169E  C019  F02D         	movff	?___lwtoft+2,___ftdiv@f1+2
  1569  0016A2  EC70  F011         	call	___ftdiv	;wreg free
  1570  0016A6  C02B  F066         	movff	?___ftdiv,_get_temperature$1696
  1571  0016AA  C02C  F067         	movff	?___ftdiv+1,_get_temperature$1696+1
  1572  0016AE  C02D  F068         	movff	?___ftdiv+2,_get_temperature$1696+2
  1573                           
  1574                           ;ntc_temperature.c: 34: Rth = ((5 * R2) / (5 - Vout)) - R2;
  1575  0016B2  C066  F01F         	movff	_get_temperature$1696,___ftadd@f1
  1576  0016B6  C067  F020         	movff	_get_temperature$1696+1,___ftadd@f1+1
  1577  0016BA  C068  F021         	movff	_get_temperature$1696+2,___ftadd@f1+2
  1578  0016BE  C071  F017         	movff	get_temperature@R2,___lwtoft@c
  1579  0016C2  C072  F018         	movff	get_temperature@R2+1,___lwtoft@c+1
  1580  0016C6  EC3A  F016         	call	___lwtoft	;wreg free
  1581  0016CA  C017  F01C         	movff	?___lwtoft,___ftneg@f1
  1582  0016CE  C018  F01D         	movff	?___lwtoft+1,___ftneg@f1+1
  1583  0016D2  C019  F01E         	movff	?___lwtoft+2,___ftneg@f1+2
  1584  0016D6  EC7A  F016         	call	___ftneg	;wreg free
  1585  0016DA  C01C  F022         	movff	?___ftneg,___ftadd@f2
  1586  0016DE  C01D  F023         	movff	?___ftneg+1,___ftadd@f2+1
  1587  0016E2  C01E  F024         	movff	?___ftneg+2,___ftadd@f2+2
  1588  0016E6  EC2C  F00D         	call	___ftadd	;wreg free
  1589  0016EA  C01F  F063         	movff	?___ftadd,get_temperature@Rth
  1590  0016EE  C020  F064         	movff	?___ftadd+1,get_temperature@Rth+1
  1591  0016F2  C021  F065         	movff	?___ftadd+2,get_temperature@Rth+2
  1592                           
  1593                           ;ntc_temperature.c: 35: temp = (Bth*Tn) / (Bth + log(Rth / R1) * Tn);
  1594  0016F6  C06C  F017         	movff	get_temperature@R1,___lwtoft@c
  1595  0016FA  C06D  F018         	movff	get_temperature@R1+1,___lwtoft@c+1
  1596  0016FE  EC3A  F016         	call	___lwtoft	;wreg free
  1597  001702  C017  F02E         	movff	?___lwtoft,___ftdiv@f2
  1598  001706  C018  F02F         	movff	?___lwtoft+1,___ftdiv@f2+1
  1599  00170A  C019  F030         	movff	?___lwtoft+2,___ftdiv@f2+2
  1600  00170E  C063  F02B         	movff	get_temperature@Rth,___ftdiv@f1
  1601  001712  C064  F02C         	movff	get_temperature@Rth+1,___ftdiv@f1+1
  1602  001716  C065  F02D         	movff	get_temperature@Rth+2,___ftdiv@f1+2
  1603  00171A  EC70  F011         	call	___ftdiv	;wreg free
  1604  00171E  C02B  F055         	movff	?___ftdiv,log@x
  1605  001722  C02C  F056         	movff	?___ftdiv+1,log@x+1
  1606  001726  C02D  F057         	movff	?___ftdiv+2,log@x+2
  1607  00172A  ECBE  F00E         	call	_log	;wreg free
  1608  00172E  C055  F069         	movff	?_log,_get_temperature$1697
  1609  001732  C056  F06A         	movff	?_log+1,_get_temperature$1697+1
  1610  001736  C057  F06B         	movff	?_log+2,_get_temperature$1697+2
  1611                           
  1612                           ;ntc_temperature.c: 35: temp = (Bth*Tn) / (Bth + log(Rth / R1) * Tn);
  1613  00173A  C06E  F03D         	movff	get_temperature@Tn,___ftmul@f2
  1614  00173E  C06F  F03E         	movff	get_temperature@Tn+1,___ftmul@f2+1
  1615  001742  C070  F03F         	movff	get_temperature@Tn+2,___ftmul@f2+2
  1616  001746  C073  F017         	movff	get_temperature@Bth,___lwtoft@c
  1617  00174A  C074  F018         	movff	get_temperature@Bth+1,___lwtoft@c+1
  1618  00174E  EC3A  F016         	call	___lwtoft	;wreg free
  1619  001752  C017  F03A         	movff	?___lwtoft,___ftmul@f1
  1620  001756  C018  F03B         	movff	?___lwtoft+1,___ftmul@f1+1
  1621  00175A  C019  F03C         	movff	?___lwtoft+2,___ftmul@f1+2
  1622  00175E  EC79  F010         	call	___ftmul	;wreg free
  1623  001762  C03A  F02B         	movff	?___ftmul,___ftdiv@f1
  1624  001766  C03B  F02C         	movff	?___ftmul+1,___ftdiv@f1+1
  1625  00176A  C03C  F02D         	movff	?___ftmul+2,___ftdiv@f1+2
  1626  00176E  C06E  F03D         	movff	get_temperature@Tn,___ftmul@f2
  1627  001772  C06F  F03E         	movff	get_temperature@Tn+1,___ftmul@f2+1
  1628  001776  C070  F03F         	movff	get_temperature@Tn+2,___ftmul@f2+2
  1629  00177A  C069  F03A         	movff	_get_temperature$1697,___ftmul@f1
  1630  00177E  C06A  F03B         	movff	_get_temperature$1697+1,___ftmul@f1+1
  1631  001782  C06B  F03C         	movff	_get_temperature$1697+2,___ftmul@f1+2
  1632  001786  EC79  F010         	call	___ftmul	;wreg free
  1633  00178A  C03A  F022         	movff	?___ftmul,___ftadd@f2
  1634  00178E  C03B  F023         	movff	?___ftmul+1,___ftadd@f2+1
  1635  001792  C03C  F024         	movff	?___ftmul+2,___ftadd@f2+2
  1636  001796  C073  F017         	movff	get_temperature@Bth,___lwtoft@c
  1637  00179A  C074  F018         	movff	get_temperature@Bth+1,___lwtoft@c+1
  1638  00179E  EC3A  F016         	call	___lwtoft	;wreg free
  1639  0017A2  C017  F01F         	movff	?___lwtoft,___ftadd@f1
  1640  0017A6  C018  F020         	movff	?___lwtoft+1,___ftadd@f1+1
  1641  0017AA  C019  F021         	movff	?___lwtoft+2,___ftadd@f1+2
  1642  0017AE  EC2C  F00D         	call	___ftadd	;wreg free
  1643  0017B2  C01F  F02E         	movff	?___ftadd,___ftdiv@f2
  1644  0017B6  C020  F02F         	movff	?___ftadd+1,___ftdiv@f2+1
  1645  0017BA  C021  F030         	movff	?___ftadd+2,___ftdiv@f2+2
  1646  0017BE  EC70  F011         	call	___ftdiv	;wreg free
  1647  0017C2  C02B  F075         	movff	?___ftdiv,get_temperature@temp
  1648  0017C6  C02C  F076         	movff	?___ftdiv+1,get_temperature@temp+1
  1649  0017CA  C02D  F077         	movff	?___ftdiv+2,get_temperature@temp+2
  1650                           
  1651                           ;ntc_temperature.c: 37: temp = temp - 273.15;
  1652  0017CE  C075  F01F         	movff	get_temperature@temp,___ftadd@f1
  1653  0017D2  C076  F020         	movff	get_temperature@temp+1,___ftadd@f1+1
  1654  0017D6  C077  F021         	movff	get_temperature@temp+2,___ftadd@f1+2
  1655  0017DA  0E93               	movlw	147
  1656  0017DC  6E22               	movwf	___ftadd@f2,c
  1657  0017DE  0E88               	movlw	136
  1658  0017E0  6E23               	movwf	___ftadd@f2+1,c
  1659  0017E2  0EC3               	movlw	195
  1660  0017E4  6E24               	movwf	___ftadd@f2+2,c
  1661  0017E6  EC2C  F00D         	call	___ftadd	;wreg free
  1662  0017EA  C01F  F075         	movff	?___ftadd,get_temperature@temp
  1663  0017EE  C020  F076         	movff	?___ftadd+1,get_temperature@temp+1
  1664  0017F2  C021  F077         	movff	?___ftadd+2,get_temperature@temp+2
  1665                           
  1666                           ;ntc_temperature.c: 39: return temp;
  1667  0017F6  C075  F05A         	movff	get_temperature@temp,?_get_temperature
  1668  0017FA  C076  F05B         	movff	get_temperature@temp+1,?_get_temperature+1
  1669  0017FE  C077  F05C         	movff	get_temperature@temp+2,?_get_temperature+2
  1670  001802  0012               	return	
  1671  001804                     __end_of_get_temperature:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           intcon2	equ	0xFF1
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _log *****************
  1681 ;; Defined at:
  1682 ;;		line 5 in file "/opt/microchip/xc8/v1.31/sources/common/log.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  x               3   84[COMRAM] float 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  exponent        2   87[COMRAM] int 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  3   84[COMRAM] int 
  1689 ;; Registers used:
  1690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1696 ;;      Params:         3       0       0       0       0       0       0       0       0
  1697 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1699 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1700 ;;Total ram usage:        5 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    3
  1703 ;; This function calls:
  1704 ;;		___awtoft
  1705 ;;		___ftadd
  1706 ;;		___ftmul
  1707 ;;		_eval_poly
  1708 ;;		_frexp
  1709 ;; This function is called by:
  1710 ;;		_get_temperature
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text5
  1715  001D7C                     __ptext5:
  1716                           	opt stack 0
  1717  001D7C                     _log:
  1718                           	opt stack 25
  1719                           
  1720                           ;incstack = 0
  1721  001D7C  5057               	movf	log@x+2,w,c
  1722  001D7E  0A80               	xorlw	128
  1723  001D80  0F80               	addlw	128
  1724  001D82  E105               	bnz	u2835
  1725  001D84  0E00               	movlw	0
  1726  001D86  5C56               	subwf	log@x+1,w,c
  1727  001D88  E102               	bnz	u2835
  1728  001D8A  0E00               	movlw	0
  1729  001D8C  5C55               	subwf	log@x,w,c
  1730  001D8E                     u2835:
  1731  001D8E  B0D8               	btfsc	status,0,c
  1732  001D90  D00E               	goto	l5027
  1733  001D92  0E00               	movlw	0
  1734  001D94  0100               	movlb	0	; () banked
  1735  001D96  0100               	movlb	0	; () banked
  1736  001D98  6F9D               	movwf	(_errno+1)& (0+255),b
  1737  001D9A  0E21               	movlw	33
  1738  001D9C  0100               	movlb	0	; () banked
  1739  001D9E  6F9C               	movwf	_errno& (0+255),b
  1740  001DA0  0E00               	movlw	0
  1741  001DA2  6E55               	movwf	?_log,c
  1742  001DA4  0E00               	movlw	0
  1743  001DA6  6E56               	movwf	?_log+1,c
  1744  001DA8  0E00               	movlw	0
  1745  001DAA  6E57               	movwf	?_log+2,c
  1746  001DAC  0012               	return	
  1747  001DAE                     l5027:
  1748  001DAE  0E7F               	movlw	127
  1749  001DB0  1457               	andwf	log@x+2,w,c
  1750  001DB2  1056               	iorwf	log@x+1,w,c
  1751  001DB4  1055               	iorwf	log@x,w,c
  1752  001DB6  A4D8               	btfss	status,2,c
  1753  001DB8  D00E               	goto	l5033
  1754  001DBA  0E00               	movlw	0
  1755  001DBC  0100               	movlb	0	; () banked
  1756  001DBE  0100               	movlb	0	; () banked
  1757  001DC0  6F9D               	movwf	(_errno+1)& (0+255),b
  1758  001DC2  0E22               	movlw	34
  1759  001DC4  0100               	movlb	0	; () banked
  1760  001DC6  6F9C               	movwf	_errno& (0+255),b
  1761  001DC8  0E00               	movlw	0
  1762  001DCA  6E55               	movwf	?_log,c
  1763  001DCC  0E00               	movlw	0
  1764  001DCE  6E56               	movwf	?_log+1,c
  1765  001DD0  0E00               	movlw	0
  1766  001DD2  6E57               	movwf	?_log+2,c
  1767  001DD4  0012               	return	
  1768  001DD6                     l5033:
  1769  001DD6  0E00               	movlw	0
  1770  001DD8  6E3D               	movwf	___ftmul@f2,c
  1771  001DDA  0E00               	movlw	0
  1772  001DDC  6E3E               	movwf	___ftmul@f2+1,c
  1773  001DDE  0E40               	movlw	64
  1774  001DE0  6E3F               	movwf	___ftmul@f2+2,c
  1775  001DE2  0E00               	movlw	high log@exponent
  1776  001DE4  6E05               	movwf	frexp@eptr+1,c
  1777  001DE6  0E58               	movlw	low log@exponent
  1778  001DE8  6E04               	movwf	frexp@eptr,c
  1779  001DEA  C055  F001         	movff	log@x,frexp@value
  1780  001DEE  C056  F002         	movff	log@x+1,frexp@value+1
  1781  001DF2  C057  F003         	movff	log@x+2,frexp@value+2
  1782  001DF6  EC03  F014         	call	_frexp	;wreg free
  1783  001DFA  C001  F03A         	movff	?_frexp,___ftmul@f1
  1784  001DFE  C002  F03B         	movff	?_frexp+1,___ftmul@f1+1
  1785  001E02  C003  F03C         	movff	?_frexp+2,___ftmul@f1+2
  1786  001E06  EC79  F010         	call	___ftmul	;wreg free
  1787  001E0A  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  1788  001E0E  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  1789  001E12  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  1790  001E16  0E00               	movlw	0
  1791  001E18  6E22               	movwf	___ftadd@f2,c
  1792  001E1A  0E80               	movlw	128
  1793  001E1C  6E23               	movwf	___ftadd@f2+1,c
  1794  001E1E  0EBF               	movlw	191
  1795  001E20  6E24               	movwf	___ftadd@f2+2,c
  1796  001E22  EC2C  F00D         	call	___ftadd	;wreg free
  1797  001E26  C01F  F055         	movff	?___ftadd,log@x
  1798  001E2A  C020  F056         	movff	?___ftadd+1,log@x+1
  1799  001E2E  C021  F057         	movff	?___ftadd+2,log@x+2
  1800  001E32  0658               	decf	log@exponent,f,c
  1801  001E34  A0D8               	btfss	status,0,c
  1802  001E36  0659               	decf	log@exponent+1,f,c
  1803  001E38  C055  F049         	movff	log@x,eval_poly@x
  1804  001E3C  C056  F04A         	movff	log@x+1,eval_poly@x+1
  1805  001E40  C057  F04B         	movff	log@x+2,eval_poly@x+2
  1806  001E44  0E08               	movlw	high log@coeff
  1807  001E46  6E4D               	movwf	eval_poly@d+1,c
  1808  001E48  0E84               	movlw	low log@coeff
  1809  001E4A  6E4C               	movwf	eval_poly@d,c
  1810  001E4C  0E00               	movlw	0
  1811  001E4E  6E4F               	movwf	eval_poly@n+1,c
  1812  001E50  0E08               	movlw	8
  1813  001E52  6E4E               	movwf	eval_poly@n,c
  1814  001E54  ECE3  F011         	call	_eval_poly	;wreg free
  1815  001E58  C049  F055         	movff	?_eval_poly,log@x
  1816  001E5C  C04A  F056         	movff	?_eval_poly+1,log@x+1
  1817  001E60  C04B  F057         	movff	?_eval_poly+2,log@x+2
  1818  001E64  0E72               	movlw	114
  1819  001E66  6E3D               	movwf	___ftmul@f2,c
  1820  001E68  0E31               	movlw	49
  1821  001E6A  6E3E               	movwf	___ftmul@f2+1,c
  1822  001E6C  0E3F               	movlw	63
  1823  001E6E  6E3F               	movwf	___ftmul@f2+2,c
  1824  001E70  C058  F009         	movff	log@exponent,___awtoft@c
  1825  001E74  C059  F00A         	movff	log@exponent+1,___awtoft@c+1
  1826  001E78  EC3F  F015         	call	___awtoft	;wreg free
  1827  001E7C  C009  F03A         	movff	?___awtoft,___ftmul@f1
  1828  001E80  C00A  F03B         	movff	?___awtoft+1,___ftmul@f1+1
  1829  001E84  C00B  F03C         	movff	?___awtoft+2,___ftmul@f1+2
  1830  001E88  EC79  F010         	call	___ftmul	;wreg free
  1831  001E8C  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  1832  001E90  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  1833  001E94  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  1834  001E98  C055  F022         	movff	log@x,___ftadd@f2
  1835  001E9C  C056  F023         	movff	log@x+1,___ftadd@f2+1
  1836  001EA0  C057  F024         	movff	log@x+2,___ftadd@f2+2
  1837  001EA4  EC2C  F00D         	call	___ftadd	;wreg free
  1838  001EA8  C01F  F055         	movff	?___ftadd,?_log
  1839  001EAC  C020  F056         	movff	?___ftadd+1,?_log+1
  1840  001EB0  C021  F057         	movff	?___ftadd+2,?_log+2
  1841  001EB4  0012               	return	
  1842  001EB6                     __end_of_log:
  1843                           	opt stack 0
  1844                           tblptru	equ	0xFF8
  1845                           tblptrh	equ	0xFF7
  1846                           tblptrl	equ	0xFF6
  1847                           tablat	equ	0xFF5
  1848                           intcon2	equ	0xFF1
  1849                           status	equ	0xFD8
  1850                           
  1851 ;; *************** function _frexp *****************
  1852 ;; Defined at:
  1853 ;;		line 254 in file "/opt/microchip/xc8/v1.31/sources/common/frexp.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  value           3    0[COMRAM] int 
  1856 ;;  eptr            2    3[COMRAM] PTR int 
  1857 ;;		 -> log@exponent(2), 
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  3    0[COMRAM] PTR int 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1869 ;;      Params:         5       0       0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1871 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1872 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        8 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_log
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text6
  1883  002806                     __ptext6:
  1884                           	opt stack 0
  1885  002806                     _frexp:
  1886                           	opt stack 27
  1887                           
  1888                           ;incstack = 0
  1889  002806  0E7F               	movlw	127
  1890  002808  1403               	andwf	frexp@value+2,w,c
  1891  00280A  1002               	iorwf	frexp@value+1,w,c
  1892  00280C  1001               	iorwf	frexp@value,w,c
  1893  00280E  A4D8               	btfss	status,2,c
  1894  002810  D00F               	goto	l4767
  1895  002812  C004  FFD9         	movff	frexp@eptr,fsr2l
  1896  002816  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1897  00281A  0E00               	movlw	0
  1898  00281C  6EDE               	movwf	postinc2,c
  1899  00281E  0E00               	movlw	0
  1900  002820  6EDD               	movwf	postdec2,c
  1901  002822  0E00               	movlw	0
  1902  002824  6E01               	movwf	?_frexp,c
  1903  002826  0E00               	movlw	0
  1904  002828  6E02               	movwf	?_frexp+1,c
  1905  00282A  0E00               	movlw	0
  1906  00282C  6E03               	movwf	?_frexp+2,c
  1907  00282E  0012               	return	
  1908  002830                     l4767:
  1909  002830  5003               	movf	frexp@value+2,w,c
  1910  002832  0B7F               	andlw	127
  1911  002834  6E06               	movwf	??_frexp& (0+255),c
  1912  002836  90D8               	bcf	status,0,c
  1913  002838  3406               	rlcf	??_frexp,w,c
  1914  00283A  6E07               	movwf	(??_frexp+1)& (0+255),c
  1915  00283C  6A08               	clrf	(??_frexp+2)& (0+255),c
  1916  00283E  3608               	rlcf	(??_frexp+2)& (0+255),f,c
  1917  002840  C004  FFD9         	movff	frexp@eptr,fsr2l
  1918  002844  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1919  002848  C007  FFDE         	movff	??_frexp+1,postinc2
  1920  00284C  C008  FFDD         	movff	??_frexp+2,postdec2
  1921  002850  AE02               	btfss	frexp@value+1,7,c
  1922  002852  D003               	goto	u2470
  1923  002854  6A06               	clrf	??_frexp& (0+255),c
  1924  002856  2A06               	incf	??_frexp& (0+255),f,c
  1925  002858  D001               	goto	u2478
  1926  00285A                     u2470:
  1927  00285A  6A06               	clrf	??_frexp& (0+255),c
  1928  00285C                     u2478:
  1929  00285C  5006               	movf	??_frexp,w,c
  1930  00285E  C004  FFD9         	movff	frexp@eptr,fsr2l
  1931  002862  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1932  002866  12DE               	iorwf	postinc2,f,c
  1933  002868  0E00               	movlw	0
  1934  00286A  12DD               	iorwf	postdec2,f,c
  1935  00286C  C004  FFD9         	movff	frexp@eptr,fsr2l
  1936  002870  C005  FFDA         	movff	frexp@eptr+1,fsr2h
  1937  002874  0E82               	movlw	130
  1938  002876  26DE               	addwf	postinc2,f,c
  1939  002878  0EFF               	movlw	255
  1940  00287A  22DD               	addwfc	postdec2,f,c
  1941  00287C  8003               	bsf	frexp@value+2,0,c
  1942  00287E  8203               	bsf	frexp@value+2,1,c
  1943  002880  8403               	bsf	frexp@value+2,2,c
  1944  002882  8603               	bsf	frexp@value+2,3,c
  1945  002884  8803               	bsf	frexp@value+2,4,c
  1946  002886  8A03               	bsf	frexp@value+2,5,c
  1947  002888  9C03               	bcf	frexp@value+2,6,c
  1948  00288A  9E02               	bcf	frexp@value+1,7,c
  1949  00288C  C001  F001         	movff	frexp@value,?_frexp
  1950  002890  C002  F002         	movff	frexp@value+1,?_frexp+1
  1951  002894  C003  F003         	movff	frexp@value+2,?_frexp+2
  1952  002898  0012               	return	
  1953  00289A                     __end_of_frexp:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           intcon2	equ	0xFF1
  1960                           postinc2	equ	0xFDE
  1961                           postdec2	equ	0xFDD
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _eval_poly *****************
  1967 ;; Defined at:
  1968 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/common/evalpoly.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  x               3   72[COMRAM] PTR int 
  1971 ;;  d               2   75[COMRAM] PTR const 
  1972 ;;		 -> log@coeff(27), 
  1973 ;;  n               2   77[COMRAM] int 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  res             3   81[COMRAM] int 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  3   72[COMRAM] int 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1985 ;;      Params:         7       0       0       0       0       0       0       0       0
  1986 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1987 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1988 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1989 ;;Total ram usage:       12 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		___ftadd
  1994 ;;		___ftmul
  1995 ;;		___wmul
  1996 ;; This function is called by:
  1997 ;;		_log
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text7
  2002  0023C6                     __ptext7:
  2003                           	opt stack 0
  2004  0023C6                     _eval_poly:
  2005                           	opt stack 25
  2006                           
  2007                           ;incstack = 0
  2008  0023C6  C04E  F011         	movff	eval_poly@n,___wmul@multiplier
  2009  0023CA  C04F  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  2010  0023CE  0E00               	movlw	0
  2011  0023D0  6E14               	movwf	___wmul@multiplicand+1,c
  2012  0023D2  0E03               	movlw	3
  2013  0023D4  6E13               	movwf	___wmul@multiplicand,c
  2014  0023D6  ECEA  F015         	call	___wmul	;wreg free
  2015  0023DA  C04C  F050         	movff	eval_poly@d,??_eval_poly
  2016  0023DE  C04D  F051         	movff	eval_poly@d+1,??_eval_poly+1
  2017  0023E2  5011               	movf	?___wmul,w,c
  2018  0023E4  2650               	addwf	??_eval_poly,f,c
  2019  0023E6  5012               	movf	?___wmul+1,w,c
  2020  0023E8  2251               	addwfc	??_eval_poly+1,f,c
  2021  0023EA  C050  FFF6         	movff	??_eval_poly,tblptrl
  2022  0023EE  C051  FFF7         	movff	??_eval_poly+1,tblptrh
  2023  0023F2  0009               	tblrd		*+
  2024  0023F4  CFF5 F052          	movff	tablat,eval_poly@res
  2025  0023F8  0009               	tblrd		*+
  2026  0023FA  CFF5 F053          	movff	tablat,eval_poly@res+1
  2027  0023FE  000A               	tblrd		*-
  2028  002400  CFF5 F054          	movff	tablat,eval_poly@res+2
  2029  002404  D03E               	goto	l4783
  2030  002406                     l4781:
  2031  002406  C052  F03D         	movff	eval_poly@res,___ftmul@f2
  2032  00240A  C053  F03E         	movff	eval_poly@res+1,___ftmul@f2+1
  2033  00240E  C054  F03F         	movff	eval_poly@res+2,___ftmul@f2+2
  2034  002412  C049  F03A         	movff	eval_poly@x,___ftmul@f1
  2035  002416  C04A  F03B         	movff	eval_poly@x+1,___ftmul@f1+1
  2036  00241A  C04B  F03C         	movff	eval_poly@x+2,___ftmul@f1+2
  2037  00241E  EC79  F010         	call	___ftmul	;wreg free
  2038  002422  C03A  F01F         	movff	?___ftmul,___ftadd@f1
  2039  002426  C03B  F020         	movff	?___ftmul+1,___ftadd@f1+1
  2040  00242A  C03C  F021         	movff	?___ftmul+2,___ftadd@f1+2
  2041  00242E  0E00               	movlw	0
  2042  002430  6E14               	movwf	___wmul@multiplicand+1,c
  2043  002432  0E03               	movlw	3
  2044  002434  6E13               	movwf	___wmul@multiplicand,c
  2045  002436  064E               	decf	eval_poly@n,f,c
  2046  002438  A0D8               	btfss	status,0,c
  2047  00243A  064F               	decf	eval_poly@n+1,f,c
  2048  00243C  C04E  F011         	movff	eval_poly@n,___wmul@multiplier
  2049  002440  C04F  F012         	movff	eval_poly@n+1,___wmul@multiplier+1
  2050  002444  ECEA  F015         	call	___wmul	;wreg free
  2051  002448  C04C  F050         	movff	eval_poly@d,??_eval_poly
  2052  00244C  C04D  F051         	movff	eval_poly@d+1,??_eval_poly+1
  2053  002450  5011               	movf	?___wmul,w,c
  2054  002452  2650               	addwf	??_eval_poly,f,c
  2055  002454  5012               	movf	?___wmul+1,w,c
  2056  002456  2251               	addwfc	??_eval_poly+1,f,c
  2057  002458  C050  FFF6         	movff	??_eval_poly,tblptrl
  2058  00245C  C051  FFF7         	movff	??_eval_poly+1,tblptrh
  2059  002460  0009               	tblrd		*+
  2060  002462  CFF5 F022          	movff	tablat,___ftadd@f2
  2061  002466  0009               	tblrd		*+
  2062  002468  CFF5 F023          	movff	tablat,___ftadd@f2+1
  2063  00246C  000A               	tblrd		*-
  2064  00246E  CFF5 F024          	movff	tablat,___ftadd@f2+2
  2065  002472  EC2C  F00D         	call	___ftadd	;wreg free
  2066  002476  C01F  F052         	movff	?___ftadd,eval_poly@res
  2067  00247A  C020  F053         	movff	?___ftadd+1,eval_poly@res+1
  2068  00247E  C021  F054         	movff	?___ftadd+2,eval_poly@res+2
  2069  002482                     l4783:
  2070  002482  504F               	movf	eval_poly@n+1,w,c
  2071  002484  104E               	iorwf	eval_poly@n,w,c
  2072  002486  A4D8               	btfss	status,2,c
  2073  002488  D7BE               	goto	l4781
  2074  00248A  C052  F049         	movff	eval_poly@res,?_eval_poly
  2075  00248E  C053  F04A         	movff	eval_poly@res+1,?_eval_poly+1
  2076  002492  C054  F04B         	movff	eval_poly@res+2,?_eval_poly+2
  2077  002496  0012               	return	
  2078  002498                     __end_of_eval_poly:
  2079                           	opt stack 0
  2080                           tblptru	equ	0xFF8
  2081                           tblptrh	equ	0xFF7
  2082                           tblptrl	equ	0xFF6
  2083                           tablat	equ	0xFF5
  2084                           intcon2	equ	0xFF1
  2085                           postinc2	equ	0xFDE
  2086                           postdec2	equ	0xFDD
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function ___awtoft *****************
  2092 ;; Defined at:
  2093 ;;		line 32 in file "/opt/microchip/xc8/v1.31/sources/common/awtoft.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  c               2    8[COMRAM] int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  sign            1   12[COMRAM] unsigned char 
  2098 ;; Return value:  Size  Location     Type
  2099 ;;                  3    8[COMRAM] float 
  2100 ;; Registers used:
  2101 ;;		wreg, status,2, status,0, prodl, cstack
  2102 ;; Tracked objects:
  2103 ;;		On entry : 0/0
  2104 ;;		On exit  : 0/0
  2105 ;;		Unchanged: 0/0
  2106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2107 ;;      Params:         3       0       0       0       0       0       0       0       0
  2108 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2109 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2110 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2111 ;;Total ram usage:        5 bytes
  2112 ;; Hardware stack levels used:    1
  2113 ;; Hardware stack levels required when called:    1
  2114 ;; This function calls:
  2115 ;;		___ftpack
  2116 ;; This function is called by:
  2117 ;;		_set_fan_speed
  2118 ;;		_log
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           	psect	text8
  2123  002A7E                     __ptext8:
  2124                           	opt stack 0
  2125  002A7E                     ___awtoft:
  2126                           	opt stack 27
  2127                           
  2128                           ;incstack = 0
  2129  002A7E  6E0C               	movwf	??___awtoft& (0+255),c
  2130  002A80  0E00               	movlw	0
  2131  002A82  6E0D               	movwf	___awtoft@sign,c
  2132  002A84  500C               	movf	??___awtoft& (0+255),w,c
  2133  002A86  500A               	movf	___awtoft@c+1,w,c
  2134  002A88  0A80               	xorlw	128
  2135  002A8A  6EF3               	movwf	prodl,c
  2136  002A8C  0E80               	movlw	128
  2137  002A8E  5CF3               	subwf	prodl,w,c
  2138  002A90  0E00               	movlw	0
  2139  002A92  B4D8               	btfsc	status,2,c
  2140  002A94  5C09               	subwf	___awtoft@c,w,c
  2141  002A96  B0D8               	btfsc	status,0,c
  2142  002A98  D008               	goto	l4639
  2143  002A9A  6C09               	negf	___awtoft@c,c
  2144  002A9C  1E0A               	comf	___awtoft@c+1,f,c
  2145  002A9E  B0D8               	btfsc	status,0,c
  2146  002AA0  2A0A               	incf	___awtoft@c+1,f,c
  2147  002AA2  6E0C               	movwf	??___awtoft& (0+255),c
  2148  002AA4  0E01               	movlw	1
  2149  002AA6  6E0D               	movwf	___awtoft@sign,c
  2150  002AA8  500C               	movf	??___awtoft& (0+255),w,c
  2151  002AAA                     l4639:
  2152  002AAA  C009  F001         	movff	___awtoft@c,___ftpack@arg
  2153  002AAE  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2154  002AB2  6A03               	clrf	___ftpack@arg+2,c
  2155  002AB4  6E0C               	movwf	??___awtoft& (0+255),c
  2156  002AB6  0E8E               	movlw	142
  2157  002AB8  6E04               	movwf	___ftpack@exp,c
  2158  002ABA  500C               	movf	??___awtoft& (0+255),w,c
  2159  002ABC  C00D  F005         	movff	___awtoft@sign,___ftpack@sign
  2160  002AC0  EC61  F013         	call	___ftpack	;wreg free
  2161  002AC4  C001  F009         	movff	?___ftpack,?___awtoft
  2162  002AC8  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  2163  002ACC  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  2164  002AD0  0012               	return	
  2165  002AD2                     __end_of___awtoft:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           prodl	equ	0xFF3
  2172                           intcon2	equ	0xFF1
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _adc_convert *****************
  2180 ;; Defined at:
  2181 ;;		line 5 in file "ntc_temperature.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  channel         2    0[COMRAM] int 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  2    0[COMRAM] unsigned int 
  2188 ;; Registers used:
  2189 ;;		wreg, status,2, status,0
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2195 ;;      Params:         2       0       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2197 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2198 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        4 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_get_temperature
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text9
  2209  002C44                     __ptext9:
  2210                           	opt stack 0
  2211  002C44                     _adc_convert:
  2212                           	opt stack 28
  2213                           
  2214                           ;ntc_temperature.c: 8: ADCON0bits.CHS = channel;
  2215                           
  2216                           ;incstack = 0
  2217  002C44  C001  F003         	movff	adc_convert@channel,??_adc_convert
  2218  002C48  4603               	rlncf	??_adc_convert,f,c
  2219  002C4A  4603               	rlncf	??_adc_convert,f,c
  2220  002C4C  50C2               	movf	4034,w,c	;volatile
  2221  002C4E  1803               	xorwf	??_adc_convert,w,c
  2222  002C50  0B83               	andlw	-125
  2223  002C52  1803               	xorwf	??_adc_convert,w,c
  2224  002C54  6EC2               	movwf	4034,c	;volatile
  2225                           
  2226                           ;ntc_temperature.c: 10: ADCON0bits.GO = 1;
  2227  002C56  82C2               	bsf	4034,1,c	;volatile
  2228  002C58                     l203:
  2229  002C58  B2C2               	btfsc	4034,1,c	;volatile
  2230  002C5A  D7FE               	goto	l203
  2231                           
  2232                           ;ntc_temperature.c: 14: return(ADRESH<<8)|ADRESL;
  2233  002C5C  50C3               	movf	4035,w,c	;volatile
  2234  002C5E  CFC4 F003          	movff	4036,??_adc_convert	;volatile
  2235  002C62  6A04               	clrf	(??_adc_convert+1)& (0+255),c
  2236  002C64  C003  F004         	movff	??_adc_convert,??_adc_convert+1
  2237  002C68  6A03               	clrf	??_adc_convert,c
  2238  002C6A  1003               	iorwf	??_adc_convert,w,c
  2239  002C6C  6E01               	movwf	?_adc_convert,c
  2240  002C6E  5004               	movf	??_adc_convert+1,w,c
  2241  002C70  6E02               	movwf	?_adc_convert+1,c
  2242  002C72  0012               	return	
  2243  002C74                     __end_of_adc_convert:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodl	equ	0xFF3
  2250                           intcon2	equ	0xFF1
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           fsr2h	equ	0xFDA
  2254                           fsr2l	equ	0xFD9
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function ___lwtoft *****************
  2258 ;; Defined at:
  2259 ;;		line 28 in file "/opt/microchip/xc8/v1.31/sources/common/lwtoft.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;  c               2   22[COMRAM] unsigned int 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  3   22[COMRAM] float 
  2266 ;; Registers used:
  2267 ;;		wreg, status,2, status,0, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2273 ;;      Params:         3       0       0       0       0       0       0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2275 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2276 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2277 ;;Total ram usage:        5 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    1
  2280 ;; This function calls:
  2281 ;;		___ftpack
  2282 ;; This function is called by:
  2283 ;;		_get_temperature
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text10
  2288  002C74                     __ptext10:
  2289                           	opt stack 0
  2290  002C74                     ___lwtoft:
  2291                           	opt stack 27
  2292                           
  2293                           ;incstack = 0
  2294  002C74  C017  F001         	movff	___lwtoft@c,___ftpack@arg
  2295  002C78  C018  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  2296  002C7C  6A03               	clrf	___ftpack@arg+2,c
  2297  002C7E  6E1A               	movwf	??___lwtoft& (0+255),c
  2298  002C80  0E8E               	movlw	142
  2299  002C82  6E04               	movwf	___ftpack@exp,c
  2300  002C84  501A               	movf	??___lwtoft& (0+255),w,c
  2301  002C86  6E1B               	movwf	(??___lwtoft+1)& (0+255),c
  2302  002C88  0E00               	movlw	0
  2303  002C8A  6E05               	movwf	___ftpack@sign,c
  2304  002C8C  501B               	movf	(??___lwtoft+1)& (0+255),w,c
  2305  002C8E  EC61  F013         	call	___ftpack	;wreg free
  2306  002C92  C001  F017         	movff	?___ftpack,?___lwtoft
  2307  002C96  C002  F018         	movff	?___ftpack+1,?___lwtoft+1
  2308  002C9A  C003  F019         	movff	?___ftpack+2,?___lwtoft+2
  2309  002C9E  0012               	return	
  2310  002CA0                     __end_of___lwtoft:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodl	equ	0xFF3
  2317                           intcon2	equ	0xFF1
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           fsr2h	equ	0xFDA
  2321                           fsr2l	equ	0xFD9
  2322                           status	equ	0xFD8
  2323                           
  2324 ;; *************** function ___ftdiv *****************
  2325 ;; Defined at:
  2326 ;;		line 49 in file "/opt/microchip/xc8/v1.31/sources/common/ftdiv.c"
  2327 ;; Parameters:    Size  Location     Type
  2328 ;;  f1              3   42[COMRAM] float 
  2329 ;;  f2              3   45[COMRAM] float 
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  f3              3   52[COMRAM] float 
  2332 ;;  sign            1   56[COMRAM] unsigned char 
  2333 ;;  exp             1   55[COMRAM] unsigned char 
  2334 ;;  cntr            1   51[COMRAM] unsigned char 
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  3   42[COMRAM] float 
  2337 ;; Registers used:
  2338 ;;		wreg, status,2, status,0, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2344 ;;      Params:         6       0       0       0       0       0       0       0       0
  2345 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2346 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2347 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2348 ;;Total ram usage:       15 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    1
  2351 ;; This function calls:
  2352 ;;		___ftpack
  2353 ;; This function is called by:
  2354 ;;		_set_fan_speed
  2355 ;;		_get_temperature
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text11
  2360  0022E0                     __ptext11:
  2361                           	opt stack 0
  2362  0022E0                     ___ftdiv:
  2363                           	opt stack 27
  2364                           
  2365                           ;incstack = 0
  2366  0022E0  C02D  F031         	movff	___ftdiv@f1+2,??___ftdiv
  2367  0022E4  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  2368  0022E6  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  2369  0022E8  342C               	rlcf	___ftdiv@f1+1,w,c
  2370  0022EA  3631               	rlcf	??___ftdiv& (0+255),f,c
  2371  0022EC  E301               	bnc	u2851
  2372  0022EE  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  2373  0022F0                     u2851:
  2374  0022F0  5031               	movf	??___ftdiv,w,c
  2375  0022F2  6E38               	movwf	___ftdiv@exp,c
  2376  0022F4  6638               	tstfsz	___ftdiv@exp& (0+255),c
  2377  0022F6  D007               	goto	l5049
  2378  0022F8  0E00               	movlw	0
  2379  0022FA  6E2B               	movwf	?___ftdiv,c
  2380  0022FC  0E00               	movlw	0
  2381  0022FE  6E2C               	movwf	?___ftdiv+1,c
  2382  002300  0E00               	movlw	0
  2383  002302  6E2D               	movwf	?___ftdiv+2,c
  2384  002304  0012               	return	
  2385  002306                     l5049:
  2386  002306  C030  F031         	movff	___ftdiv@f2+2,??___ftdiv
  2387  00230A  6A32               	clrf	(??___ftdiv+1)& (0+255),c
  2388  00230C  6A33               	clrf	(??___ftdiv+2)& (0+255),c
  2389  00230E  342F               	rlcf	___ftdiv@f2+1,w,c
  2390  002310  3631               	rlcf	??___ftdiv& (0+255),f,c
  2391  002312  E301               	bnc	u2871
  2392  002314  8032               	bsf	(??___ftdiv+1)& (0+255),0,c
  2393  002316                     u2871:
  2394  002316  5031               	movf	??___ftdiv,w,c
  2395  002318  6E39               	movwf	___ftdiv@sign,c
  2396  00231A  6639               	tstfsz	___ftdiv@sign& (0+255),c
  2397  00231C  D007               	goto	l5055
  2398  00231E  0E00               	movlw	0
  2399  002320  6E2B               	movwf	?___ftdiv,c
  2400  002322  0E00               	movlw	0
  2401  002324  6E2C               	movwf	?___ftdiv+1,c
  2402  002326  0E00               	movlw	0
  2403  002328  6E2D               	movwf	?___ftdiv+2,c
  2404  00232A  0012               	return	
  2405  00232C                     l5055:
  2406  00232C  0E00               	movlw	0
  2407  00232E  6E35               	movwf	___ftdiv@f3,c
  2408  002330  0E00               	movlw	0
  2409  002332  6E36               	movwf	___ftdiv@f3+1,c
  2410  002334  0E00               	movlw	0
  2411  002336  6E37               	movwf	___ftdiv@f3+2,c
  2412  002338  5039               	movf	___ftdiv@sign,w,c
  2413  00233A  0F89               	addlw	137
  2414  00233C  5E38               	subwf	___ftdiv@exp,f,c
  2415  00233E  C02D  F039         	movff	___ftdiv@f1+2,___ftdiv@sign
  2416  002342  5030               	movf	___ftdiv@f2+2,w,c
  2417  002344  1A39               	xorwf	___ftdiv@sign,f,c
  2418  002346  0E80               	movlw	128
  2419  002348  1639               	andwf	___ftdiv@sign,f,c
  2420  00234A  8E2C               	bsf	___ftdiv@f1+1,7,c
  2421  00234C  0EFF               	movlw	255
  2422  00234E  162B               	andwf	___ftdiv@f1,f,c
  2423  002350  0EFF               	movlw	255
  2424  002352  162C               	andwf	___ftdiv@f1+1,f,c
  2425  002354  0E00               	movlw	0
  2426  002356  162D               	andwf	___ftdiv@f1+2,f,c
  2427  002358  8E2F               	bsf	___ftdiv@f2+1,7,c
  2428  00235A  0EFF               	movlw	255
  2429  00235C  162E               	andwf	___ftdiv@f2,f,c
  2430  00235E  0EFF               	movlw	255
  2431  002360  162F               	andwf	___ftdiv@f2+1,f,c
  2432  002362  0E00               	movlw	0
  2433  002364  1630               	andwf	___ftdiv@f2+2,f,c
  2434  002366  6E31               	movwf	??___ftdiv& (0+255),c
  2435  002368  0E18               	movlw	24
  2436  00236A  6E34               	movwf	___ftdiv@cntr,c
  2437  00236C  5031               	movf	??___ftdiv& (0+255),w,c
  2438  00236E                     l684:
  2439  00236E  90D8               	bcf	status,0,c
  2440  002370  3635               	rlcf	___ftdiv@f3,f,c
  2441  002372  3636               	rlcf	___ftdiv@f3+1,f,c
  2442  002374  3637               	rlcf	___ftdiv@f3+2,f,c
  2443  002376  502E               	movf	___ftdiv@f2,w,c
  2444  002378  5C2B               	subwf	___ftdiv@f1,w,c
  2445  00237A  502F               	movf	___ftdiv@f2+1,w,c
  2446  00237C  582C               	subwfb	___ftdiv@f1+1,w,c
  2447  00237E  5030               	movf	___ftdiv@f2+2,w,c
  2448  002380  582D               	subwfb	___ftdiv@f1+2,w,c
  2449  002382  A0D8               	btfss	status,0,c
  2450  002384  D007               	goto	l685
  2451  002386  502E               	movf	___ftdiv@f2,w,c
  2452  002388  5E2B               	subwf	___ftdiv@f1,f,c
  2453  00238A  502F               	movf	___ftdiv@f2+1,w,c
  2454  00238C  5A2C               	subwfb	___ftdiv@f1+1,f,c
  2455  00238E  5030               	movf	___ftdiv@f2+2,w,c
  2456  002390  5A2D               	subwfb	___ftdiv@f1+2,f,c
  2457  002392  8035               	bsf	___ftdiv@f3,0,c
  2458  002394                     l685:
  2459  002394  90D8               	bcf	status,0,c
  2460  002396  362B               	rlcf	___ftdiv@f1,f,c
  2461  002398  362C               	rlcf	___ftdiv@f1+1,f,c
  2462  00239A  362D               	rlcf	___ftdiv@f1+2,f,c
  2463  00239C  2E34               	decfsz	___ftdiv@cntr,f,c
  2464  00239E  D7E7               	goto	l684
  2465  0023A0  C035  F001         	movff	___ftdiv@f3,___ftpack@arg
  2466  0023A4  C036  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2467  0023A8  C037  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2468  0023AC  C038  F004         	movff	___ftdiv@exp,___ftpack@exp
  2469  0023B0  C039  F005         	movff	___ftdiv@sign,___ftpack@sign
  2470  0023B4  EC61  F013         	call	___ftpack	;wreg free
  2471  0023B8  C001  F02B         	movff	?___ftpack,?___ftdiv
  2472  0023BC  C002  F02C         	movff	?___ftpack+1,?___ftdiv+1
  2473  0023C0  C003  F02D         	movff	?___ftpack+2,?___ftdiv+2
  2474  0023C4  0012               	return	
  2475  0023C6                     __end_of___ftdiv:
  2476                           	opt stack 0
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           prodl	equ	0xFF3
  2482                           intcon2	equ	0xFF1
  2483                           postinc2	equ	0xFDE
  2484                           postdec2	equ	0xFDD
  2485                           fsr2h	equ	0xFDA
  2486                           fsr2l	equ	0xFD9
  2487                           status	equ	0xFD8
  2488                           
  2489 ;; *************** function _configure_pwm *****************
  2490 ;; Defined at:
  2491 ;;		line 85 in file "main.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;		None
  2496 ;; Return value:  Size  Location     Type
  2497 ;;		None               void
  2498 ;; Registers used:
  2499 ;;		wreg, status,2
  2500 ;; Tracked objects:
  2501 ;;		On entry : 0/0
  2502 ;;		On exit  : 0/0
  2503 ;;		Unchanged: 0/0
  2504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2505 ;;      Params:         0       0       0       0       0       0       0       0       0
  2506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2508 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2509 ;;Total ram usage:        0 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text12
  2519  002D3A                     __ptext12:
  2520                           	opt stack 0
  2521  002D3A                     _configure_pwm:
  2522                           	opt stack 29
  2523                           
  2524                           ;main.c: 87: CCP1CON = 0b00001100;
  2525                           
  2526                           ;incstack = 0
  2527  002D3A  0E0C               	movlw	12
  2528  002D3C  6EBD               	movwf	4029,c	;volatile
  2529                           
  2530                           ;main.c: 88: PSTR1CON = 0b00010001;
  2531  002D3E  0E11               	movlw	17
  2532  002D40  6EB9               	movwf	4025,c	;volatile
  2533                           
  2534                           ;main.c: 89: PR2 = 254;
  2535  002D42  0EFE               	movlw	254
  2536  002D44  6EBB               	movwf	4027,c	;volatile
  2537                           
  2538                           ;main.c: 90: ECCP1AS = 0b00000000;
  2539  002D46  0E00               	movlw	0
  2540  002D48  6EB6               	movwf	4022,c	;volatile
  2541                           
  2542                           ;main.c: 91: CCP1CONbits.CCP1M2 = 1;
  2543  002D4A  84BD               	bsf	4029,2,c	;volatile
  2544                           
  2545                           ;main.c: 92: CCP1CONbits.CCP1M3 = 1;
  2546  002D4C  86BD               	bsf	4029,3,c	;volatile
  2547                           
  2548                           ;main.c: 94: T2CON = 0b00000100;
  2549  002D4E  0E04               	movlw	4
  2550  002D50  6EBA               	movwf	4026,c	;volatile
  2551                           
  2552                           ;main.c: 96: CCPR1L = 25;
  2553  002D52  0E19               	movlw	25
  2554  002D54  6EBE               	movwf	4030,c	;volatile
  2555  002D56  0012               	return	
  2556  002D58                     __end_of_configure_pwm:
  2557                           	opt stack 0
  2558                           tblptru	equ	0xFF8
  2559                           tblptrh	equ	0xFF7
  2560                           tblptrl	equ	0xFF6
  2561                           tablat	equ	0xFF5
  2562                           prodl	equ	0xFF3
  2563                           intcon2	equ	0xFF1
  2564                           postinc2	equ	0xFDE
  2565                           postdec2	equ	0xFDD
  2566                           fsr2h	equ	0xFDA
  2567                           fsr2l	equ	0xFD9
  2568                           status	equ	0xFD8
  2569                           
  2570 ;; *************** function _configure_adc *****************
  2571 ;; Defined at:
  2572 ;;		line 67 in file "main.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2586 ;;      Params:         0       0       0       0       0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text13
  2600  002D1A                     __ptext13:
  2601                           	opt stack 0
  2602  002D1A                     _configure_adc:
  2603                           	opt stack 29
  2604                           
  2605                           ;main.c: 70: TRISAbits.RA0 = 1;
  2606                           
  2607                           ;incstack = 0
  2608  002D1A  8092               	bsf	3986,0,c	;volatile
  2609                           
  2610                           ;main.c: 72: ANSELAbits.ANSA0 = 1;
  2611  002D1C  010F               	movlb	15	; () banked
  2612  002D1E  010F               	movlb	15	; () banked
  2613  002D20  815B               	bsf	91,0,b	;volatile
  2614                           
  2615                           ;main.c: 74: ADCON2bits.ADFM = 1;
  2616  002D22  8EC0               	bsf	4032,7,c	;volatile
  2617                           
  2618                           ;main.c: 75: ADCON2bits.ACQT = 0b111;
  2619  002D24  86C0               	bsf	4032,3,c	;volatile
  2620  002D26  88C0               	bsf	4032,4,c	;volatile
  2621  002D28  8AC0               	bsf	4032,5,c	;volatile
  2622                           
  2623                           ; BSR set to: 15
  2624                           ;main.c: 76: ADCON2bits.ADCS = 0b101;
  2625  002D2A  50C0               	movf	4032,w,c	;volatile
  2626  002D2C  0BF8               	andlw	-8
  2627  002D2E  0905               	iorlw	5
  2628  002D30  6EC0               	movwf	4032,c	;volatile
  2629                           
  2630                           ; BSR set to: 15
  2631                           ;main.c: 78: ADCON1bits.PVCFG0 = 0;
  2632  002D32  94C1               	bcf	4033,2,c	;volatile
  2633                           
  2634                           ; BSR set to: 15
  2635                           ;main.c: 80: ADCON1bits.NVCFG1 = 0;
  2636  002D34  92C1               	bcf	4033,1,c	;volatile
  2637                           
  2638                           ; BSR set to: 15
  2639                           ;main.c: 82: ADCON0bits.ADON = 1;
  2640  002D36  80C2               	bsf	4034,0,c	;volatile
  2641                           
  2642                           ; BSR set to: 15
  2643  002D38  0012               	return	
  2644  002D3A                     __end_of_configure_adc:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodl	equ	0xFF3
  2651                           intcon2	equ	0xFF1
  2652                           postinc2	equ	0xFDE
  2653                           postdec2	equ	0xFDD
  2654                           fsr2h	equ	0xFDA
  2655                           fsr2l	equ	0xFD9
  2656                           status	equ	0xFD8
  2657                           
  2658 ;; *************** function _SPI1_Initialize *****************
  2659 ;; Defined at:
  2660 ;;		line 6 in file "spi.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;		None
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		wreg, status,2
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2674 ;;      Params:         0       0       0       0       0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2677 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2678 ;;Total ram usage:        0 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; This function calls:
  2681 ;;		Nothing
  2682 ;; This function is called by:
  2683 ;;		_main
  2684 ;; This function uses a non-reentrant model
  2685 ;;
  2686                           
  2687                           	psect	text14
  2688  002DCE                     __ptext14:
  2689                           	opt stack 0
  2690  002DCE                     _SPI1_Initialize:
  2691                           	opt stack 29
  2692                           
  2693                           ;spi.c: 11: SSP1STAT = 0x80;
  2694                           
  2695                           ; BSR set to: 15
  2696                           ;incstack = 0
  2697  002DCE  0E80               	movlw	128
  2698  002DD0  6EC7               	movwf	4039,c	;volatile
  2699                           
  2700                           ;spi.c: 14: SSP1CON1 = 0x30;
  2701  002DD2  0E30               	movlw	48
  2702  002DD4  6EC6               	movwf	4038,c	;volatile
  2703                           
  2704                           ;spi.c: 17: SSP1ADD = 0x00;
  2705  002DD6  0E00               	movlw	0
  2706  002DD8  6EC8               	movwf	4040,c	;volatile
  2707  002DDA  0012               	return	
  2708  002DDC                     __end_of_SPI1_Initialize:
  2709                           	opt stack 0
  2710                           tblptru	equ	0xFF8
  2711                           tblptrh	equ	0xFF7
  2712                           tblptrl	equ	0xFF6
  2713                           tablat	equ	0xFF5
  2714                           prodl	equ	0xFF3
  2715                           intcon2	equ	0xFF1
  2716                           postinc2	equ	0xFDE
  2717                           postdec2	equ	0xFDD
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _MAX_7221_WRITE_FLOAT *****************
  2723 ;; Defined at:
  2724 ;;		line 42 in file "max7221.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  value           3   48[BANK0 ] float 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  digits          4   51[BANK0 ] unsigned char [4]
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2738 ;;      Params:         0       3       0       0       0       0       0       0       0
  2739 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2740 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2741 ;;      Totals:         1       7       0       0       0       0       0       0       0
  2742 ;;Total ram usage:        8 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    5
  2745 ;; This function calls:
  2746 ;;		_MAX_7221_WRITE
  2747 ;;		___ftge
  2748 ;;		_sprintf
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text15
  2755  002498                     __ptext15:
  2756                           	opt stack 0
  2757  002498                     _MAX_7221_WRITE_FLOAT:
  2758                           	opt stack 24
  2759                           
  2760                           ;max7221.c: 44: if(value > 99.9)
  2761                           
  2762                           ;incstack = 0
  2763  002498  0ECD               	movlw	205
  2764  00249A  6E01               	movwf	___ftge@ff1,c
  2765  00249C  0EC7               	movlw	199
  2766  00249E  6E02               	movwf	___ftge@ff1+1,c
  2767  0024A0  0E42               	movlw	66
  2768  0024A2  6E03               	movwf	___ftge@ff1+2,c
  2769  0024A4  C090  F004         	movff	MAX_7221_WRITE_FLOAT@value,___ftge@ff2
  2770  0024A8  C091  F005         	movff	MAX_7221_WRITE_FLOAT@value+1,___ftge@ff2+1
  2771  0024AC  C092  F006         	movff	MAX_7221_WRITE_FLOAT@value+2,___ftge@ff2+2
  2772  0024B0  EC4D  F014         	call	___ftge	;wreg free
  2773  0024B4  A0D8               	btfss	status,0,c
  2774  0024B6  0012               	return	
  2775                           
  2776                           ;max7221.c: 46: if(value < 0)
  2777                           
  2778                           ;max7221.c: 45: return;
  2779  0024B8  0100               	movlb	0	; () banked
  2780  0024BA  0100               	movlb	0	; () banked
  2781  0024BC  5192               	movf	(MAX_7221_WRITE_FLOAT@value+2)& (0+255),w,b
  2782  0024BE  0A80               	xorlw	128
  2783  0024C0  0F80               	addlw	128
  2784  0024C2  E107               	bnz	u2935
  2785  0024C4  0E00               	movlw	0
  2786  0024C6  0100               	movlb	0	; () banked
  2787  0024C8  5D91               	subwf	(MAX_7221_WRITE_FLOAT@value+1)& (0+255),w,b
  2788  0024CA  E103               	bnz	u2935
  2789  0024CC  0E00               	movlw	0
  2790  0024CE  0100               	movlb	0	; () banked
  2791  0024D0  5D90               	subwf	MAX_7221_WRITE_FLOAT@value& (0+255),w,b
  2792  0024D2                     u2935:
  2793  0024D2  A0D8               	btfss	status,0,c
  2794  0024D4  0012               	return	
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;max7221.c: 50: char digits[4];
  2798                           ;max7221.c: 52: sprintf(digits, "%.1f", value);
  2799                           
  2800                           ; BSR set to: 0
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;max7221.c: 47: return;
  2804  0024D6  0100               	movlb	0	; () banked
  2805  0024D8  0E00               	movlw	high MAX_7221_WRITE_FLOAT@digits
  2806  0024DA  0100               	movlb	0	; () banked
  2807  0024DC  0100               	movlb	0	; () banked
  2808  0024DE  6F61               	movwf	(sprintf@sp+1)& (0+255),b
  2809  0024E0  0100               	movlb	0	; () banked
  2810  0024E2  0E93               	movlw	low MAX_7221_WRITE_FLOAT@digits
  2811  0024E4  0100               	movlb	0	; () banked
  2812  0024E6  0100               	movlb	0	; () banked
  2813  0024E8  6F60               	movwf	sprintf@sp& (0+255),b
  2814  0024EA  0E08               	movlw	high STR_1
  2815  0024EC  0100               	movlb	0	; () banked
  2816  0024EE  0100               	movlb	0	; () banked
  2817  0024F0  6F63               	movwf	(sprintf@f+1)& (0+255),b
  2818  0024F2  0E9F               	movlw	low STR_1
  2819  0024F4  0100               	movlb	0	; () banked
  2820  0024F6  0100               	movlb	0	; () banked
  2821  0024F8  6F62               	movwf	sprintf@f& (0+255),b
  2822  0024FA  C090  F064         	movff	MAX_7221_WRITE_FLOAT@value,?_sprintf+4
  2823  0024FE  C091  F065         	movff	MAX_7221_WRITE_FLOAT@value+1,?_sprintf+5
  2824  002502  C092  F066         	movff	MAX_7221_WRITE_FLOAT@value+2,?_sprintf+6
  2825  002506  EC53  F004         	call	_sprintf	;wreg free
  2826                           
  2827                           ;max7221.c: 53: if(digits[1] == '.')
  2828  00250A  0100               	movlb	0	; () banked
  2829  00250C  0100               	movlb	0	; () banked
  2830  00250E  5194               	movf	(MAX_7221_WRITE_FLOAT@digits+1)& (0+255),w,b
  2831  002510  0A2E               	xorlw	46
  2832  002512  A4D8               	btfss	status,2,c
  2833  002514  D009               	goto	l5169
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;max7221.c: 54: MAX_7221_WRITE(0x01, digits[0]|0x80);
  2837  002516  0100               	movlb	0	; () banked
  2838  002518  0100               	movlb	0	; () banked
  2839  00251A  5193               	movf	MAX_7221_WRITE_FLOAT@digits& (0+255),w,b
  2840  00251C  0980               	iorlw	128
  2841  00251E  6E02               	movwf	MAX_7221_WRITE@value,c
  2842  002520  0E01               	movlw	1
  2843  002522  ECAC  F016         	call	_MAX_7221_WRITE
  2844  002526  D005               	goto	l5171
  2845  002528                     l5169:
  2846                           
  2847                           ;max7221.c: 55: else
  2848                           ;max7221.c: 56: MAX_7221_WRITE(0x01, digits[0]);
  2849  002528  C093  F002         	movff	MAX_7221_WRITE_FLOAT@digits,MAX_7221_WRITE@value
  2850  00252C  0E01               	movlw	1
  2851  00252E  ECAC  F016         	call	_MAX_7221_WRITE
  2852  002532                     l5171:
  2853                           
  2854                           ;max7221.c: 57: if(digits[2] = '.')
  2855  002532  6E5F               	movwf	??_MAX_7221_WRITE_FLOAT& (0+255),c
  2856  002534  0E2E               	movlw	46
  2857  002536  0100               	movlb	0	; () banked
  2858  002538  0100               	movlb	0	; () banked
  2859  00253A  6F95               	movwf	(MAX_7221_WRITE_FLOAT@digits+2)& (0+255),b
  2860  00253C  505F               	movf	??_MAX_7221_WRITE_FLOAT& (0+255),w,c
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;max7221.c: 58: MAX_7221_WRITE(0x02, digits[1]|0x80);
  2864  00253E  0100               	movlb	0	; () banked
  2865  002540  0100               	movlb	0	; () banked
  2866  002542  5194               	movf	(MAX_7221_WRITE_FLOAT@digits+1)& (0+255),w,b
  2867  002544  0980               	iorlw	128
  2868  002546  6E02               	movwf	MAX_7221_WRITE@value,c
  2869  002548  0E02               	movlw	2
  2870  00254A  ECAC  F016         	call	_MAX_7221_WRITE
  2871                           
  2872                           ;max7221.c: 61: MAX_7221_WRITE(0x03, digits[3]);
  2873                           
  2874                           ;max7221.c: 59: else
  2875                           ;max7221.c: 60: MAX_7221_WRITE(0x02, digits[1]);
  2876  00254E  C096  F002         	movff	MAX_7221_WRITE_FLOAT@digits+3,MAX_7221_WRITE@value
  2877  002552  0E03               	movlw	3
  2878  002554  ECAC  F016         	call	_MAX_7221_WRITE
  2879  002558  0012               	return	
  2880  00255A                     __end_of_MAX_7221_WRITE_FLOAT:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodl	equ	0xFF3
  2887                           intcon2	equ	0xFF1
  2888                           postinc2	equ	0xFDE
  2889                           postdec2	equ	0xFDD
  2890                           fsr2h	equ	0xFDA
  2891                           fsr2l	equ	0xFD9
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _sprintf *****************
  2895 ;; Defined at:
  2896 ;;		line 492 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  sp              2    0[BANK0 ] PTR unsigned char 
  2899 ;;		 -> MAX_7221_WRITE_FLOAT@digits(4), 
  2900 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  2901 ;;		 -> STR_1(5), 
  2902 ;; Auto vars:     Size  Location     Type
  2903 ;;  vd              4   22[BANK0 ] unsigned long 
  2904 ;;  vd              4   26[BANK0 ] unsigned long 
  2905 ;;  _val            5   32[BANK0 ] struct .
  2906 ;;  fval            3   44[BANK0 ] struct .
  2907 ;;  integ           3   37[BANK0 ] struct .
  2908 ;;  ival            3    0        struct .
  2909 ;;  prec            2   42[BANK0 ] int 
  2910 ;;  exp             2   40[BANK0 ] int 
  2911 ;;  flag            2   30[BANK0 ] unsigned short 
  2912 ;;  ap              2   20[BANK0 ] PTR void [1]
  2913 ;;		 -> ?_sprintf(2), 
  2914 ;;  width           2    0        int 
  2915 ;;  c               1   47[BANK0 ] char 
  2916 ;;  d               1    0        unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  2    0[BANK0 ] int 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2926 ;;      Params:         0       7       0       0       0       0       0       0       0
  2927 ;;      Locals:         0      35       0       0       0       0       0       0       0
  2928 ;;      Temps:          0       6       0       0       0       0       0       0       0
  2929 ;;      Totals:         0      48       0       0       0       0       0       0       0
  2930 ;;Total ram usage:       48 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    4
  2933 ;; This function calls:
  2934 ;;		___asftadd
  2935 ;;		___asftmul
  2936 ;;		___asftsub
  2937 ;;		___awdiv
  2938 ;;		___ftge
  2939 ;;		___ftmul
  2940 ;;		___ftneg
  2941 ;;		___fttol
  2942 ;;		___lldiv
  2943 ;;		___llmod
  2944 ;;		___lltoft
  2945 ;;		___wmul
  2946 ;;		__div_to_l_
  2947 ;;		__tdiv_to_l_
  2948 ;;		_fround
  2949 ;;		_isdigit
  2950 ;;		_scale
  2951 ;; This function is called by:
  2952 ;;		_MAX_7221_WRITE_FLOAT
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           	psect	text16
  2957  0008A6                     __ptext16:
  2958                           	opt stack 0
  2959  0008A6                     _sprintf:
  2960                           	opt stack 24
  2961                           
  2962                           ;doprnt.c: 494: va_list ap;
  2963                           ;doprnt.c: 499: signed char c;
  2964                           ;doprnt.c: 501: int width;
  2965                           ;doprnt.c: 504: int prec;
  2966                           ;doprnt.c: 508: unsigned short flag;
  2967                           ;doprnt.c: 515: char d;
  2968                           ;doprnt.c: 516: double fval, integ;
  2969                           ;doprnt.c: 517: int exp;
  2970                           ;doprnt.c: 518: double ival;
  2971                           ;doprnt.c: 519: union {
  2972                           ;doprnt.c: 520: unsigned long _val;
  2973                           ;doprnt.c: 521: struct {
  2974                           ;doprnt.c: 522: const char * _cp;
  2975                           ;doprnt.c: 523: unsigned _len;
  2976                           ;doprnt.c: 524: } _str;
  2977                           ;doprnt.c: 525: } _val;
  2978                           ;doprnt.c: 542: *ap = __va_start();
  2979                           
  2980                           ;incstack = 0
  2981  0008A6  0100               	movlb	0	; () banked
  2982  0008A8  0E00               	movlw	high (?_sprintf+4)
  2983  0008AA  0100               	movlb	0	; () banked
  2984  0008AC  0100               	movlb	0	; () banked
  2985  0008AE  6F75               	movwf	(sprintf@ap+1)& (0+255),b
  2986  0008B0  0100               	movlb	0	; () banked
  2987  0008B2  0E64               	movlw	low (?_sprintf+4)
  2988  0008B4  0100               	movlb	0	; () banked
  2989  0008B6  0100               	movlb	0	; () banked
  2990  0008B8  6F74               	movwf	sprintf@ap& (0+255),b
  2991                           
  2992                           ;doprnt.c: 545: while(c = *f++) {
  2993  0008BA  EFB9  F008         	goto	l5007
  2994  0008BE                     l4805:
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;doprnt.c: 547: if(c != '%')
  2998  0008BE  0100               	movlb	0	; () banked
  2999  0008C0  0100               	movlb	0	; () banked
  3000  0008C2  518F               	movf	sprintf@c& (0+255),w,b
  3001  0008C4  0A25               	xorlw	37
  3002  0008C6  B4D8               	btfsc	status,2,c
  3003  0008C8  D009               	goto	l4811
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;doprnt.c: 549: {
  3007                           ;doprnt.c: 550: ((*sp++ = (c)));
  3008  0008CA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3009  0008CE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3010  0008D2  0100               	movlb	0	; () banked
  3011  0008D4  C08F  FFDF         	movff	sprintf@c,indf2
  3012  0008D8  EFB5  F008         	goto	L1
  3013  0008DC                     l4811:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 552: }
  3017                           ;doprnt.c: 557: flag = 0;
  3018  0008DC  0E00               	movlw	0
  3019  0008DE  0100               	movlb	0	; () banked
  3020  0008E0  0100               	movlb	0	; () banked
  3021  0008E2  6F7F               	movwf	(sprintf@flag+1)& (0+255),b
  3022  0008E4  0E00               	movlw	0
  3023  0008E6  0100               	movlb	0	; () banked
  3024  0008E8  6F7E               	movwf	sprintf@flag& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;doprnt.c: 620: if(*f == '.') {
  3028  0008EA  0100               	movlb	0	; () banked
  3029  0008EC  C062  FFF6         	movff	sprintf@f,tblptrl
  3030  0008F0  0100               	movlb	0	; () banked
  3031  0008F2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3032  0008F6  0008               	tblrd		*
  3033  0008F8  50F5               	movf	tablat,w,c
  3034  0008FA  0A2E               	xorlw	46
  3035  0008FC  A4D8               	btfss	status,2,c
  3036  0008FE  D03E               	goto	l4825
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;doprnt.c: 621: flag |= 0x4000;
  3040  000900  0100               	movlb	0	; () banked
  3041  000902  0100               	movlb	0	; () banked
  3042  000904  8D7F               	bsf	(sprintf@flag+1)& (0+255),6,b
  3043                           
  3044                           ;doprnt.c: 622: f++;
  3045  000906  0100               	movlb	0	; () banked
  3046  000908  0100               	movlb	0	; () banked
  3047  00090A  4B62               	infsnz	sprintf@f& (0+255),f,b
  3048  00090C  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;doprnt.c: 629: {
  3052                           ;doprnt.c: 630: prec = 0;
  3053  00090E  0E00               	movlw	0
  3054  000910  0100               	movlb	0	; () banked
  3055  000912  0100               	movlb	0	; () banked
  3056  000914  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3057  000916  0E00               	movlw	0
  3058  000918  0100               	movlb	0	; () banked
  3059  00091A  6F8A               	movwf	sprintf@prec& (0+255),b
  3060                           
  3061                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  3062  00091C  D022               	goto	l4823
  3063  00091E                     l4819:
  3064                           
  3065                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  3066  00091E  C08A  F011         	movff	sprintf@prec,___wmul@multiplier
  3067  000922  C08B  F012         	movff	sprintf@prec+1,___wmul@multiplier+1
  3068  000926  0E00               	movlw	0
  3069  000928  6E14               	movwf	___wmul@multiplicand+1,c
  3070  00092A  0E0A               	movlw	10
  3071  00092C  6E13               	movwf	___wmul@multiplicand,c
  3072  00092E  ECEA  F015         	call	___wmul	;wreg free
  3073  000932  0100               	movlb	0	; () banked
  3074  000934  C062  FFF6         	movff	sprintf@f,tblptrl
  3075  000938  0100               	movlb	0	; () banked
  3076  00093A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3077  00093E  0008               	tblrd		*
  3078  000940  50F5               	movf	tablat,w,c
  3079  000942  2611               	addwf	?___wmul,f,c
  3080  000944  0E00               	movlw	0
  3081  000946  2212               	addwfc	?___wmul+1,f,c
  3082  000948  0ED0               	movlw	208
  3083  00094A  2411               	addwf	?___wmul,w,c
  3084  00094C  0100               	movlb	0	; () banked
  3085  00094E  0100               	movlb	0	; () banked
  3086  000950  6F8A               	movwf	sprintf@prec& (0+255),b
  3087  000952  0EFF               	movlw	255
  3088  000954  2012               	addwfc	?___wmul+1,w,c
  3089  000956  0100               	movlb	0	; () banked
  3090  000958  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093  00095A  0100               	movlb	0	; () banked
  3094  00095C  0100               	movlb	0	; () banked
  3095  00095E  4B62               	infsnz	sprintf@f& (0+255),f,b
  3096  000960  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3097  000962                     l4823:
  3098                           
  3099                           ; BSR set to: 0
  3100  000962  0100               	movlb	0	; () banked
  3101  000964  C062  FFF6         	movff	sprintf@f,tblptrl
  3102  000968  0100               	movlb	0	; () banked
  3103  00096A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3104  00096E  0008               	tblrd		*
  3105  000970  50F5               	movf	tablat,w,c
  3106  000972  EC50  F016         	call	_isdigit
  3107  000976  A0D8               	btfss	status,0,c
  3108  000978  D010               	goto	l4833
  3109  00097A  D7D1               	goto	l4819
  3110  00097C                     l4825:
  3111                           
  3112                           ;doprnt.c: 635: prec = 0;
  3113  00097C  0E00               	movlw	0
  3114  00097E  0100               	movlb	0	; () banked
  3115  000980  0100               	movlb	0	; () banked
  3116  000982  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3117  000984  0E00               	movlw	0
  3118  000986  0100               	movlb	0	; () banked
  3119  000988  6F8A               	movwf	sprintf@prec& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;doprnt.c: 637: flag |= 0x1000;
  3123  00098A  0100               	movlb	0	; () banked
  3124  00098C  0100               	movlb	0	; () banked
  3125  00098E  897F               	bsf	(sprintf@flag+1)& (0+255),4,b
  3126  000990  D004               	goto	l4833
  3127  000992                     l4829:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;doprnt.c: 672: flag |= 0x400;
  3131  000992  0100               	movlb	0	; () banked
  3132  000994  0100               	movlb	0	; () banked
  3133  000996  857F               	bsf	(sprintf@flag+1)& (0+255),2,b
  3134                           
  3135                           ;doprnt.c: 673: break;
  3136  000998  D017               	goto	l4835
  3137  00099A                     l4833:
  3138  00099A  0100               	movlb	0	; () banked
  3139  00099C  C062  FFF6         	movff	sprintf@f,tblptrl
  3140  0009A0  0100               	movlb	0	; () banked
  3141  0009A2  C063  FFF7         	movff	sprintf@f+1,tblptrh
  3142  0009A6  0100               	movlb	0	; () banked
  3143  0009A8  0100               	movlb	0	; () banked
  3144  0009AA  4B62               	infsnz	sprintf@f& (0+255),f,b
  3145  0009AC  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  3146  0009AE  0008               	tblrd		*
  3147  0009B0  0100               	movlb	0	; () banked
  3148  0009B2  CFF5 F08F          	movff	tablat,sprintf@c
  3149  0009B6  0100               	movlb	0	; () banked
  3150  0009B8  518F               	movf	sprintf@c& (0+255),w,b
  3151                           
  3152                           ; Switch size 1, requested type "space"
  3153                           ; Number of cases is 2, Range of values is 0 to 102
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte            7     4 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  0009BA  0A00               	xorlw	0	; case 0
  3159  0009BC  B4D8               	btfsc	status,2,c
  3160  0009BE  D3EB               	goto	l5009
  3161  0009C0  0A66               	xorlw	102	; case 102
  3162  0009C2  B4D8               	btfsc	status,2,c
  3163  0009C4  D7E6               	goto	l4829
  3164  0009C6  D3D5               	goto	l5007
  3165  0009C8                     l4835:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;doprnt.c: 834: if(flag & (0x700)) {
  3169  0009C8  0E07               	movlw	7
  3170  0009CA  0100               	movlb	0	; () banked
  3171  0009CC  0100               	movlb	0	; () banked
  3172  0009CE  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  3173  0009D0  B4D8               	btfsc	status,2,c
  3174  0009D2  D36B               	goto	l4987
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;doprnt.c: 836: if(flag & 0x1000)
  3178  0009D4  0100               	movlb	0	; () banked
  3179  0009D6  0100               	movlb	0	; () banked
  3180  0009D8  A97F               	btfss	(sprintf@flag+1)& (0+255),4,b
  3181  0009DA  D007               	goto	l4841
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;doprnt.c: 838: prec = 6;
  3185  0009DC  0E00               	movlw	0
  3186  0009DE  0100               	movlb	0	; () banked
  3187  0009E0  0100               	movlb	0	; () banked
  3188  0009E2  6F8B               	movwf	(sprintf@prec+1)& (0+255),b
  3189  0009E4  0E06               	movlw	6
  3190  0009E6  0100               	movlb	0	; () banked
  3191  0009E8  6F8A               	movwf	sprintf@prec& (0+255),b
  3192  0009EA                     l4841:
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3196  0009EA  C074  FFD9         	movff	sprintf@ap,fsr2l
  3197  0009EE  C075  FFDA         	movff	sprintf@ap+1,fsr2h
  3198  0009F2  0100               	movlb	0	; () banked
  3199  0009F4  CFDE F08C          	movff	postinc2,sprintf@fval
  3200  0009F8  0100               	movlb	0	; () banked
  3201  0009FA  CFDE F08D          	movff	postinc2,sprintf@fval+1
  3202  0009FE  0100               	movlb	0	; () banked
  3203  000A00  CFDD F08E          	movff	postdec2,sprintf@fval+2
  3204                           
  3205                           ; BSR set to: 0
  3206  000A04  0E03               	movlw	3
  3207  000A06  0100               	movlb	0	; () banked
  3208  000A08  0100               	movlb	0	; () banked
  3209  000A0A  2774               	addwf	sprintf@ap& (0+255),f,b
  3210  000A0C  0E00               	movlw	0
  3211  000A0E  0100               	movlb	0	; () banked
  3212  000A10  2375               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;doprnt.c: 840: if(fval < 0.0) {
  3216  000A12  0100               	movlb	0	; () banked
  3217  000A14  0100               	movlb	0	; () banked
  3218  000A16  518E               	movf	(sprintf@fval+2)& (0+255),w,b
  3219  000A18  0A80               	xorlw	128
  3220  000A1A  0F80               	addlw	128
  3221  000A1C  E107               	bnz	u2545
  3222  000A1E  0E00               	movlw	0
  3223  000A20  0100               	movlb	0	; () banked
  3224  000A22  5D8D               	subwf	(sprintf@fval+1)& (0+255),w,b
  3225  000A24  E103               	bnz	u2545
  3226  000A26  0E00               	movlw	0
  3227  000A28  0100               	movlb	0	; () banked
  3228  000A2A  5D8C               	subwf	sprintf@fval& (0+255),w,b
  3229  000A2C                     u2545:
  3230  000A2C  B0D8               	btfsc	status,0,c
  3231  000A2E  D012               	goto	l4851
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;doprnt.c: 841: fval = -fval;
  3235  000A30  C08C  F01C         	movff	sprintf@fval,___ftneg@f1
  3236  000A34  C08D  F01D         	movff	sprintf@fval+1,___ftneg@f1+1
  3237  000A38  C08E  F01E         	movff	sprintf@fval+2,___ftneg@f1+2
  3238  000A3C  EC7A  F016         	call	___ftneg	;wreg free
  3239  000A40  C01C  F08C         	movff	?___ftneg,sprintf@fval
  3240  000A44  C01D  F08D         	movff	?___ftneg+1,sprintf@fval+1
  3241  000A48  C01E  F08E         	movff	?___ftneg+2,sprintf@fval+2
  3242                           
  3243                           ;doprnt.c: 842: flag |= 0x03;
  3244  000A4C  0E03               	movlw	3
  3245  000A4E  0100               	movlb	0	; () banked
  3246  000A50  0100               	movlb	0	; () banked
  3247  000A52  137E               	iorwf	sprintf@flag& (0+255),f,b
  3248  000A54                     l4851:
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;doprnt.c: 843: }
  3252                           ;doprnt.c: 844: exp = 0;
  3253  000A54  0E00               	movlw	0
  3254  000A56  0100               	movlb	0	; () banked
  3255  000A58  0100               	movlb	0	; () banked
  3256  000A5A  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3257  000A5C  0E00               	movlw	0
  3258  000A5E  0100               	movlb	0	; () banked
  3259  000A60  6F88               	movwf	sprintf@exp& (0+255),b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;doprnt.c: 845: if( fval!=0) {
  3263  000A62  0E7F               	movlw	127
  3264  000A64  0100               	movlb	0	; () banked
  3265  000A66  0100               	movlb	0	; () banked
  3266  000A68  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  3267  000A6A  0100               	movlb	0	; () banked
  3268  000A6C  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3269  000A6E  0100               	movlb	0	; () banked
  3270  000A70  118C               	iorwf	sprintf@fval& (0+255),w,b
  3271  000A72  B4D8               	btfsc	status,2,c
  3272  000A74  D09D               	goto	l4879
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3276  000A76  0E82               	movlw	130
  3277  000A78  0100               	movlb	0	; () banked
  3278  000A7A  6F67               	movwf	??_sprintf& (0+255),b
  3279  000A7C  0EFF               	movlw	255
  3280  000A7E  6F68               	movwf	(??_sprintf+1)& (0+255),b
  3281  000A80  0100               	movlb	0	; () banked
  3282  000A82  C08C  F069         	movff	sprintf@fval,??_sprintf+2
  3283  000A86  0100               	movlb	0	; () banked
  3284  000A88  C08D  F06A         	movff	sprintf@fval+1,??_sprintf+3
  3285  000A8C  0100               	movlb	0	; () banked
  3286  000A8E  C08E  F06B         	movff	sprintf@fval+2,??_sprintf+4
  3287  000A92  0100               	movlb	0	; () banked
  3288  000A94  C08F  F06C         	movff	sprintf@fval+3,??_sprintf+5
  3289  000A98  0E10               	movlw	16
  3290  000A9A  D006               	goto	u2560
  3291  000A9C                     u2565:
  3292  000A9C  0100               	movlb	0	; () banked
  3293  000A9E  90D8               	bcf	status,0,c
  3294  000AA0  336C               	rrcf	(??_sprintf+5)& (0+255),f,b
  3295  000AA2  336B               	rrcf	(??_sprintf+4)& (0+255),f,b
  3296  000AA4  336A               	rrcf	(??_sprintf+3)& (0+255),f,b
  3297  000AA6  3369               	rrcf	(??_sprintf+2)& (0+255),f,b
  3298  000AA8                     u2560:
  3299  000AA8  2EE8               	decfsz	wreg,f,c
  3300  000AAA  D7F8               	goto	u2565
  3301  000AAC  0100               	movlb	0	; () banked
  3302  000AAE  5169               	movf	(??_sprintf+2)& (0+255),w,b
  3303  000AB0  0100               	movlb	0	; () banked
  3304  000AB2  2567               	addwf	??_sprintf& (0+255),w,b
  3305  000AB4  0100               	movlb	0	; () banked
  3306  000AB6  0100               	movlb	0	; () banked
  3307  000AB8  6F88               	movwf	sprintf@exp& (0+255),b
  3308  000ABA  0100               	movlb	0	; () banked
  3309  000ABC  0100               	movlb	0	; () banked
  3310  000ABE  0E00               	movlw	0
  3311  000AC0  2168               	addwfc	(??_sprintf+1)& (0+255),w,b
  3312  000AC2  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;doprnt.c: 847: exp--;
  3316  000AC4  0100               	movlb	0	; () banked
  3317  000AC6  0100               	movlb	0	; () banked
  3318  000AC8  0788               	decf	sprintf@exp& (0+255),f,b
  3319  000ACA  A0D8               	btfss	status,0,c
  3320  000ACC  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;doprnt.c: 848: exp *= 3;
  3324  000ACE  C088  F011         	movff	sprintf@exp,___wmul@multiplier
  3325  000AD2  C089  F012         	movff	sprintf@exp+1,___wmul@multiplier+1
  3326  000AD6  0E00               	movlw	0
  3327  000AD8  6E14               	movwf	___wmul@multiplicand+1,c
  3328  000ADA  0E03               	movlw	3
  3329  000ADC  6E13               	movwf	___wmul@multiplicand,c
  3330  000ADE  ECEA  F015         	call	___wmul	;wreg free
  3331  000AE2  C011  F088         	movff	?___wmul,sprintf@exp
  3332  000AE6  C012  F089         	movff	?___wmul+1,sprintf@exp+1
  3333                           
  3334                           ;doprnt.c: 849: exp /= 10;
  3335  000AEA  C088  F008         	movff	sprintf@exp,___awdiv@dividend
  3336  000AEE  C089  F009         	movff	sprintf@exp+1,___awdiv@dividend+1
  3337  000AF2  0E00               	movlw	0
  3338  000AF4  6E0B               	movwf	___awdiv@divisor+1,c
  3339  000AF6  0E0A               	movlw	10
  3340  000AF8  6E0A               	movwf	___awdiv@divisor,c
  3341  000AFA  EC09  F013         	call	___awdiv	;wreg free
  3342  000AFE  C008  F088         	movff	?___awdiv,sprintf@exp
  3343  000B02  C009  F089         	movff	?___awdiv+1,sprintf@exp+1
  3344                           
  3345                           ;doprnt.c: 850: if(exp < 0)
  3346  000B06  0100               	movlb	0	; () banked
  3347  000B08  0100               	movlb	0	; () banked
  3348  000B0A  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3349  000B0C  0A80               	xorlw	128
  3350  000B0E  6EF3               	movwf	prodl,c
  3351  000B10  0E80               	movlw	128
  3352  000B12  5CF3               	subwf	prodl,w,c
  3353  000B14  0E00               	movlw	0
  3354  000B16  B4D8               	btfsc	status,2,c
  3355  000B18  5D88               	subwf	sprintf@exp& (0+255),w,b
  3356  000B1A  B0D8               	btfsc	status,0,c
  3357  000B1C  D005               	goto	l4867
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;doprnt.c: 851: exp--;
  3361  000B1E  0100               	movlb	0	; () banked
  3362  000B20  0100               	movlb	0	; () banked
  3363  000B22  0788               	decf	sprintf@exp& (0+255),f,b
  3364  000B24  A0D8               	btfss	status,0,c
  3365  000B26  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3366  000B28                     l4867:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;doprnt.c: 855: integ = scale(-exp);
  3370  000B28  0100               	movlb	0	; () banked
  3371  000B2A  0100               	movlb	0	; () banked
  3372  000B2C  5188               	movf	sprintf@exp& (0+255),w,b
  3373  000B2E  0800               	sublw	0
  3374  000B30  ECD2  F008         	call	_scale
  3375  000B34  C049  F085         	movff	?_scale,sprintf@integ
  3376  000B38  C04A  F086         	movff	?_scale+1,sprintf@integ+1
  3377  000B3C  C04B  F087         	movff	?_scale+2,sprintf@integ+2
  3378                           
  3379                           ;doprnt.c: 856: integ *= fval;
  3380  000B40  0100               	movlb	0	; () banked
  3381  000B42  0E00               	movlw	high sprintf@integ
  3382  000B44  6E4A               	movwf	___asftmul@f1p+1,c
  3383  000B46  0100               	movlb	0	; () banked
  3384  000B48  0E85               	movlw	low sprintf@integ
  3385  000B4A  6E49               	movwf	___asftmul@f1p,c
  3386  000B4C  C08C  F04B         	movff	sprintf@fval,___asftmul@f2
  3387  000B50  C08D  F04C         	movff	sprintf@fval+1,___asftmul@f2+1
  3388  000B54  C08E  F04D         	movff	sprintf@fval+2,___asftmul@f2+2
  3389  000B58  ECAE  F015         	call	___asftmul	;wreg free
  3390                           
  3391                           ;doprnt.c: 857: if(integ < 1.0)
  3392  000B5C  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3393  000B60  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3394  000B64  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3395  000B68  0E00               	movlw	0
  3396  000B6A  6E04               	movwf	___ftge@ff2,c
  3397  000B6C  0E80               	movlw	128
  3398  000B6E  6E05               	movwf	___ftge@ff2+1,c
  3399  000B70  0E3F               	movlw	63
  3400  000B72  6E06               	movwf	___ftge@ff2+2,c
  3401  000B74  EC4D  F014         	call	___ftge	;wreg free
  3402  000B78  B0D8               	btfsc	status,0,c
  3403  000B7A  D006               	goto	l4875
  3404                           
  3405                           ;doprnt.c: 858: exp--;
  3406  000B7C  0100               	movlb	0	; () banked
  3407  000B7E  0100               	movlb	0	; () banked
  3408  000B80  0788               	decf	sprintf@exp& (0+255),f,b
  3409  000B82  A0D8               	btfss	status,0,c
  3410  000B84  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3411  000B86  D014               	goto	l4879
  3412  000B88                     l4875:
  3413                           
  3414                           ;doprnt.c: 859: else if(integ >= 10.0)
  3415  000B88  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3416  000B8C  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3417  000B90  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3418  000B94  0E00               	movlw	0
  3419  000B96  6E04               	movwf	___ftge@ff2,c
  3420  000B98  0E20               	movlw	32
  3421  000B9A  6E05               	movwf	___ftge@ff2+1,c
  3422  000B9C  0E41               	movlw	65
  3423  000B9E  6E06               	movwf	___ftge@ff2+2,c
  3424  000BA0  EC4D  F014         	call	___ftge	;wreg free
  3425  000BA4  A0D8               	btfss	status,0,c
  3426  000BA6  D004               	goto	l4879
  3427                           
  3428                           ;doprnt.c: 860: exp++;
  3429  000BA8  0100               	movlb	0	; () banked
  3430  000BAA  0100               	movlb	0	; () banked
  3431  000BAC  4B88               	infsnz	sprintf@exp& (0+255),f,b
  3432  000BAE  2B89               	incf	(sprintf@exp+1)& (0+255),f,b
  3433  000BB0                     l4879:
  3434                           
  3435                           ;doprnt.c: 861: }
  3436                           ;doprnt.c: 1121: if(prec <= 12)
  3437  000BB0  0100               	movlb	0	; () banked
  3438  000BB2  0100               	movlb	0	; () banked
  3439  000BB4  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  3440  000BB6  0A80               	xorlw	128
  3441  000BB8  6EF3               	movwf	prodl,c
  3442  000BBA  0E80               	movlw	128
  3443  000BBC  5CF3               	subwf	prodl,w,c
  3444  000BBE  0E0D               	movlw	13
  3445  000BC0  B4D8               	btfsc	status,2,c
  3446  000BC2  5D8A               	subwf	sprintf@prec& (0+255),w,b
  3447  000BC4  B0D8               	btfsc	status,0,c
  3448  000BC6  D013               	goto	l4883
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;doprnt.c: 1122: fval += fround(prec);
  3452  000BC8  0100               	movlb	0	; () banked
  3453  000BCA  0E00               	movlw	high sprintf@fval
  3454  000BCC  6E54               	movwf	___asftadd@f1p+1,c
  3455  000BCE  0100               	movlb	0	; () banked
  3456  000BD0  0E8C               	movlw	low sprintf@fval
  3457  000BD2  6E53               	movwf	___asftadd@f1p,c
  3458  000BD4  0100               	movlb	0	; () banked
  3459  000BD6  0100               	movlb	0	; () banked
  3460  000BD8  518A               	movf	sprintf@prec& (0+255),w,b
  3461  000BDA  EC02  F00C         	call	_fround
  3462  000BDE  C049  F055         	movff	?_fround,___asftadd@f2
  3463  000BE2  C04A  F056         	movff	?_fround+1,___asftadd@f2+1
  3464  000BE6  C04B  F057         	movff	?_fround+2,___asftadd@f2+2
  3465  000BEA  ECCC  F015         	call	___asftadd	;wreg free
  3466  000BEE                     l4883:
  3467                           
  3468                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3469  000BEE  0100               	movlb	0	; () banked
  3470  000BF0  0100               	movlb	0	; () banked
  3471  000BF2  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3472  000BF4  0A80               	xorlw	128
  3473  000BF6  6EF3               	movwf	prodl,c
  3474  000BF8  0E80               	movlw	128
  3475  000BFA  5CF3               	subwf	prodl,w,c
  3476  000BFC  0E0A               	movlw	10
  3477  000BFE  B4D8               	btfsc	status,2,c
  3478  000C00  5D88               	subwf	sprintf@exp& (0+255),w,b
  3479  000C02  B0D8               	btfsc	status,0,c
  3480  000C04  D02B               	goto	l4891
  3481                           
  3482                           ; BSR set to: 0
  3483  000C06  0E7F               	movlw	127
  3484  000C08  0100               	movlb	0	; () banked
  3485  000C0A  0100               	movlb	0	; () banked
  3486  000C0C  158E               	andwf	(sprintf@fval+2)& (0+255),w,b
  3487  000C0E  0100               	movlb	0	; () banked
  3488  000C10  118D               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3489  000C12  0100               	movlb	0	; () banked
  3490  000C14  118C               	iorwf	sprintf@fval& (0+255),w,b
  3491  000C16  B4D8               	btfsc	status,2,c
  3492  000C18  D071               	goto	l4907
  3493                           
  3494                           ; BSR set to: 0
  3495  000C1A  C08C  F050         	movff	sprintf@fval,___fttol@f1
  3496  000C1E  C08D  F051         	movff	sprintf@fval+1,___fttol@f1+1
  3497  000C22  C08E  F052         	movff	sprintf@fval+2,___fttol@f1+2
  3498  000C26  ECF5  F010         	call	___fttol	;wreg free
  3499  000C2A  C050  F067         	movff	?___fttol,??_sprintf
  3500  000C2E  C051  F068         	movff	?___fttol+1,??_sprintf+1
  3501  000C32  C052  F069         	movff	?___fttol+2,??_sprintf+2
  3502  000C36  C053  F06A         	movff	?___fttol+3,??_sprintf+3
  3503  000C3A  0100               	movlb	0	; () banked
  3504  000C3C  516A               	movf	(??_sprintf+3)& (0+255),w,b
  3505  000C3E  1167               	iorwf	??_sprintf& (0+255),w,b
  3506  000C40  1168               	iorwf	(??_sprintf+1)& (0+255),w,b
  3507  000C42  1169               	iorwf	(??_sprintf+2)& (0+255),w,b
  3508  000C44  A4D8               	btfss	status,2,c
  3509  000C46  D05A               	goto	l4907
  3510                           
  3511                           ; BSR set to: 0
  3512  000C48  0100               	movlb	0	; () banked
  3513  000C4A  0100               	movlb	0	; () banked
  3514  000C4C  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3515  000C4E  0A80               	xorlw	128
  3516  000C50  0F80               	addlw	-128
  3517  000C52  0E02               	movlw	2
  3518  000C54  B4D8               	btfsc	status,2,c
  3519  000C56  5D88               	subwf	sprintf@exp& (0+255),w,b
  3520  000C58  A0D8               	btfss	status,0,c
  3521  000C5A  D050               	goto	l4907
  3522  000C5C                     l4891:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;doprnt.c: 1129: if(integ < 4.294967296){
  3526  000C5C  C085  F001         	movff	sprintf@integ,___ftge@ff1
  3527  000C60  C086  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  3528  000C64  C087  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  3529  000C68  0E70               	movlw	112
  3530  000C6A  6E04               	movwf	___ftge@ff2,c
  3531  000C6C  0E89               	movlw	137
  3532  000C6E  6E05               	movwf	___ftge@ff2+1,c
  3533  000C70  0E40               	movlw	64
  3534  000C72  6E06               	movwf	___ftge@ff2+2,c
  3535  000C74  EC4D  F014         	call	___ftge	;wreg free
  3536  000C78  B0D8               	btfsc	status,0,c
  3537  000C7A  D003               	goto	l4895
  3538                           
  3539                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3540  000C7C  0100               	movlb	0	; () banked
  3541  000C7E  0EF7               	movlw	247
  3542  000C80  D002               	goto	L2
  3543  000C82                     l4895:
  3544                           
  3545                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3546  000C82  0100               	movlb	0	; () banked
  3547  000C84  0EF8               	movlw	248
  3548  000C86                     L2:
  3549  000C86  0100               	movlb	0	; () banked
  3550  000C88  2788               	addwf	sprintf@exp& (0+255),f,b
  3551  000C8A  0EFF               	movlw	255
  3552  000C8C  0100               	movlb	0	; () banked
  3553  000C8E  2389               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;doprnt.c: 1133: }
  3557                           ;doprnt.c: 1134: integ = scale(exp);
  3558                           
  3559                           ; BSR set to: 0
  3560  000C90  0100               	movlb	0	; () banked
  3561  000C92  0100               	movlb	0	; () banked
  3562  000C94  5188               	movf	sprintf@exp& (0+255),w,b
  3563  000C96  ECD2  F008         	call	_scale
  3564  000C9A  C049  F085         	movff	?_scale,sprintf@integ
  3565  000C9E  C04A  F086         	movff	?_scale+1,sprintf@integ+1
  3566  000CA2  C04B  F087         	movff	?_scale+2,sprintf@integ+2
  3567                           
  3568                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  3569  000CA6  C08C  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3570  000CAA  C08D  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3571  000CAE  C08E  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3572  000CB2  C085  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  3573  000CB6  C086  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  3574  000CBA  C087  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  3575  000CBE  EC5B  F00F         	call	__tdiv_to_l_	;wreg free
  3576  000CC2  C001  F070         	movff	?__tdiv_to_l_,_sprintf$976
  3577  000CC6  C002  F071         	movff	?__tdiv_to_l_+1,_sprintf$976+1
  3578  000CCA  C003  F072         	movff	?__tdiv_to_l_+2,_sprintf$976+2
  3579  000CCE  C004  F073         	movff	?__tdiv_to_l_+3,_sprintf$976+3
  3580  000CD2  C070  F080         	movff	_sprintf$976,sprintf@_val
  3581  000CD6  C071  F081         	movff	_sprintf$976+1,sprintf@_val+1
  3582  000CDA  C072  F082         	movff	_sprintf$976+2,sprintf@_val+2
  3583  000CDE  C073  F083         	movff	_sprintf$976+3,sprintf@_val+3
  3584                           
  3585                           ;doprnt.c: 1138: fval = 0.0;
  3586  000CE2  0E00               	movlw	0
  3587  000CE4  0100               	movlb	0	; () banked
  3588  000CE6  0100               	movlb	0	; () banked
  3589  000CE8  6F8C               	movwf	sprintf@fval& (0+255),b
  3590  000CEA  0E00               	movlw	0
  3591  000CEC  0100               	movlb	0	; () banked
  3592  000CEE  0100               	movlb	0	; () banked
  3593  000CF0  6F8D               	movwf	(sprintf@fval+1)& (0+255),b
  3594  000CF2  0E00               	movlw	0
  3595  000CF4  0100               	movlb	0	; () banked
  3596  000CF6  0100               	movlb	0	; () banked
  3597  000CF8  6F8E               	movwf	(sprintf@fval+2)& (0+255),b
  3598                           
  3599                           ;doprnt.c: 1139: } else {
  3600  000CFA  D02F               	goto	l4913
  3601  000CFC                     l4907:
  3602                           
  3603                           ; BSR set to: 0
  3604                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  3605  000CFC  C08C  F050         	movff	sprintf@fval,___fttol@f1
  3606  000D00  C08D  F051         	movff	sprintf@fval+1,___fttol@f1+1
  3607  000D04  C08E  F052         	movff	sprintf@fval+2,___fttol@f1+2
  3608  000D08  ECF5  F010         	call	___fttol	;wreg free
  3609  000D0C  C050  F080         	movff	?___fttol,sprintf@_val
  3610  000D10  C051  F081         	movff	?___fttol+1,sprintf@_val+1
  3611  000D14  C052  F082         	movff	?___fttol+2,sprintf@_val+2
  3612  000D18  C053  F083         	movff	?___fttol+3,sprintf@_val+3
  3613                           
  3614                           ;doprnt.c: 1141: fval -= (double)_val._val;
  3615  000D1C  0100               	movlb	0	; () banked
  3616  000D1E  0E00               	movlw	high sprintf@fval
  3617  000D20  6E32               	movwf	___asftsub@f1p+1,c
  3618  000D22  0100               	movlb	0	; () banked
  3619  000D24  0E8C               	movlw	low sprintf@fval
  3620  000D26  6E31               	movwf	___asftsub@f1p,c
  3621  000D28  C080  F009         	movff	sprintf@_val,___lltoft@c
  3622  000D2C  C081  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  3623  000D30  C082  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  3624  000D34  C083  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  3625  000D38  EC0D  F015         	call	___lltoft	;wreg free
  3626  000D3C  C009  F033         	movff	?___lltoft,___asftsub@f2
  3627  000D40  C00A  F034         	movff	?___lltoft+1,___asftsub@f2+1
  3628  000D44  C00B  F035         	movff	?___lltoft+2,___asftsub@f2+2
  3629  000D48  EC90  F015         	call	___asftsub	;wreg free
  3630                           
  3631                           ;doprnt.c: 1142: exp = 0;
  3632  000D4C  0E00               	movlw	0
  3633  000D4E  0100               	movlb	0	; () banked
  3634  000D50  0100               	movlb	0	; () banked
  3635  000D52  6F89               	movwf	(sprintf@exp+1)& (0+255),b
  3636  000D54  0E00               	movlw	0
  3637  000D56  0100               	movlb	0	; () banked
  3638  000D58  6F88               	movwf	sprintf@exp& (0+255),b
  3639  000D5A                     l4913:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;doprnt.c: 1143: }
  3643                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3644  000D5A  0100               	movlb	0	; () banked
  3645  000D5C  6F67               	movwf	??_sprintf& (0+255),b
  3646  000D5E  0E01               	movlw	1
  3647  000D60  0100               	movlb	0	; () banked
  3648  000D62  0100               	movlb	0	; () banked
  3649  000D64  6F8F               	movwf	sprintf@c& (0+255),b
  3650  000D66  0100               	movlb	0	; () banked
  3651  000D68  5167               	movf	??_sprintf& (0+255),w,b
  3652  000D6A                     
  3653                           ; BSR set to: 0
  3654  000D6A  0100               	movlb	0	; () banked
  3655  000D6C  0100               	movlb	0	; () banked
  3656  000D6E  518F               	movf	sprintf@c& (0+255),w,b
  3657  000D70  0A0A               	xorlw	10
  3658  000D72  B4D8               	btfsc	status,2,c
  3659  000D74  D021               	goto	l4927
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  3663                           
  3664                           ; BSR set to: 0
  3665                           
  3666                           ; BSR set to: 0
  3667  000D76  0100               	movlb	0	; () banked
  3668  000D78  0100               	movlb	0	; () banked
  3669  000D7A  518F               	movf	sprintf@c& (0+255),w,b
  3670  000D7C  0D04               	mullw	4
  3671  000D7E  0E01               	movlw	low _dpowers
  3672  000D80  24F3               	addwf	prodl,w,c
  3673  000D82  6EF6               	movwf	tblptrl,c
  3674  000D84  0E08               	movlw	high _dpowers
  3675  000D86  20F4               	addwfc	prodh,w,c
  3676  000D88  6EF7               	movwf	tblptrh,c
  3677  000D8A  0009               	tblrd		*+
  3678  000D8C  50F5               	movf	tablat,w,c
  3679  000D8E  0100               	movlb	0	; () banked
  3680  000D90  0100               	movlb	0	; () banked
  3681  000D92  5D80               	subwf	sprintf@_val& (0+255),w,b
  3682  000D94  0009               	tblrd		*+
  3683  000D96  50F5               	movf	tablat,w,c
  3684  000D98  0100               	movlb	0	; () banked
  3685  000D9A  5981               	subwfb	(sprintf@_val+1)& (0+255),w,b
  3686  000D9C  0009               	tblrd		*+
  3687  000D9E  50F5               	movf	tablat,w,c
  3688  000DA0  0100               	movlb	0	; () banked
  3689  000DA2  5982               	subwfb	(sprintf@_val+2)& (0+255),w,b
  3690  000DA4  0009               	tblrd		*+
  3691  000DA6  50F5               	movf	tablat,w,c
  3692  000DA8  0100               	movlb	0	; () banked
  3693  000DAA  5983               	subwfb	(sprintf@_val+3)& (0+255),w,b
  3694  000DAC  A0D8               	btfss	status,0,c
  3695  000DAE  D004               	goto	l4927
  3696                           
  3697                           ; BSR set to: 0
  3698                           
  3699                           ; BSR set to: 0
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;doprnt.c: 1147: break;
  3703  000DB0  0100               	movlb	0	; () banked
  3704  000DB2  0100               	movlb	0	; () banked
  3705  000DB4  2B8F               	incf	sprintf@c& (0+255),f,b
  3706  000DB6  D7D9               	goto	L3
  3707  000DB8                     l4927:
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;doprnt.c: 1184: {
  3711                           ;doprnt.c: 1197: if(flag & 0x03)
  3712  000DB8  0E03               	movlw	3
  3713  000DBA  0100               	movlb	0	; () banked
  3714  000DBC  0100               	movlb	0	; () banked
  3715  000DBE  157E               	andwf	sprintf@flag& (0+255),w,b
  3716  000DC0  0100               	movlb	0	; () banked
  3717  000DC2  6F67               	movwf	??_sprintf& (0+255),b
  3718  000DC4  0E00               	movlw	0
  3719  000DC6  0100               	movlb	0	; () banked
  3720  000DC8  0100               	movlb	0	; () banked
  3721  000DCA  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  3722  000DCC  0100               	movlb	0	; () banked
  3723  000DCE  6F68               	movwf	(??_sprintf+1)& (0+255),b
  3724  000DD0  0100               	movlb	0	; () banked
  3725  000DD2  5168               	movf	(??_sprintf+1)& (0+255),w,b
  3726  000DD4  1167               	iorwf	??_sprintf& (0+255),w,b
  3727  000DD6  B4D8               	btfsc	status,2,c
  3728  000DD8  D055               	goto	l4941
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  3732  000DDA  C060  FFD9         	movff	sprintf@sp,fsr2l
  3733  000DDE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3734  000DE2  0E2D               	movlw	45
  3735  000DE4  D04A               	goto	L4
  3736  000DE6                     l4933:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;doprnt.c: 1209: {
  3740                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  3741  000DE6  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  3742  000DEA  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3743  000DEE  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3744  000DF2  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3745  000DF6  0100               	movlb	0	; () banked
  3746  000DF8  0100               	movlb	0	; () banked
  3747  000DFA  518F               	movf	sprintf@c& (0+255),w,b
  3748  000DFC  0D04               	mullw	4
  3749  000DFE  0E01               	movlw	low _dpowers
  3750  000E00  24F3               	addwf	prodl,w,c
  3751  000E02  6EF6               	movwf	tblptrl,c
  3752  000E04  0E08               	movlw	high _dpowers
  3753  000E06  20F4               	addwfc	prodh,w,c
  3754  000E08  6EF7               	movwf	tblptrh,c
  3755  000E0A  0009               	tblrd		*+
  3756  000E0C  CFF5 F005          	movff	tablat,___lldiv@divisor
  3757  000E10  0009               	tblrd		*+
  3758  000E12  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3759  000E16  0009               	tblrd		*+
  3760  000E18  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3761  000E1C  000A               	tblrd		*-
  3762  000E1E  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3763  000E22  EC95  F014         	call	___lldiv	;wreg free
  3764  000E26  C001  F076         	movff	?___lldiv,sprintf@vd
  3765  000E2A  C002  F077         	movff	?___lldiv+1,sprintf@vd+1
  3766  000E2E  C003  F078         	movff	?___lldiv+2,sprintf@vd+2
  3767  000E32  C004  F079         	movff	?___lldiv+3,sprintf@vd+3
  3768                           
  3769                           ;doprnt.c: 1211: vd %= 10;
  3770  000E36  C076  F001         	movff	sprintf@vd,___llmod@dividend
  3771  000E3A  C077  F002         	movff	sprintf@vd+1,___llmod@dividend+1
  3772  000E3E  C078  F003         	movff	sprintf@vd+2,___llmod@dividend+2
  3773  000E42  C079  F004         	movff	sprintf@vd+3,___llmod@dividend+3
  3774  000E46  0E0A               	movlw	10
  3775  000E48  6E05               	movwf	___llmod@divisor,c
  3776  000E4A  0E00               	movlw	0
  3777  000E4C  6E06               	movwf	___llmod@divisor+1,c
  3778  000E4E  0E00               	movlw	0
  3779  000E50  6E07               	movwf	___llmod@divisor+2,c
  3780  000E52  0E00               	movlw	0
  3781  000E54  6E08               	movwf	___llmod@divisor+3,c
  3782  000E56  ECD8  F014         	call	___llmod	;wreg free
  3783  000E5A  C001  F076         	movff	?___llmod,sprintf@vd
  3784  000E5E  C002  F077         	movff	?___llmod+1,sprintf@vd+1
  3785  000E62  C003  F078         	movff	?___llmod+2,sprintf@vd+2
  3786  000E66  C004  F079         	movff	?___llmod+3,sprintf@vd+3
  3787                           
  3788                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  3789  000E6A  0100               	movlb	0	; () banked
  3790  000E6C  0100               	movlb	0	; () banked
  3791  000E6E  5176               	movf	sprintf@vd& (0+255),w,b
  3792  000E70  0F30               	addlw	48
  3793  000E72  C060  FFD9         	movff	sprintf@sp,fsr2l
  3794  000E76  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3795  000E7A                     L4:
  3796  000E7A  6EDF               	movwf	indf2,c
  3797                           
  3798                           ; BSR set to: 0
  3799  000E7C  0100               	movlb	0	; () banked
  3800  000E7E  0100               	movlb	0	; () banked
  3801  000E80  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3802  000E82  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3803  000E84                     l4941:
  3804                           
  3805                           ; BSR set to: 0
  3806  000E84  0100               	movlb	0	; () banked
  3807  000E86  0100               	movlb	0	; () banked
  3808  000E88  078F               	decf	sprintf@c& (0+255),f,b
  3809  000E8A  0100               	movlb	0	; () banked
  3810  000E8C  298F               	incf	sprintf@c& (0+255),w,b
  3811  000E8E  B4D8               	btfsc	status,2,c
  3812  000E90  D010               	goto	l4949
  3813  000E92  D7A9               	goto	l4933
  3814  000E94                     l4943:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  3818  000E94  C060  FFD9         	movff	sprintf@sp,fsr2l
  3819  000E98  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3820  000E9C  0E30               	movlw	48
  3821  000E9E  6EDF               	movwf	indf2,c
  3822                           
  3823                           ; BSR set to: 0
  3824  000EA0  0100               	movlb	0	; () banked
  3825  000EA2  0100               	movlb	0	; () banked
  3826  000EA4  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3827  000EA6  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;doprnt.c: 1218: exp--;
  3831  000EA8  0100               	movlb	0	; () banked
  3832  000EAA  0100               	movlb	0	; () banked
  3833  000EAC  0788               	decf	sprintf@exp& (0+255),f,b
  3834  000EAE  A0D8               	btfss	status,0,c
  3835  000EB0  0789               	decf	(sprintf@exp+1)& (0+255),f,b
  3836  000EB2                     l4949:
  3837                           
  3838                           ; BSR set to: 0
  3839  000EB2  0100               	movlb	0	; () banked
  3840  000EB4  0100               	movlb	0	; () banked
  3841  000EB6  5189               	movf	(sprintf@exp+1)& (0+255),w,b
  3842  000EB8  0A80               	xorlw	128
  3843  000EBA  6EF3               	movwf	prodl,c
  3844  000EBC  0E80               	movlw	128
  3845  000EBE  5CF3               	subwf	prodl,w,c
  3846  000EC0  0E01               	movlw	1
  3847  000EC2  B4D8               	btfsc	status,2,c
  3848  000EC4  5D88               	subwf	sprintf@exp& (0+255),w,b
  3849  000EC6  B0D8               	btfsc	status,0,c
  3850  000EC8  D7E5               	goto	l4943
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;doprnt.c: 1219: }
  3854                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3855                           
  3856                           ; BSR set to: 0
  3857  000ECA  0100               	movlb	0	; () banked
  3858  000ECC  0100               	movlb	0	; () banked
  3859  000ECE  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  3860  000ED0  0A80               	xorlw	128
  3861  000ED2  0F80               	addlw	-128
  3862  000ED4  0E09               	movlw	9
  3863  000ED6  B4D8               	btfsc	status,2,c
  3864  000ED8  5D8A               	subwf	sprintf@prec& (0+255),w,b
  3865  000EDA  A0D8               	btfss	status,0,c
  3866  000EDC  D009               	goto	l287
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3870  000EDE  0100               	movlb	0	; () banked
  3871  000EE0  6F67               	movwf	??_sprintf& (0+255),b
  3872  000EE2  0E08               	movlw	8
  3873  000EE4  0100               	movlb	0	; () banked
  3874  000EE6  0100               	movlb	0	; () banked
  3875  000EE8  6F8F               	movwf	sprintf@c& (0+255),b
  3876  000EEA  0100               	movlb	0	; () banked
  3877  000EEC  5167               	movf	??_sprintf& (0+255),w,b
  3878  000EEE  D002               	goto	l4955
  3879  000EF0                     l287:
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 1222: else
  3883                           ;doprnt.c: 1223: c = prec;
  3884  000EF0  C08A  F08F         	movff	sprintf@prec,sprintf@c
  3885  000EF4                     l4955:
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;doprnt.c: 1224: prec -= c;
  3889  000EF4  0100               	movlb	0	; () banked
  3890  000EF6  0100               	movlb	0	; () banked
  3891  000EF8  518F               	movf	sprintf@c& (0+255),w,b
  3892  000EFA  0100               	movlb	0	; () banked
  3893  000EFC  0100               	movlb	0	; () banked
  3894  000EFE  5F8A               	subwf	sprintf@prec& (0+255),f,b
  3895  000F00  0E00               	movlw	0
  3896  000F02  0100               	movlb	0	; () banked
  3897  000F04  BF8F               	btfsc	sprintf@c& (0+255),7,b
  3898  000F06  0EFF               	movlw	255
  3899  000F08  0100               	movlb	0	; () banked
  3900  000F0A  0100               	movlb	0	; () banked
  3901  000F0C  5B8B               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;doprnt.c: 1228: if(c)
  3905  000F0E  0100               	movlb	0	; () banked
  3906  000F10  0100               	movlb	0	; () banked
  3907  000F12  518F               	movf	sprintf@c& (0+255),w,b
  3908  000F14  B4D8               	btfsc	status,2,c
  3909  000F16  D00A               	goto	l4963
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  3913  000F18  C060  FFD9         	movff	sprintf@sp,fsr2l
  3914  000F1C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  3915  000F20  0E2E               	movlw	46
  3916  000F22  6EDF               	movwf	indf2,c
  3917                           
  3918                           ; BSR set to: 0
  3919  000F24  0100               	movlb	0	; () banked
  3920  000F26  0100               	movlb	0	; () banked
  3921  000F28  4B60               	infsnz	sprintf@sp& (0+255),f,b
  3922  000F2A  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  3923  000F2C                     l4963:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3927  000F2C  0100               	movlb	0	; () banked
  3928  000F2E  0100               	movlb	0	; () banked
  3929  000F30  518F               	movf	sprintf@c& (0+255),w,b
  3930  000F32  ECD2  F008         	call	_scale
  3931  000F36  C049  F06D         	movff	?_scale,_sprintf$1701
  3932  000F3A  C04A  F06E         	movff	?_scale+1,_sprintf$1701+1
  3933  000F3E  C04B  F06F         	movff	?_scale+2,_sprintf$1701+2
  3934                           
  3935                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  3936  000F42  C08C  F03D         	movff	sprintf@fval,___ftmul@f2
  3937  000F46  C08D  F03E         	movff	sprintf@fval+1,___ftmul@f2+1
  3938  000F4A  C08E  F03F         	movff	sprintf@fval+2,___ftmul@f2+2
  3939  000F4E  C06D  F03A         	movff	_sprintf$1701,___ftmul@f1
  3940  000F52  C06E  F03B         	movff	_sprintf$1701+1,___ftmul@f1+1
  3941  000F56  C06F  F03C         	movff	_sprintf$1701+2,___ftmul@f1+2
  3942  000F5A  EC79  F010         	call	___ftmul	;wreg free
  3943  000F5E  C03A  F050         	movff	?___ftmul,___fttol@f1
  3944  000F62  C03B  F051         	movff	?___ftmul+1,___fttol@f1+1
  3945  000F66  C03C  F052         	movff	?___ftmul+2,___fttol@f1+2
  3946  000F6A  ECF5  F010         	call	___fttol	;wreg free
  3947  000F6E  C050  F080         	movff	?___fttol,sprintf@_val
  3948  000F72  C051  F081         	movff	?___fttol+1,sprintf@_val+1
  3949  000F76  C052  F082         	movff	?___fttol+2,sprintf@_val+2
  3950  000F7A  C053  F083         	movff	?___fttol+3,sprintf@_val+3
  3951                           
  3952                           ;doprnt.c: 1237: while(c--) {
  3953  000F7E  D077               	goto	l4977
  3954  000F80                     l4967:
  3955                           
  3956                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  3957  000F80  C080  F001         	movff	sprintf@_val,___lldiv@dividend
  3958  000F84  C081  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  3959  000F88  C082  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  3960  000F8C  C083  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  3961  000F90  0100               	movlb	0	; () banked
  3962  000F92  0100               	movlb	0	; () banked
  3963  000F94  518F               	movf	sprintf@c& (0+255),w,b
  3964  000F96  0D04               	mullw	4
  3965  000F98  0E01               	movlw	low _dpowers
  3966  000F9A  24F3               	addwf	prodl,w,c
  3967  000F9C  6EF6               	movwf	tblptrl,c
  3968  000F9E  0E08               	movlw	high _dpowers
  3969  000FA0  20F4               	addwfc	prodh,w,c
  3970  000FA2  6EF7               	movwf	tblptrh,c
  3971  000FA4  0009               	tblrd		*+
  3972  000FA6  CFF5 F005          	movff	tablat,___lldiv@divisor
  3973  000FAA  0009               	tblrd		*+
  3974  000FAC  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3975  000FB0  0009               	tblrd		*+
  3976  000FB2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3977  000FB6  000A               	tblrd		*-
  3978  000FB8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3979  000FBC  EC95  F014         	call	___lldiv	;wreg free
  3980  000FC0  C001  F07A         	movff	?___lldiv,sprintf@vd_978
  3981  000FC4  C002  F07B         	movff	?___lldiv+1,sprintf@vd_978+1
  3982  000FC8  C003  F07C         	movff	?___lldiv+2,sprintf@vd_978+2
  3983  000FCC  C004  F07D         	movff	?___lldiv+3,sprintf@vd_978+3
  3984                           
  3985                           ;doprnt.c: 1239: vd %= 10;
  3986  000FD0  C07A  F001         	movff	sprintf@vd_978,___llmod@dividend
  3987  000FD4  C07B  F002         	movff	sprintf@vd_978+1,___llmod@dividend+1
  3988  000FD8  C07C  F003         	movff	sprintf@vd_978+2,___llmod@dividend+2
  3989  000FDC  C07D  F004         	movff	sprintf@vd_978+3,___llmod@dividend+3
  3990  000FE0  0E0A               	movlw	10
  3991  000FE2  6E05               	movwf	___llmod@divisor,c
  3992  000FE4  0E00               	movlw	0
  3993  000FE6  6E06               	movwf	___llmod@divisor+1,c
  3994  000FE8  0E00               	movlw	0
  3995  000FEA  6E07               	movwf	___llmod@divisor+2,c
  3996  000FEC  0E00               	movlw	0
  3997  000FEE  6E08               	movwf	___llmod@divisor+3,c
  3998  000FF0  ECD8  F014         	call	___llmod	;wreg free
  3999  000FF4  C001  F07A         	movff	?___llmod,sprintf@vd_978
  4000  000FF8  C002  F07B         	movff	?___llmod+1,sprintf@vd_978+1
  4001  000FFC  C003  F07C         	movff	?___llmod+2,sprintf@vd_978+2
  4002  001000  C004  F07D         	movff	?___llmod+3,sprintf@vd_978+3
  4003                           
  4004                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  4005  001004  0100               	movlb	0	; () banked
  4006  001006  0100               	movlb	0	; () banked
  4007  001008  517A               	movf	sprintf@vd_978& (0+255),w,b
  4008  00100A  0F30               	addlw	48
  4009  00100C  C060  FFD9         	movff	sprintf@sp,fsr2l
  4010  001010  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4011  001014  6EDF               	movwf	indf2,c
  4012                           
  4013                           ; BSR set to: 0
  4014  001016  0100               	movlb	0	; () banked
  4015  001018  0100               	movlb	0	; () banked
  4016  00101A  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4017  00101C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  4021  00101E  C080  F001         	movff	sprintf@_val,___llmod@dividend
  4022  001022  C081  F002         	movff	sprintf@_val+1,___llmod@dividend+1
  4023  001026  C082  F003         	movff	sprintf@_val+2,___llmod@dividend+2
  4024  00102A  C083  F004         	movff	sprintf@_val+3,___llmod@dividend+3
  4025  00102E  0100               	movlb	0	; () banked
  4026  001030  0100               	movlb	0	; () banked
  4027  001032  518F               	movf	sprintf@c& (0+255),w,b
  4028  001034  0D04               	mullw	4
  4029  001036  0E01               	movlw	low _dpowers
  4030  001038  24F3               	addwf	prodl,w,c
  4031  00103A  6EF6               	movwf	tblptrl,c
  4032  00103C  0E08               	movlw	high _dpowers
  4033  00103E  20F4               	addwfc	prodh,w,c
  4034  001040  6EF7               	movwf	tblptrh,c
  4035  001042  0009               	tblrd		*+
  4036  001044  CFF5 F005          	movff	tablat,___llmod@divisor
  4037  001048  0009               	tblrd		*+
  4038  00104A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  4039  00104E  0009               	tblrd		*+
  4040  001050  CFF5 F007          	movff	tablat,___llmod@divisor+2
  4041  001054  000A               	tblrd		*-
  4042  001056  CFF5 F008          	movff	tablat,___llmod@divisor+3
  4043  00105A  ECD8  F014         	call	___llmod	;wreg free
  4044  00105E  C001  F080         	movff	?___llmod,sprintf@_val
  4045  001062  C002  F081         	movff	?___llmod+1,sprintf@_val+1
  4046  001066  C003  F082         	movff	?___llmod+2,sprintf@_val+2
  4047  00106A  C004  F083         	movff	?___llmod+3,sprintf@_val+3
  4048  00106E                     l4977:
  4049  00106E  0100               	movlb	0	; () banked
  4050  001070  0100               	movlb	0	; () banked
  4051  001072  078F               	decf	sprintf@c& (0+255),f,b
  4052  001074  0100               	movlb	0	; () banked
  4053  001076  298F               	incf	sprintf@c& (0+255),w,b
  4054  001078  B4D8               	btfsc	status,2,c
  4055  00107A  D010               	goto	l4985
  4056  00107C  D781               	goto	l4967
  4057  00107E                     l4979:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  4061  00107E  C060  FFD9         	movff	sprintf@sp,fsr2l
  4062  001082  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4063  001086  0E30               	movlw	48
  4064  001088  6EDF               	movwf	indf2,c
  4065                           
  4066                           ; BSR set to: 0
  4067  00108A  0100               	movlb	0	; () banked
  4068  00108C  0100               	movlb	0	; () banked
  4069  00108E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4070  001090  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;doprnt.c: 1246: prec--;
  4074  001092  0100               	movlb	0	; () banked
  4075  001094  0100               	movlb	0	; () banked
  4076  001096  078A               	decf	sprintf@prec& (0+255),f,b
  4077  001098  A0D8               	btfss	status,0,c
  4078  00109A  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4079  00109C                     l4985:
  4080                           
  4081                           ; BSR set to: 0
  4082  00109C  0100               	movlb	0	; () banked
  4083  00109E  0100               	movlb	0	; () banked
  4084  0010A0  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4085  0010A2  118A               	iorwf	sprintf@prec& (0+255),w,b
  4086  0010A4  B4D8               	btfsc	status,2,c
  4087  0010A6  D065               	goto	l5007
  4088  0010A8  D7EA               	goto	l4979
  4089  0010AA                     l4987:
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;doprnt.c: 1255: }
  4093                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  4094  0010AA  0100               	movlb	0	; () banked
  4095  0010AC  0100               	movlb	0	; () banked
  4096  0010AE  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4097  0010B0  118A               	iorwf	sprintf@prec& (0+255),w,b
  4098  0010B2  A4D8               	btfss	status,2,c
  4099  0010B4  D00C               	goto	l4993
  4100                           
  4101                           ; BSR set to: 0
  4102  0010B6  0100               	movlb	0	; () banked
  4103  0010B8  0100               	movlb	0	; () banked
  4104  0010BA  5183               	movf	(sprintf@_val+3)& (0+255),w,b
  4105  0010BC  1180               	iorwf	sprintf@_val& (0+255),w,b
  4106  0010BE  1181               	iorwf	(sprintf@_val+1)& (0+255),w,b
  4107  0010C0  1182               	iorwf	(sprintf@_val+2)& (0+255),w,b
  4108  0010C2  A4D8               	btfss	status,2,c
  4109  0010C4  D004               	goto	l4993
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 1300: prec++;
  4113  0010C6  0100               	movlb	0	; () banked
  4114  0010C8  0100               	movlb	0	; () banked
  4115  0010CA  4B8A               	infsnz	sprintf@prec& (0+255),f,b
  4116  0010CC  2B8B               	incf	(sprintf@prec+1)& (0+255),f,b
  4117  0010CE                     l4993:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;doprnt.c: 1348: if(c < prec)
  4121  0010CE  0E80               	movlw	128
  4122  0010D0  0100               	movlb	0	; () banked
  4123  0010D2  0100               	movlb	0	; () banked
  4124  0010D4  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4125  0010D6  0E7F               	movlw	127
  4126  0010D8  6F67               	movwf	??_sprintf& (0+255),b
  4127  0010DA  0100               	movlb	0	; () banked
  4128  0010DC  0100               	movlb	0	; () banked
  4129  0010DE  518A               	movf	sprintf@prec& (0+255),w,b
  4130  0010E0  0100               	movlb	0	; () banked
  4131  0010E2  0100               	movlb	0	; () banked
  4132  0010E4  5D8F               	subwf	sprintf@c& (0+255),w,b
  4133  0010E6  0100               	movlb	0	; () banked
  4134  0010E8  0100               	movlb	0	; () banked
  4135  0010EA  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4136  0010EC  0A80               	xorlw	128
  4137  0010EE  0100               	movlb	0	; () banked
  4138  0010F0  5967               	subwfb	??_sprintf& (0+255),w,b
  4139  0010F2  B0D8               	btfsc	status,0,c
  4140  0010F4  D003               	goto	l4997
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;doprnt.c: 1349: c = prec;
  4144  0010F6  C08A  F08F         	movff	sprintf@prec,sprintf@c
  4145  0010FA  D020               	goto	l5001
  4146  0010FC                     l4997:
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;doprnt.c: 1350: else if(prec < c)
  4150  0010FC  0100               	movlb	0	; () banked
  4151  0010FE  0100               	movlb	0	; () banked
  4152  001100  518B               	movf	(sprintf@prec+1)& (0+255),w,b
  4153  001102  0A80               	xorlw	128
  4154  001104  0100               	movlb	0	; () banked
  4155  001106  6F67               	movwf	??_sprintf& (0+255),b
  4156  001108  0100               	movlb	0	; () banked
  4157  00110A  0100               	movlb	0	; () banked
  4158  00110C  518F               	movf	sprintf@c& (0+255),w,b
  4159  00110E  0100               	movlb	0	; () banked
  4160  001110  0100               	movlb	0	; () banked
  4161  001112  5D8A               	subwf	sprintf@prec& (0+255),w,b
  4162  001114  0E80               	movlw	128
  4163  001116  0100               	movlb	0	; () banked
  4164  001118  0100               	movlb	0	; () banked
  4165  00111A  BF8F               	btfsc	sprintf@c& (0+255),7,b
  4166  00111C  0E7F               	movlw	127
  4167  00111E  0100               	movlb	0	; () banked
  4168  001120  5967               	subwfb	??_sprintf& (0+255),w,b
  4169  001122  B0D8               	btfsc	status,0,c
  4170  001124  D00B               	goto	l5001
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;doprnt.c: 1351: prec = c;
  4174  001126  0100               	movlb	0	; () banked
  4175  001128  0100               	movlb	0	; () banked
  4176  00112A  518F               	movf	sprintf@c& (0+255),w,b
  4177  00112C  0100               	movlb	0	; () banked
  4178  00112E  0100               	movlb	0	; () banked
  4179  001130  6F8A               	movwf	sprintf@prec& (0+255),b
  4180  001132  0100               	movlb	0	; () banked
  4181  001134  6B8B               	clrf	(sprintf@prec+1)& (0+255),b
  4182  001136  0100               	movlb	0	; () banked
  4183  001138  BF8A               	btfsc	sprintf@prec& (0+255),7,b
  4184  00113A  078B               	decf	(sprintf@prec+1)& (0+255),f,b
  4185  00113C                     l5001:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 1431: {
  4189                           ;doprnt.c: 1447: if(flag & 0x03)
  4190  00113C  0E03               	movlw	3
  4191  00113E  0100               	movlb	0	; () banked
  4192  001140  0100               	movlb	0	; () banked
  4193  001142  157E               	andwf	sprintf@flag& (0+255),w,b
  4194  001144  0100               	movlb	0	; () banked
  4195  001146  6F67               	movwf	??_sprintf& (0+255),b
  4196  001148  0E00               	movlw	0
  4197  00114A  0100               	movlb	0	; () banked
  4198  00114C  0100               	movlb	0	; () banked
  4199  00114E  157F               	andwf	(sprintf@flag+1)& (0+255),w,b
  4200  001150  0100               	movlb	0	; () banked
  4201  001152  6F68               	movwf	(??_sprintf+1)& (0+255),b
  4202  001154  0100               	movlb	0	; () banked
  4203  001156  5168               	movf	(??_sprintf+1)& (0+255),w,b
  4204  001158  1167               	iorwf	??_sprintf& (0+255),w,b
  4205  00115A  B4D8               	btfsc	status,2,c
  4206  00115C  D00A               	goto	l5007
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  4210  00115E  C060  FFD9         	movff	sprintf@sp,fsr2l
  4211  001162  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4212  001166  0E2D               	movlw	45
  4213  001168  6EDF               	movwf	indf2,c
  4214  00116A                     L1:
  4215                           
  4216                           ; BSR set to: 0
  4217  00116A  0100               	movlb	0	; () banked
  4218  00116C  0100               	movlb	0	; () banked
  4219  00116E  4B60               	infsnz	sprintf@sp& (0+255),f,b
  4220  001170  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
  4221  001172                     l5007:
  4222                           
  4223                           ; BSR set to: 0
  4224  001172  0100               	movlb	0	; () banked
  4225  001174  C062  FFF6         	movff	sprintf@f,tblptrl
  4226  001178  0100               	movlb	0	; () banked
  4227  00117A  C063  FFF7         	movff	sprintf@f+1,tblptrh
  4228  00117E  0100               	movlb	0	; () banked
  4229  001180  0100               	movlb	0	; () banked
  4230  001182  4B62               	infsnz	sprintf@f& (0+255),f,b
  4231  001184  2B63               	incf	(sprintf@f+1)& (0+255),f,b
  4232  001186  0008               	tblrd		*
  4233  001188  0100               	movlb	0	; () banked
  4234  00118A  CFF5 F08F          	movff	tablat,sprintf@c
  4235  00118E  0100               	movlb	0	; () banked
  4236  001190  678F               	tstfsz	sprintf@c& (0+255),b
  4237  001192  EF5F  F004         	goto	l4805
  4238  001196                     l5009:
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;doprnt.c: 1547: *sp = 0;
  4242  001196  C060  FFD9         	movff	sprintf@sp,fsr2l
  4243  00119A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
  4244  00119E  0E00               	movlw	0
  4245  0011A0  6EDF               	movwf	indf2,c
  4246  0011A2  0012               	return	
  4247  0011A4                     __end_of_sprintf:
  4248                           	opt stack 0
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon2	equ	0xFF1
  4256                           wreg	equ	0xFE8
  4257                           indf2	equ	0xFDF
  4258                           postinc2	equ	0xFDE
  4259                           postdec2	equ	0xFDD
  4260                           fsr2h	equ	0xFDA
  4261                           fsr2l	equ	0xFD9
  4262                           status	equ	0xFD8
  4263                           
  4264 ;; *************** function _scale *****************
  4265 ;; Defined at:
  4266 ;;		line 425 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  4267 ;; Parameters:    Size  Location     Type
  4268 ;;  scl             1    wreg     char 
  4269 ;; Auto vars:     Size  Location     Type
  4270 ;;  scl             1   78[COMRAM] char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  3   72[COMRAM] char 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4280 ;;      Params:         3       0       0       0       0       0       0       0       0
  4281 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4283 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4284 ;;Total ram usage:        7 bytes
  4285 ;; Hardware stack levels used:    1
  4286 ;; Hardware stack levels required when called:    2
  4287 ;; This function calls:
  4288 ;;		___awdiv
  4289 ;;		___awmod
  4290 ;;		___ftmul
  4291 ;;		___wmul
  4292 ;; This function is called by:
  4293 ;;		_sprintf
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text17
  4298  0011A4                     __ptext17:
  4299                           	opt stack 0
  4300  0011A4                     _scale:
  4301                           	opt stack 25
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;incstack = 0
  4305                           ;scale@scl stored from wreg
  4306  0011A4  CFE8 F04F          	movff	wreg,scale@scl
  4307                           
  4308                           ;doprnt.c: 428: if(scl < 0) {
  4309  0011A8  AE4F               	btfss	scale@scl,7,c
  4310  0011AA  D101               	goto	l4477
  4311                           
  4312                           ;doprnt.c: 429: scl = -scl;
  4313  0011AC  6C4F               	negf	scale@scl,c
  4314                           
  4315                           ;doprnt.c: 430: if(scl>=110)
  4316  0011AE  504F               	movf	scale@scl,w,c
  4317  0011B0  0A80               	xorlw	128
  4318  0011B2  0F12               	addlw	-238
  4319  0011B4  A0D8               	btfss	status,0,c
  4320  0011B6  D091               	goto	l4467
  4321                           
  4322                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4323  0011B8  0E00               	movlw	0
  4324  0011BA  6E14               	movwf	___wmul@multiplicand+1,c
  4325  0011BC  0E03               	movlw	3
  4326  0011BE  6E13               	movwf	___wmul@multiplicand,c
  4327  0011C0  0E00               	movlw	0
  4328  0011C2  6E0B               	movwf	___awdiv@divisor+1,c
  4329  0011C4  0E0A               	movlw	10
  4330  0011C6  6E0A               	movwf	___awdiv@divisor,c
  4331  0011C8  0E00               	movlw	0
  4332  0011CA  6E04               	movwf	___awmod@divisor+1,c
  4333  0011CC  0E64               	movlw	100
  4334  0011CE  6E03               	movwf	___awmod@divisor,c
  4335  0011D0  504F               	movf	scale@scl,w,c
  4336  0011D2  6E01               	movwf	___awmod@dividend,c
  4337  0011D4  6A02               	clrf	___awmod@dividend+1,c
  4338  0011D6  BE01               	btfsc	___awmod@dividend,7,c
  4339  0011D8  0602               	decf	___awmod@dividend+1,f,c
  4340  0011DA  ECB5  F013         	call	___awmod	;wreg free
  4341  0011DE  C001  F008         	movff	?___awmod,___awdiv@dividend
  4342  0011E2  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4343  0011E6  EC09  F013         	call	___awdiv	;wreg free
  4344  0011EA  0E09               	movlw	9
  4345  0011EC  2408               	addwf	?___awdiv,w,c
  4346  0011EE  6E11               	movwf	___wmul@multiplier,c
  4347  0011F0  0E00               	movlw	0
  4348  0011F2  2009               	addwfc	?___awdiv+1,w,c
  4349  0011F4  6E12               	movwf	___wmul@multiplier+1,c
  4350  0011F6  ECEA  F015         	call	___wmul	;wreg free
  4351  0011FA  0E29               	movlw	low __npowers_
  4352  0011FC  2411               	addwf	?___wmul,w,c
  4353  0011FE  6EF6               	movwf	tblptrl,c
  4354  001200  0E08               	movlw	high __npowers_
  4355  001202  2012               	addwfc	?___wmul+1,w,c
  4356  001204  6EF7               	movwf	tblptrh,c
  4357  001206  0009               	tblrd		*+
  4358  001208  CFF5 F03D          	movff	tablat,___ftmul@f2
  4359  00120C  0009               	tblrd		*+
  4360  00120E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4361  001212  000A               	tblrd		*-
  4362  001214  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4363  001218  0E00               	movlw	0
  4364  00121A  6E14               	movwf	___wmul@multiplicand+1,c
  4365  00121C  0E03               	movlw	3
  4366  00121E  6E13               	movwf	___wmul@multiplicand,c
  4367  001220  0E00               	movlw	0
  4368  001222  6E0B               	movwf	___awdiv@divisor+1,c
  4369  001224  0E64               	movlw	100
  4370  001226  6E0A               	movwf	___awdiv@divisor,c
  4371  001228  504F               	movf	scale@scl,w,c
  4372  00122A  6E08               	movwf	___awdiv@dividend,c
  4373  00122C  6A09               	clrf	___awdiv@dividend+1,c
  4374  00122E  BE08               	btfsc	___awdiv@dividend,7,c
  4375  001230  0609               	decf	___awdiv@dividend+1,f,c
  4376  001232  EC09  F013         	call	___awdiv	;wreg free
  4377  001236  0E12               	movlw	18
  4378  001238  2408               	addwf	?___awdiv,w,c
  4379  00123A  6E11               	movwf	___wmul@multiplier,c
  4380  00123C  0E00               	movlw	0
  4381  00123E  2009               	addwfc	?___awdiv+1,w,c
  4382  001240  6E12               	movwf	___wmul@multiplier+1,c
  4383  001242  ECEA  F015         	call	___wmul	;wreg free
  4384  001246  0E29               	movlw	low __npowers_
  4385  001248  2411               	addwf	?___wmul,w,c
  4386  00124A  6EF6               	movwf	tblptrl,c
  4387  00124C  0E08               	movlw	high __npowers_
  4388  00124E  2012               	addwfc	?___wmul+1,w,c
  4389  001250  6EF7               	movwf	tblptrh,c
  4390  001252  0009               	tblrd		*+
  4391  001254  CFF5 F03A          	movff	tablat,___ftmul@f1
  4392  001258  0009               	tblrd		*+
  4393  00125A  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4394  00125E  000A               	tblrd		*-
  4395  001260  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4396  001264  EC79  F010         	call	___ftmul	;wreg free
  4397  001268  C03A  F04C         	movff	?___ftmul,_scale$1700
  4398  00126C  C03B  F04D         	movff	?___ftmul+1,_scale$1700+1
  4399  001270  C03C  F04E         	movff	?___ftmul+2,_scale$1700+2
  4400                           
  4401                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4402  001274  C04C  F03A         	movff	_scale$1700,___ftmul@f1
  4403  001278  C04D  F03B         	movff	_scale$1700+1,___ftmul@f1+1
  4404  00127C  C04E  F03C         	movff	_scale$1700+2,___ftmul@f1+2
  4405  001280  0E00               	movlw	0
  4406  001282  6E14               	movwf	___wmul@multiplicand+1,c
  4407  001284  0E03               	movlw	3
  4408  001286  6E13               	movwf	___wmul@multiplicand,c
  4409  001288  0E00               	movlw	0
  4410  00128A  6E04               	movwf	___awmod@divisor+1,c
  4411  00128C  0E0A               	movlw	10
  4412  00128E  6E03               	movwf	___awmod@divisor,c
  4413  001290  504F               	movf	scale@scl,w,c
  4414  001292  6E01               	movwf	___awmod@dividend,c
  4415  001294  6A02               	clrf	___awmod@dividend+1,c
  4416  001296  BE01               	btfsc	___awmod@dividend,7,c
  4417  001298  0602               	decf	___awmod@dividend+1,f,c
  4418  00129A  ECB5  F013         	call	___awmod	;wreg free
  4419  00129E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4420  0012A2  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4421  0012A6  ECEA  F015         	call	___wmul	;wreg free
  4422  0012AA  0E29               	movlw	low __npowers_
  4423  0012AC  2411               	addwf	?___wmul,w,c
  4424  0012AE  6EF6               	movwf	tblptrl,c
  4425  0012B0  0E08               	movlw	high __npowers_
  4426  0012B2  2012               	addwfc	?___wmul+1,w,c
  4427  0012B4  6EF7               	movwf	tblptrh,c
  4428  0012B6  0009               	tblrd		*+
  4429  0012B8  CFF5 F03D          	movff	tablat,___ftmul@f2
  4430  0012BC  0009               	tblrd		*+
  4431  0012BE  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4432  0012C2  000A               	tblrd		*-
  4433  0012C4  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4434  0012C8  EC79  F010         	call	___ftmul	;wreg free
  4435  0012CC  C03A  F049         	movff	?___ftmul,?_scale
  4436  0012D0  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4437  0012D4  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4438  0012D8  0012               	return	
  4439  0012DA                     l4467:
  4440                           
  4441                           ;doprnt.c: 432: else if(scl > 10)
  4442  0012DA  504F               	movf	scale@scl,w,c
  4443  0012DC  0A80               	xorlw	128
  4444  0012DE  0F75               	addlw	-139
  4445  0012E0  A0D8               	btfss	status,0,c
  4446  0012E2  D053               	goto	l4473
  4447                           
  4448                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4449  0012E4  0E00               	movlw	0
  4450  0012E6  6E14               	movwf	___wmul@multiplicand+1,c
  4451  0012E8  0E03               	movlw	3
  4452  0012EA  6E13               	movwf	___wmul@multiplicand,c
  4453  0012EC  0E00               	movlw	0
  4454  0012EE  6E0B               	movwf	___awdiv@divisor+1,c
  4455  0012F0  0E0A               	movlw	10
  4456  0012F2  6E0A               	movwf	___awdiv@divisor,c
  4457  0012F4  504F               	movf	scale@scl,w,c
  4458  0012F6  6E08               	movwf	___awdiv@dividend,c
  4459  0012F8  6A09               	clrf	___awdiv@dividend+1,c
  4460  0012FA  BE08               	btfsc	___awdiv@dividend,7,c
  4461  0012FC  0609               	decf	___awdiv@dividend+1,f,c
  4462  0012FE  EC09  F013         	call	___awdiv	;wreg free
  4463  001302  0E09               	movlw	9
  4464  001304  2408               	addwf	?___awdiv,w,c
  4465  001306  6E11               	movwf	___wmul@multiplier,c
  4466  001308  0E00               	movlw	0
  4467  00130A  2009               	addwfc	?___awdiv+1,w,c
  4468  00130C  6E12               	movwf	___wmul@multiplier+1,c
  4469  00130E  ECEA  F015         	call	___wmul	;wreg free
  4470  001312  0E29               	movlw	low __npowers_
  4471  001314  2411               	addwf	?___wmul,w,c
  4472  001316  6EF6               	movwf	tblptrl,c
  4473  001318  0E08               	movlw	high __npowers_
  4474  00131A  2012               	addwfc	?___wmul+1,w,c
  4475  00131C  6EF7               	movwf	tblptrh,c
  4476  00131E  0009               	tblrd		*+
  4477  001320  CFF5 F03A          	movff	tablat,___ftmul@f1
  4478  001324  0009               	tblrd		*+
  4479  001326  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4480  00132A  000A               	tblrd		*-
  4481  00132C  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4482  001330  0E00               	movlw	0
  4483  001332  6E14               	movwf	___wmul@multiplicand+1,c
  4484  001334  0E03               	movlw	3
  4485  001336  6E13               	movwf	___wmul@multiplicand,c
  4486  001338  0E00               	movlw	0
  4487  00133A  6E04               	movwf	___awmod@divisor+1,c
  4488  00133C  0E0A               	movlw	10
  4489  00133E  6E03               	movwf	___awmod@divisor,c
  4490  001340  504F               	movf	scale@scl,w,c
  4491  001342  6E01               	movwf	___awmod@dividend,c
  4492  001344  6A02               	clrf	___awmod@dividend+1,c
  4493  001346  BE01               	btfsc	___awmod@dividend,7,c
  4494  001348  0602               	decf	___awmod@dividend+1,f,c
  4495  00134A  ECB5  F013         	call	___awmod	;wreg free
  4496  00134E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4497  001352  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4498  001356  ECEA  F015         	call	___wmul	;wreg free
  4499  00135A  0E29               	movlw	low __npowers_
  4500  00135C  2411               	addwf	?___wmul,w,c
  4501  00135E  6EF6               	movwf	tblptrl,c
  4502  001360  0E08               	movlw	high __npowers_
  4503  001362  2012               	addwfc	?___wmul+1,w,c
  4504  001364  6EF7               	movwf	tblptrh,c
  4505  001366  0009               	tblrd		*+
  4506  001368  CFF5 F03D          	movff	tablat,___ftmul@f2
  4507  00136C  0009               	tblrd		*+
  4508  00136E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4509  001372  000A               	tblrd		*-
  4510  001374  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4511  001378  EC79  F010         	call	___ftmul	;wreg free
  4512  00137C  C03A  F049         	movff	?___ftmul,?_scale
  4513  001380  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4514  001384  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4515  001388  0012               	return	
  4516  00138A                     l4473:
  4517                           
  4518                           ;doprnt.c: 434: return _npowers_[scl];
  4519  00138A  504F               	movf	scale@scl,w,c
  4520  00138C  0D03               	mullw	3
  4521  00138E  0E29               	movlw	low __npowers_
  4522  001390  24F3               	addwf	prodl,w,c
  4523  001392  6EF6               	movwf	tblptrl,c
  4524  001394  0E08               	movlw	high __npowers_
  4525  001396  20F4               	addwfc	prodh,w,c
  4526  001398  6EF7               	movwf	tblptrh,c
  4527  00139A  0009               	tblrd		*+
  4528  00139C  CFF5 F049          	movff	tablat,?_scale
  4529  0013A0  0009               	tblrd		*+
  4530  0013A2  CFF5 F04A          	movff	tablat,?_scale+1
  4531  0013A6  000A               	tblrd		*-
  4532  0013A8  CFF5 F04B          	movff	tablat,?_scale+2
  4533  0013AC  0012               	return	
  4534  0013AE                     l4477:
  4535                           
  4536                           ;doprnt.c: 435: }
  4537                           ;doprnt.c: 436: if(scl>=110)
  4538  0013AE  504F               	movf	scale@scl,w,c
  4539  0013B0  0A80               	xorlw	128
  4540  0013B2  0F12               	addlw	-238
  4541  0013B4  A0D8               	btfss	status,0,c
  4542  0013B6  D091               	goto	l4485
  4543                           
  4544                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4545  0013B8  0E00               	movlw	0
  4546  0013BA  6E14               	movwf	___wmul@multiplicand+1,c
  4547  0013BC  0E03               	movlw	3
  4548  0013BE  6E13               	movwf	___wmul@multiplicand,c
  4549  0013C0  0E00               	movlw	0
  4550  0013C2  6E0B               	movwf	___awdiv@divisor+1,c
  4551  0013C4  0E0A               	movlw	10
  4552  0013C6  6E0A               	movwf	___awdiv@divisor,c
  4553  0013C8  0E00               	movlw	0
  4554  0013CA  6E04               	movwf	___awmod@divisor+1,c
  4555  0013CC  0E64               	movlw	100
  4556  0013CE  6E03               	movwf	___awmod@divisor,c
  4557  0013D0  504F               	movf	scale@scl,w,c
  4558  0013D2  6E01               	movwf	___awmod@dividend,c
  4559  0013D4  6A02               	clrf	___awmod@dividend+1,c
  4560  0013D6  BE01               	btfsc	___awmod@dividend,7,c
  4561  0013D8  0602               	decf	___awmod@dividend+1,f,c
  4562  0013DA  ECB5  F013         	call	___awmod	;wreg free
  4563  0013DE  C001  F008         	movff	?___awmod,___awdiv@dividend
  4564  0013E2  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4565  0013E6  EC09  F013         	call	___awdiv	;wreg free
  4566  0013EA  0E09               	movlw	9
  4567  0013EC  2408               	addwf	?___awdiv,w,c
  4568  0013EE  6E11               	movwf	___wmul@multiplier,c
  4569  0013F0  0E00               	movlw	0
  4570  0013F2  2009               	addwfc	?___awdiv+1,w,c
  4571  0013F4  6E12               	movwf	___wmul@multiplier+1,c
  4572  0013F6  ECEA  F015         	call	___wmul	;wreg free
  4573  0013FA  0E50               	movlw	low __powers_
  4574  0013FC  2411               	addwf	?___wmul,w,c
  4575  0013FE  6EF6               	movwf	tblptrl,c
  4576  001400  0E08               	movlw	high __powers_
  4577  001402  2012               	addwfc	?___wmul+1,w,c
  4578  001404  6EF7               	movwf	tblptrh,c
  4579  001406  0009               	tblrd		*+
  4580  001408  CFF5 F03D          	movff	tablat,___ftmul@f2
  4581  00140C  0009               	tblrd		*+
  4582  00140E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4583  001412  000A               	tblrd		*-
  4584  001414  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4585  001418  0E00               	movlw	0
  4586  00141A  6E14               	movwf	___wmul@multiplicand+1,c
  4587  00141C  0E03               	movlw	3
  4588  00141E  6E13               	movwf	___wmul@multiplicand,c
  4589  001420  0E00               	movlw	0
  4590  001422  6E0B               	movwf	___awdiv@divisor+1,c
  4591  001424  0E64               	movlw	100
  4592  001426  6E0A               	movwf	___awdiv@divisor,c
  4593  001428  504F               	movf	scale@scl,w,c
  4594  00142A  6E08               	movwf	___awdiv@dividend,c
  4595  00142C  6A09               	clrf	___awdiv@dividend+1,c
  4596  00142E  BE08               	btfsc	___awdiv@dividend,7,c
  4597  001430  0609               	decf	___awdiv@dividend+1,f,c
  4598  001432  EC09  F013         	call	___awdiv	;wreg free
  4599  001436  0E12               	movlw	18
  4600  001438  2408               	addwf	?___awdiv,w,c
  4601  00143A  6E11               	movwf	___wmul@multiplier,c
  4602  00143C  0E00               	movlw	0
  4603  00143E  2009               	addwfc	?___awdiv+1,w,c
  4604  001440  6E12               	movwf	___wmul@multiplier+1,c
  4605  001442  ECEA  F015         	call	___wmul	;wreg free
  4606  001446  0E50               	movlw	low __powers_
  4607  001448  2411               	addwf	?___wmul,w,c
  4608  00144A  6EF6               	movwf	tblptrl,c
  4609  00144C  0E08               	movlw	high __powers_
  4610  00144E  2012               	addwfc	?___wmul+1,w,c
  4611  001450  6EF7               	movwf	tblptrh,c
  4612  001452  0009               	tblrd		*+
  4613  001454  CFF5 F03A          	movff	tablat,___ftmul@f1
  4614  001458  0009               	tblrd		*+
  4615  00145A  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4616  00145E  000A               	tblrd		*-
  4617  001460  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4618  001464  EC79  F010         	call	___ftmul	;wreg free
  4619  001468  C03A  F04C         	movff	?___ftmul,_scale$1700
  4620  00146C  C03B  F04D         	movff	?___ftmul+1,_scale$1700+1
  4621  001470  C03C  F04E         	movff	?___ftmul+2,_scale$1700+2
  4622                           
  4623                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4624  001474  C04C  F03A         	movff	_scale$1700,___ftmul@f1
  4625  001478  C04D  F03B         	movff	_scale$1700+1,___ftmul@f1+1
  4626  00147C  C04E  F03C         	movff	_scale$1700+2,___ftmul@f1+2
  4627  001480  0E00               	movlw	0
  4628  001482  6E14               	movwf	___wmul@multiplicand+1,c
  4629  001484  0E03               	movlw	3
  4630  001486  6E13               	movwf	___wmul@multiplicand,c
  4631  001488  0E00               	movlw	0
  4632  00148A  6E04               	movwf	___awmod@divisor+1,c
  4633  00148C  0E0A               	movlw	10
  4634  00148E  6E03               	movwf	___awmod@divisor,c
  4635  001490  504F               	movf	scale@scl,w,c
  4636  001492  6E01               	movwf	___awmod@dividend,c
  4637  001494  6A02               	clrf	___awmod@dividend+1,c
  4638  001496  BE01               	btfsc	___awmod@dividend,7,c
  4639  001498  0602               	decf	___awmod@dividend+1,f,c
  4640  00149A  ECB5  F013         	call	___awmod	;wreg free
  4641  00149E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4642  0014A2  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4643  0014A6  ECEA  F015         	call	___wmul	;wreg free
  4644  0014AA  0E50               	movlw	low __powers_
  4645  0014AC  2411               	addwf	?___wmul,w,c
  4646  0014AE  6EF6               	movwf	tblptrl,c
  4647  0014B0  0E08               	movlw	high __powers_
  4648  0014B2  2012               	addwfc	?___wmul+1,w,c
  4649  0014B4  6EF7               	movwf	tblptrh,c
  4650  0014B6  0009               	tblrd		*+
  4651  0014B8  CFF5 F03D          	movff	tablat,___ftmul@f2
  4652  0014BC  0009               	tblrd		*+
  4653  0014BE  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4654  0014C2  000A               	tblrd		*-
  4655  0014C4  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4656  0014C8  EC79  F010         	call	___ftmul	;wreg free
  4657  0014CC  C03A  F049         	movff	?___ftmul,?_scale
  4658  0014D0  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4659  0014D4  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4660  0014D8  0012               	return	
  4661  0014DA                     l4485:
  4662                           
  4663                           ;doprnt.c: 438: else if(scl > 10)
  4664  0014DA  504F               	movf	scale@scl,w,c
  4665  0014DC  0A80               	xorlw	128
  4666  0014DE  0F75               	addlw	-139
  4667  0014E0  A0D8               	btfss	status,0,c
  4668  0014E2  D053               	goto	l4491
  4669                           
  4670                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4671  0014E4  0E00               	movlw	0
  4672  0014E6  6E14               	movwf	___wmul@multiplicand+1,c
  4673  0014E8  0E03               	movlw	3
  4674  0014EA  6E13               	movwf	___wmul@multiplicand,c
  4675  0014EC  0E00               	movlw	0
  4676  0014EE  6E0B               	movwf	___awdiv@divisor+1,c
  4677  0014F0  0E0A               	movlw	10
  4678  0014F2  6E0A               	movwf	___awdiv@divisor,c
  4679  0014F4  504F               	movf	scale@scl,w,c
  4680  0014F6  6E08               	movwf	___awdiv@dividend,c
  4681  0014F8  6A09               	clrf	___awdiv@dividend+1,c
  4682  0014FA  BE08               	btfsc	___awdiv@dividend,7,c
  4683  0014FC  0609               	decf	___awdiv@dividend+1,f,c
  4684  0014FE  EC09  F013         	call	___awdiv	;wreg free
  4685  001502  0E09               	movlw	9
  4686  001504  2408               	addwf	?___awdiv,w,c
  4687  001506  6E11               	movwf	___wmul@multiplier,c
  4688  001508  0E00               	movlw	0
  4689  00150A  2009               	addwfc	?___awdiv+1,w,c
  4690  00150C  6E12               	movwf	___wmul@multiplier+1,c
  4691  00150E  ECEA  F015         	call	___wmul	;wreg free
  4692  001512  0E50               	movlw	low __powers_
  4693  001514  2411               	addwf	?___wmul,w,c
  4694  001516  6EF6               	movwf	tblptrl,c
  4695  001518  0E08               	movlw	high __powers_
  4696  00151A  2012               	addwfc	?___wmul+1,w,c
  4697  00151C  6EF7               	movwf	tblptrh,c
  4698  00151E  0009               	tblrd		*+
  4699  001520  CFF5 F03A          	movff	tablat,___ftmul@f1
  4700  001524  0009               	tblrd		*+
  4701  001526  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4702  00152A  000A               	tblrd		*-
  4703  00152C  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4704  001530  0E00               	movlw	0
  4705  001532  6E14               	movwf	___wmul@multiplicand+1,c
  4706  001534  0E03               	movlw	3
  4707  001536  6E13               	movwf	___wmul@multiplicand,c
  4708  001538  0E00               	movlw	0
  4709  00153A  6E04               	movwf	___awmod@divisor+1,c
  4710  00153C  0E0A               	movlw	10
  4711  00153E  6E03               	movwf	___awmod@divisor,c
  4712  001540  504F               	movf	scale@scl,w,c
  4713  001542  6E01               	movwf	___awmod@dividend,c
  4714  001544  6A02               	clrf	___awmod@dividend+1,c
  4715  001546  BE01               	btfsc	___awmod@dividend,7,c
  4716  001548  0602               	decf	___awmod@dividend+1,f,c
  4717  00154A  ECB5  F013         	call	___awmod	;wreg free
  4718  00154E  C001  F011         	movff	?___awmod,___wmul@multiplier
  4719  001552  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4720  001556  ECEA  F015         	call	___wmul	;wreg free
  4721  00155A  0E50               	movlw	low __powers_
  4722  00155C  2411               	addwf	?___wmul,w,c
  4723  00155E  6EF6               	movwf	tblptrl,c
  4724  001560  0E08               	movlw	high __powers_
  4725  001562  2012               	addwfc	?___wmul+1,w,c
  4726  001564  6EF7               	movwf	tblptrh,c
  4727  001566  0009               	tblrd		*+
  4728  001568  CFF5 F03D          	movff	tablat,___ftmul@f2
  4729  00156C  0009               	tblrd		*+
  4730  00156E  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4731  001572  000A               	tblrd		*-
  4732  001574  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4733  001578  EC79  F010         	call	___ftmul	;wreg free
  4734  00157C  C03A  F049         	movff	?___ftmul,?_scale
  4735  001580  C03B  F04A         	movff	?___ftmul+1,?_scale+1
  4736  001584  C03C  F04B         	movff	?___ftmul+2,?_scale+2
  4737  001588  0012               	return	
  4738  00158A                     l4491:
  4739                           
  4740                           ;doprnt.c: 440: return _powers_[scl];
  4741  00158A  504F               	movf	scale@scl,w,c
  4742  00158C  0D03               	mullw	3
  4743  00158E  0E50               	movlw	low __powers_
  4744  001590  24F3               	addwf	prodl,w,c
  4745  001592  6EF6               	movwf	tblptrl,c
  4746  001594  0E08               	movlw	high __powers_
  4747  001596  20F4               	addwfc	prodh,w,c
  4748  001598  6EF7               	movwf	tblptrh,c
  4749  00159A  0009               	tblrd		*+
  4750  00159C  CFF5 F049          	movff	tablat,?_scale
  4751  0015A0  0009               	tblrd		*+
  4752  0015A2  CFF5 F04A          	movff	tablat,?_scale+1
  4753  0015A6  000A               	tblrd		*-
  4754  0015A8  CFF5 F04B          	movff	tablat,?_scale+2
  4755  0015AC  0012               	return	
  4756  0015AE                     __end_of_scale:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           intcon2	equ	0xFF1
  4765                           wreg	equ	0xFE8
  4766                           indf2	equ	0xFDF
  4767                           postinc2	equ	0xFDE
  4768                           postdec2	equ	0xFDD
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _isdigit *****************
  4774 ;; Defined at:
  4775 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/isdigit.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  c               1    wreg     unsigned char 
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  c               1    2[COMRAM] unsigned char 
  4780 ;; Return value:  Size  Location     Type
  4781 ;;		None               void
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0
  4790 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4791 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4792 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4793 ;;Total ram usage:        3 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; This function calls:
  4796 ;;		Nothing
  4797 ;; This function is called by:
  4798 ;;		_sprintf
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text18
  4803  002CA0                     __ptext18:
  4804                           	opt stack 0
  4805  002CA0                     _isdigit:
  4806                           	opt stack 27
  4807                           
  4808                           ;incstack = 0
  4809                           ;isdigit@c stored from wreg
  4810  002CA0  CFE8 F003          	movff	wreg,isdigit@c
  4811  002CA4  6E01               	movwf	??_isdigit& (0+255),c
  4812  002CA6  0E00               	movlw	0
  4813  002CA8  6E02               	movwf	_isdigit$1251,c
  4814  002CAA  5001               	movf	??_isdigit& (0+255),w,c
  4815  002CAC  0E3A               	movlw	58
  4816  002CAE  5C03               	subwf	isdigit@c,w,c
  4817  002CB0  B0D8               	btfsc	status,0,c
  4818  002CB2  D007               	goto	l4503
  4819  002CB4  0E2F               	movlw	47
  4820  002CB6  6403               	cpfsgt	isdigit@c,c
  4821  002CB8  D004               	goto	l4503
  4822  002CBA  6E01               	movwf	??_isdigit& (0+255),c
  4823  002CBC  0E01               	movlw	1
  4824  002CBE  6E02               	movwf	_isdigit$1251,c
  4825  002CC0  5001               	movf	??_isdigit& (0+255),w,c
  4826  002CC2                     l4503:
  4827  002CC2  C002  F001         	movff	_isdigit$1251,??_isdigit
  4828  002CC6  3001               	rrcf	??_isdigit,w,c
  4829  002CC8  0012               	return	
  4830  002CCA                     __end_of_isdigit:
  4831                           	opt stack 0
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon2	equ	0xFF1
  4839                           wreg	equ	0xFE8
  4840                           indf2	equ	0xFDF
  4841                           postinc2	equ	0xFDE
  4842                           postdec2	equ	0xFDD
  4843                           fsr2h	equ	0xFDA
  4844                           fsr2l	equ	0xFD9
  4845                           status	equ	0xFD8
  4846                           
  4847 ;; *************** function _fround *****************
  4848 ;; Defined at:
  4849 ;;		line 409 in file "/opt/microchip/xc8/v1.31/sources/common/doprnt.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  prec            1    wreg     unsigned char 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  prec            1   81[COMRAM] unsigned char 
  4854 ;; Return value:  Size  Location     Type
  4855 ;;                  3   72[COMRAM] unsigned char 
  4856 ;; Registers used:
  4857 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4858 ;; Tracked objects:
  4859 ;;		On entry : 0/0
  4860 ;;		On exit  : 0/0
  4861 ;;		Unchanged: 0/0
  4862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4863 ;;      Params:         3       0       0       0       0       0       0       0       0
  4864 ;;      Locals:         7       0       0       0       0       0       0       0       0
  4865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4866 ;;      Totals:        10       0       0       0       0       0       0       0       0
  4867 ;;Total ram usage:       10 bytes
  4868 ;; Hardware stack levels used:    1
  4869 ;; Hardware stack levels required when called:    2
  4870 ;; This function calls:
  4871 ;;		___awdiv
  4872 ;;		___awmod
  4873 ;;		___ftmul
  4874 ;;		___wmul
  4875 ;; This function is called by:
  4876 ;;		_sprintf
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text19
  4881  001804                     __ptext19:
  4882                           	opt stack 0
  4883  001804                     _fround:
  4884                           	opt stack 25
  4885                           
  4886                           ;incstack = 0
  4887                           ;fround@prec stored from wreg
  4888  001804  CFE8 F052          	movff	wreg,fround@prec
  4889                           
  4890                           ;doprnt.c: 413: if(prec>=110)
  4891  001808  0E6D               	movlw	109
  4892  00180A  6452               	cpfsgt	fround@prec,c
  4893  00180C  D09F               	goto	l4445
  4894                           
  4895                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4896  00180E  0E00               	movlw	0
  4897  001810  6E14               	movwf	___wmul@multiplicand+1,c
  4898  001812  0E03               	movlw	3
  4899  001814  6E13               	movwf	___wmul@multiplicand,c
  4900  001816  0E00               	movlw	0
  4901  001818  6E0B               	movwf	___awdiv@divisor+1,c
  4902  00181A  0E0A               	movlw	10
  4903  00181C  6E0A               	movwf	___awdiv@divisor,c
  4904  00181E  0E00               	movlw	0
  4905  001820  6E04               	movwf	___awmod@divisor+1,c
  4906  001822  0E64               	movlw	100
  4907  001824  6E03               	movwf	___awmod@divisor,c
  4908  001826  C052  F001         	movff	fround@prec,___awmod@dividend
  4909  00182A  6A02               	clrf	___awmod@dividend+1,c
  4910  00182C  ECB5  F013         	call	___awmod	;wreg free
  4911  001830  C001  F008         	movff	?___awmod,___awdiv@dividend
  4912  001834  C002  F009         	movff	?___awmod+1,___awdiv@dividend+1
  4913  001838  EC09  F013         	call	___awdiv	;wreg free
  4914  00183C  0E09               	movlw	9
  4915  00183E  2408               	addwf	?___awdiv,w,c
  4916  001840  6E11               	movwf	___wmul@multiplier,c
  4917  001842  0E00               	movlw	0
  4918  001844  2009               	addwfc	?___awdiv+1,w,c
  4919  001846  6E12               	movwf	___wmul@multiplier+1,c
  4920  001848  ECEA  F015         	call	___wmul	;wreg free
  4921  00184C  0E29               	movlw	low __npowers_
  4922  00184E  2411               	addwf	?___wmul,w,c
  4923  001850  6EF6               	movwf	tblptrl,c
  4924  001852  0E08               	movlw	high __npowers_
  4925  001854  2012               	addwfc	?___wmul+1,w,c
  4926  001856  6EF7               	movwf	tblptrh,c
  4927  001858  0009               	tblrd		*+
  4928  00185A  CFF5 F03D          	movff	tablat,___ftmul@f2
  4929  00185E  0009               	tblrd		*+
  4930  001860  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4931  001864  000A               	tblrd		*-
  4932  001866  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4933  00186A  0E00               	movlw	0
  4934  00186C  6E14               	movwf	___wmul@multiplicand+1,c
  4935  00186E  0E03               	movlw	3
  4936  001870  6E13               	movwf	___wmul@multiplicand,c
  4937  001872  0E00               	movlw	0
  4938  001874  6E0B               	movwf	___awdiv@divisor+1,c
  4939  001876  0E64               	movlw	100
  4940  001878  6E0A               	movwf	___awdiv@divisor,c
  4941  00187A  C052  F008         	movff	fround@prec,___awdiv@dividend
  4942  00187E  6A09               	clrf	___awdiv@dividend+1,c
  4943  001880  EC09  F013         	call	___awdiv	;wreg free
  4944  001884  0E12               	movlw	18
  4945  001886  2408               	addwf	?___awdiv,w,c
  4946  001888  6E11               	movwf	___wmul@multiplier,c
  4947  00188A  0E00               	movlw	0
  4948  00188C  2009               	addwfc	?___awdiv+1,w,c
  4949  00188E  6E12               	movwf	___wmul@multiplier+1,c
  4950  001890  ECEA  F015         	call	___wmul	;wreg free
  4951  001894  0E29               	movlw	low __npowers_
  4952  001896  2411               	addwf	?___wmul,w,c
  4953  001898  6EF6               	movwf	tblptrl,c
  4954  00189A  0E08               	movlw	high __npowers_
  4955  00189C  2012               	addwfc	?___wmul+1,w,c
  4956  00189E  6EF7               	movwf	tblptrh,c
  4957  0018A0  0009               	tblrd		*+
  4958  0018A2  CFF5 F03A          	movff	tablat,___ftmul@f1
  4959  0018A6  0009               	tblrd		*+
  4960  0018A8  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  4961  0018AC  000A               	tblrd		*-
  4962  0018AE  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  4963  0018B2  EC79  F010         	call	___ftmul	;wreg free
  4964  0018B6  C03A  F04F         	movff	?___ftmul,_fround$1698
  4965  0018BA  C03B  F050         	movff	?___ftmul+1,_fround$1698+1
  4966  0018BE  C03C  F051         	movff	?___ftmul+2,_fround$1698+2
  4967                           
  4968                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4969  0018C2  0E00               	movlw	0
  4970  0018C4  6E14               	movwf	___wmul@multiplicand+1,c
  4971  0018C6  0E03               	movlw	3
  4972  0018C8  6E13               	movwf	___wmul@multiplicand,c
  4973  0018CA  0E00               	movlw	0
  4974  0018CC  6E04               	movwf	___awmod@divisor+1,c
  4975  0018CE  0E0A               	movlw	10
  4976  0018D0  6E03               	movwf	___awmod@divisor,c
  4977  0018D2  C052  F001         	movff	fround@prec,___awmod@dividend
  4978  0018D6  6A02               	clrf	___awmod@dividend+1,c
  4979  0018D8  ECB5  F013         	call	___awmod	;wreg free
  4980  0018DC  C001  F011         	movff	?___awmod,___wmul@multiplier
  4981  0018E0  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  4982  0018E4  ECEA  F015         	call	___wmul	;wreg free
  4983  0018E8  0E29               	movlw	low __npowers_
  4984  0018EA  2411               	addwf	?___wmul,w,c
  4985  0018EC  6EF6               	movwf	tblptrl,c
  4986  0018EE  0E08               	movlw	high __npowers_
  4987  0018F0  2012               	addwfc	?___wmul+1,w,c
  4988  0018F2  6EF7               	movwf	tblptrh,c
  4989  0018F4  0009               	tblrd		*+
  4990  0018F6  CFF5 F03D          	movff	tablat,___ftmul@f2
  4991  0018FA  0009               	tblrd		*+
  4992  0018FC  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  4993  001900  000A               	tblrd		*-
  4994  001902  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  4995  001906  C04F  F03A         	movff	_fround$1698,___ftmul@f1
  4996  00190A  C050  F03B         	movff	_fround$1698+1,___ftmul@f1+1
  4997  00190E  C051  F03C         	movff	_fround$1698+2,___ftmul@f1+2
  4998  001912  EC79  F010         	call	___ftmul	;wreg free
  4999  001916  C03A  F04C         	movff	?___ftmul,_fround$1699
  5000  00191A  C03B  F04D         	movff	?___ftmul+1,_fround$1699+1
  5001  00191E  C03C  F04E         	movff	?___ftmul+2,_fround$1699+2
  5002                           
  5003                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5004  001922  C04C  F03A         	movff	_fround$1699,___ftmul@f1
  5005  001926  C04D  F03B         	movff	_fround$1699+1,___ftmul@f1+1
  5006  00192A  C04E  F03C         	movff	_fround$1699+2,___ftmul@f1+2
  5007  00192E  0E00               	movlw	0
  5008  001930  6E3D               	movwf	___ftmul@f2,c
  5009  001932  0E00               	movlw	0
  5010  001934  6E3E               	movwf	___ftmul@f2+1,c
  5011  001936  0E3F               	movlw	63
  5012  001938  6E3F               	movwf	___ftmul@f2+2,c
  5013  00193A  EC79  F010         	call	___ftmul	;wreg free
  5014  00193E  C03A  F049         	movff	?___ftmul,?_fround
  5015  001942  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5016  001946  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5017  00194A  0012               	return	
  5018  00194C                     l4445:
  5019                           
  5020                           ;doprnt.c: 415: else if(prec > 10)
  5021  00194C  0E0A               	movlw	10
  5022  00194E  6452               	cpfsgt	fround@prec,c
  5023  001950  D063               	goto	l4453
  5024                           
  5025                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5026  001952  0E00               	movlw	0
  5027  001954  6E14               	movwf	___wmul@multiplicand+1,c
  5028  001956  0E03               	movlw	3
  5029  001958  6E13               	movwf	___wmul@multiplicand,c
  5030  00195A  0E00               	movlw	0
  5031  00195C  6E04               	movwf	___awmod@divisor+1,c
  5032  00195E  0E0A               	movlw	10
  5033  001960  6E03               	movwf	___awmod@divisor,c
  5034  001962  C052  F001         	movff	fround@prec,___awmod@dividend
  5035  001966  6A02               	clrf	___awmod@dividend+1,c
  5036  001968  ECB5  F013         	call	___awmod	;wreg free
  5037  00196C  C001  F011         	movff	?___awmod,___wmul@multiplier
  5038  001970  C002  F012         	movff	?___awmod+1,___wmul@multiplier+1
  5039  001974  ECEA  F015         	call	___wmul	;wreg free
  5040  001978  0E29               	movlw	low __npowers_
  5041  00197A  2411               	addwf	?___wmul,w,c
  5042  00197C  6EF6               	movwf	tblptrl,c
  5043  00197E  0E08               	movlw	high __npowers_
  5044  001980  2012               	addwfc	?___wmul+1,w,c
  5045  001982  6EF7               	movwf	tblptrh,c
  5046  001984  0009               	tblrd		*+
  5047  001986  CFF5 F03D          	movff	tablat,___ftmul@f2
  5048  00198A  0009               	tblrd		*+
  5049  00198C  CFF5 F03E          	movff	tablat,___ftmul@f2+1
  5050  001990  000A               	tblrd		*-
  5051  001992  CFF5 F03F          	movff	tablat,___ftmul@f2+2
  5052  001996  0E00               	movlw	0
  5053  001998  6E14               	movwf	___wmul@multiplicand+1,c
  5054  00199A  0E03               	movlw	3
  5055  00199C  6E13               	movwf	___wmul@multiplicand,c
  5056  00199E  0E00               	movlw	0
  5057  0019A0  6E0B               	movwf	___awdiv@divisor+1,c
  5058  0019A2  0E0A               	movlw	10
  5059  0019A4  6E0A               	movwf	___awdiv@divisor,c
  5060  0019A6  C052  F008         	movff	fround@prec,___awdiv@dividend
  5061  0019AA  6A09               	clrf	___awdiv@dividend+1,c
  5062  0019AC  EC09  F013         	call	___awdiv	;wreg free
  5063  0019B0  0E09               	movlw	9
  5064  0019B2  2408               	addwf	?___awdiv,w,c
  5065  0019B4  6E11               	movwf	___wmul@multiplier,c
  5066  0019B6  0E00               	movlw	0
  5067  0019B8  2009               	addwfc	?___awdiv+1,w,c
  5068  0019BA  6E12               	movwf	___wmul@multiplier+1,c
  5069  0019BC  ECEA  F015         	call	___wmul	;wreg free
  5070  0019C0  0E29               	movlw	low __npowers_
  5071  0019C2  2411               	addwf	?___wmul,w,c
  5072  0019C4  6EF6               	movwf	tblptrl,c
  5073  0019C6  0E08               	movlw	high __npowers_
  5074  0019C8  2012               	addwfc	?___wmul+1,w,c
  5075  0019CA  6EF7               	movwf	tblptrh,c
  5076  0019CC  0009               	tblrd		*+
  5077  0019CE  CFF5 F03A          	movff	tablat,___ftmul@f1
  5078  0019D2  0009               	tblrd		*+
  5079  0019D4  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  5080  0019D8  000A               	tblrd		*-
  5081  0019DA  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  5082  0019DE  EC79  F010         	call	___ftmul	;wreg free
  5083  0019E2  C03A  F04F         	movff	?___ftmul,_fround$1698
  5084  0019E6  C03B  F050         	movff	?___ftmul+1,_fround$1698+1
  5085  0019EA  C03C  F051         	movff	?___ftmul+2,_fround$1698+2
  5086                           
  5087                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5088  0019EE  C04F  F03A         	movff	_fround$1698,___ftmul@f1
  5089  0019F2  C050  F03B         	movff	_fround$1698+1,___ftmul@f1+1
  5090  0019F6  C051  F03C         	movff	_fround$1698+2,___ftmul@f1+2
  5091  0019FA  0E00               	movlw	0
  5092  0019FC  6E3D               	movwf	___ftmul@f2,c
  5093  0019FE  0E00               	movlw	0
  5094  001A00  6E3E               	movwf	___ftmul@f2+1,c
  5095  001A02  0E3F               	movlw	63
  5096  001A04  6E3F               	movwf	___ftmul@f2+2,c
  5097  001A06  EC79  F010         	call	___ftmul	;wreg free
  5098  001A0A  C03A  F049         	movff	?___ftmul,?_fround
  5099  001A0E  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5100  001A12  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5101  001A16  0012               	return	
  5102  001A18                     l4453:
  5103                           
  5104                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5105  001A18  5052               	movf	fround@prec,w,c
  5106  001A1A  0D03               	mullw	3
  5107  001A1C  0E29               	movlw	low __npowers_
  5108  001A1E  24F3               	addwf	prodl,w,c
  5109  001A20  6EF6               	movwf	tblptrl,c
  5110  001A22  0E08               	movlw	high __npowers_
  5111  001A24  20F4               	addwfc	prodh,w,c
  5112  001A26  6EF7               	movwf	tblptrh,c
  5113  001A28  0009               	tblrd		*+
  5114  001A2A  CFF5 F03A          	movff	tablat,___ftmul@f1
  5115  001A2E  0009               	tblrd		*+
  5116  001A30  CFF5 F03B          	movff	tablat,___ftmul@f1+1
  5117  001A34  000A               	tblrd		*-
  5118  001A36  CFF5 F03C          	movff	tablat,___ftmul@f1+2
  5119  001A3A  0E00               	movlw	0
  5120  001A3C  6E3D               	movwf	___ftmul@f2,c
  5121  001A3E  0E00               	movlw	0
  5122  001A40  6E3E               	movwf	___ftmul@f2+1,c
  5123  001A42  0E3F               	movlw	63
  5124  001A44  6E3F               	movwf	___ftmul@f2+2,c
  5125  001A46  EC79  F010         	call	___ftmul	;wreg free
  5126  001A4A  C03A  F049         	movff	?___ftmul,?_fround
  5127  001A4E  C03B  F04A         	movff	?___ftmul+1,?_fround+1
  5128  001A52  C03C  F04B         	movff	?___ftmul+2,?_fround+2
  5129  001A56  0012               	return	
  5130  001A58                     __end_of_fround:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodh	equ	0xFF4
  5137                           prodl	equ	0xFF3
  5138                           intcon2	equ	0xFF1
  5139                           wreg	equ	0xFE8
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function ___wmul *****************
  5148 ;; Defined at:
  5149 ;;		line 3 in file "/opt/microchip/xc8/v1.31/sources/common/wmul.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  multiplier      2   16[COMRAM] unsigned int 
  5152 ;;  multiplicand    2   18[COMRAM] unsigned int 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  product         2   20[COMRAM] unsigned int 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  2   16[COMRAM] unsigned int 
  5157 ;; Registers used:
  5158 ;;		wreg, status,2, status,0, prodl, prodh
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5164 ;;      Params:         4       0       0       0       0       0       0       0       0
  5165 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5167 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5168 ;;Total ram usage:        6 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_get_temperature
  5174 ;;		_fround
  5175 ;;		_scale
  5176 ;;		_sprintf
  5177 ;;		_eval_poly
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text20
  5182  002BD4                     __ptext20:
  5183                           	opt stack 0
  5184  002BD4                     ___wmul:
  5185                           	opt stack 26
  5186                           
  5187                           ;incstack = 0
  5188  002BD4  5011               	movf	___wmul@multiplier,w,c
  5189  002BD6  0213               	mulwf	___wmul@multiplicand,c
  5190  002BD8  CFF3 F015          	movff	prodl,___wmul@product
  5191  002BDC  CFF4 F016          	movff	prodh,___wmul@product+1
  5192  002BE0  5011               	movf	___wmul@multiplier,w,c
  5193  002BE2  0214               	mulwf	___wmul@multiplicand+1,c
  5194  002BE4  CFF3 FFF4          	movff	prodl,prodh
  5195  002BE8  6AF3               	clrf	prodl,c
  5196  002BEA  50F3               	movf	prodl,w,c
  5197  002BEC  2615               	addwf	___wmul@product,f,c
  5198  002BEE  50F4               	movf	prodh,w,c
  5199  002BF0  2216               	addwfc	___wmul@product+1,f,c
  5200  002BF2  5012               	movf	___wmul@multiplier+1,w,c
  5201  002BF4  0213               	mulwf	___wmul@multiplicand,c
  5202  002BF6  CFF3 FFF4          	movff	prodl,prodh
  5203  002BFA  6AF3               	clrf	prodl,c
  5204  002BFC  50F3               	movf	prodl,w,c
  5205  002BFE  2615               	addwf	___wmul@product,f,c
  5206  002C00  50F4               	movf	prodh,w,c
  5207  002C02  2216               	addwfc	___wmul@product+1,f,c
  5208  002C04  C015  F011         	movff	___wmul@product,?___wmul
  5209  002C08  C016  F012         	movff	___wmul@product+1,?___wmul+1
  5210  002C0C  0012               	return	
  5211  002C0E                     __end_of___wmul:
  5212                           	opt stack 0
  5213                           tblptru	equ	0xFF8
  5214                           tblptrh	equ	0xFF7
  5215                           tblptrl	equ	0xFF6
  5216                           tablat	equ	0xFF5
  5217                           prodh	equ	0xFF4
  5218                           prodl	equ	0xFF3
  5219                           intcon2	equ	0xFF1
  5220                           wreg	equ	0xFE8
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function ___awmod *****************
  5229 ;; Defined at:
  5230 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/awmod.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;  dividend        2    0[COMRAM] int 
  5233 ;;  divisor         2    2[COMRAM] int 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  sign            1    6[COMRAM] unsigned char 
  5236 ;;  counter         1    5[COMRAM] unsigned char 
  5237 ;; Return value:  Size  Location     Type
  5238 ;;                  2    0[COMRAM] int 
  5239 ;; Registers used:
  5240 ;;		wreg, status,2, status,0, prodl
  5241 ;; Tracked objects:
  5242 ;;		On entry : 0/0
  5243 ;;		On exit  : 0/0
  5244 ;;		Unchanged: 0/0
  5245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5246 ;;      Params:         4       0       0       0       0       0       0       0       0
  5247 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5248 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5249 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5250 ;;Total ram usage:        7 bytes
  5251 ;; Hardware stack levels used:    1
  5252 ;; This function calls:
  5253 ;;		Nothing
  5254 ;; This function is called by:
  5255 ;;		_main
  5256 ;;		_fround
  5257 ;;		_scale
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text21
  5262  00276A                     __ptext21:
  5263                           	opt stack 0
  5264  00276A                     ___awmod:
  5265                           	opt stack 29
  5266                           
  5267                           ;incstack = 0
  5268  00276A  6E05               	movwf	??___awmod& (0+255),c
  5269  00276C  0E00               	movlw	0
  5270  00276E  6E07               	movwf	___awmod@sign,c
  5271  002770  5005               	movf	??___awmod& (0+255),w,c
  5272  002772  5002               	movf	___awmod@dividend+1,w,c
  5273  002774  0A80               	xorlw	128
  5274  002776  6EF3               	movwf	prodl,c
  5275  002778  0E80               	movlw	128
  5276  00277A  5CF3               	subwf	prodl,w,c
  5277  00277C  0E00               	movlw	0
  5278  00277E  B4D8               	btfsc	status,2,c
  5279  002780  5C01               	subwf	___awmod@dividend,w,c
  5280  002782  B0D8               	btfsc	status,0,c
  5281  002784  D008               	goto	l4397
  5282  002786  6C01               	negf	___awmod@dividend,c
  5283  002788  1E02               	comf	___awmod@dividend+1,f,c
  5284  00278A  B0D8               	btfsc	status,0,c
  5285  00278C  2A02               	incf	___awmod@dividend+1,f,c
  5286  00278E  6E05               	movwf	??___awmod& (0+255),c
  5287  002790  0E01               	movlw	1
  5288  002792  6E07               	movwf	___awmod@sign,c
  5289  002794  5005               	movf	??___awmod& (0+255),w,c
  5290  002796                     l4397:
  5291  002796  5004               	movf	___awmod@divisor+1,w,c
  5292  002798  0A80               	xorlw	128
  5293  00279A  6EF3               	movwf	prodl,c
  5294  00279C  0E80               	movlw	128
  5295  00279E  5CF3               	subwf	prodl,w,c
  5296  0027A0  0E00               	movlw	0
  5297  0027A2  B4D8               	btfsc	status,2,c
  5298  0027A4  5C03               	subwf	___awmod@divisor,w,c
  5299  0027A6  B0D8               	btfsc	status,0,c
  5300  0027A8  D004               	goto	l4401
  5301  0027AA  6C03               	negf	___awmod@divisor,c
  5302  0027AC  1E04               	comf	___awmod@divisor+1,f,c
  5303  0027AE  B0D8               	btfsc	status,0,c
  5304  0027B0  2A04               	incf	___awmod@divisor+1,f,c
  5305  0027B2                     l4401:
  5306  0027B2  5004               	movf	___awmod@divisor+1,w,c
  5307  0027B4  1003               	iorwf	___awmod@divisor,w,c
  5308  0027B6  B4D8               	btfsc	status,2,c
  5309  0027B8  D01A               	goto	l4417
  5310  0027BA  6E05               	movwf	??___awmod& (0+255),c
  5311  0027BC  0E01               	movlw	1
  5312  0027BE  6E06               	movwf	___awmod@counter,c
  5313  0027C0  5005               	movf	??___awmod& (0+255),w,c
  5314  0027C2  D004               	goto	l4407
  5315  0027C4                     l4405:
  5316  0027C4  90D8               	bcf	status,0,c
  5317  0027C6  3603               	rlcf	___awmod@divisor,f,c
  5318  0027C8  3604               	rlcf	___awmod@divisor+1,f,c
  5319  0027CA  2A06               	incf	___awmod@counter,f,c
  5320  0027CC                     l4407:
  5321  0027CC  AE04               	btfss	___awmod@divisor+1,7,c
  5322  0027CE  D7FA               	goto	l4405
  5323  0027D0                     l4409:
  5324  0027D0  5003               	movf	___awmod@divisor,w,c
  5325  0027D2  5C01               	subwf	___awmod@dividend,w,c
  5326  0027D4  5004               	movf	___awmod@divisor+1,w,c
  5327  0027D6  5802               	subwfb	___awmod@dividend+1,w,c
  5328  0027D8  A0D8               	btfss	status,0,c
  5329  0027DA  D004               	goto	l4413
  5330  0027DC  5003               	movf	___awmod@divisor,w,c
  5331  0027DE  5E01               	subwf	___awmod@dividend,f,c
  5332  0027E0  5004               	movf	___awmod@divisor+1,w,c
  5333  0027E2  5A02               	subwfb	___awmod@dividend+1,f,c
  5334  0027E4                     l4413:
  5335  0027E4  90D8               	bcf	status,0,c
  5336  0027E6  3204               	rrcf	___awmod@divisor+1,f,c
  5337  0027E8  3203               	rrcf	___awmod@divisor,f,c
  5338  0027EA  2E06               	decfsz	___awmod@counter,f,c
  5339  0027EC  D7F1               	goto	l4409
  5340  0027EE                     l4417:
  5341  0027EE  5007               	movf	___awmod@sign,w,c
  5342  0027F0  B4D8               	btfsc	status,2,c
  5343  0027F2  D004               	goto	l4421
  5344  0027F4  6C01               	negf	___awmod@dividend,c
  5345  0027F6  1E02               	comf	___awmod@dividend+1,f,c
  5346  0027F8  B0D8               	btfsc	status,0,c
  5347  0027FA  2A02               	incf	___awmod@dividend+1,f,c
  5348  0027FC                     l4421:
  5349  0027FC  C001  F001         	movff	___awmod@dividend,?___awmod
  5350  002800  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5351  002804  0012               	return	
  5352  002806                     __end_of___awmod:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon2	equ	0xFF1
  5361                           wreg	equ	0xFE8
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           postdec2	equ	0xFDD
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function ___awdiv *****************
  5370 ;; Defined at:
  5371 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/awdiv.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  dividend        2    7[COMRAM] int 
  5374 ;;  divisor         2    9[COMRAM] int 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;  quotient        2   14[COMRAM] int 
  5377 ;;  sign            1   13[COMRAM] unsigned char 
  5378 ;;  counter         1   12[COMRAM] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  2    7[COMRAM] int 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, prodl
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5388 ;;      Params:         4       0       0       0       0       0       0       0       0
  5389 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5390 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5391 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5392 ;;Total ram usage:        9 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; This function calls:
  5395 ;;		Nothing
  5396 ;; This function is called by:
  5397 ;;		_fround
  5398 ;;		_scale
  5399 ;;		_sprintf
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text22
  5404  002612                     __ptext22:
  5405                           	opt stack 0
  5406  002612                     ___awdiv:
  5407                           	opt stack 26
  5408                           
  5409                           ;incstack = 0
  5410  002612  6E0C               	movwf	??___awdiv& (0+255),c
  5411  002614  0E00               	movlw	0
  5412  002616  6E0E               	movwf	___awdiv@sign,c
  5413  002618  500C               	movf	??___awdiv& (0+255),w,c
  5414  00261A  500B               	movf	___awdiv@divisor+1,w,c
  5415  00261C  0A80               	xorlw	128
  5416  00261E  6EF3               	movwf	prodl,c
  5417  002620  0E80               	movlw	128
  5418  002622  5CF3               	subwf	prodl,w,c
  5419  002624  0E00               	movlw	0
  5420  002626  B4D8               	btfsc	status,2,c
  5421  002628  5C0A               	subwf	___awdiv@divisor,w,c
  5422  00262A  B0D8               	btfsc	status,0,c
  5423  00262C  D008               	goto	l4353
  5424  00262E  6C0A               	negf	___awdiv@divisor,c
  5425  002630  1E0B               	comf	___awdiv@divisor+1,f,c
  5426  002632  B0D8               	btfsc	status,0,c
  5427  002634  2A0B               	incf	___awdiv@divisor+1,f,c
  5428  002636  6E0C               	movwf	??___awdiv& (0+255),c
  5429  002638  0E01               	movlw	1
  5430  00263A  6E0E               	movwf	___awdiv@sign,c
  5431  00263C  500C               	movf	??___awdiv& (0+255),w,c
  5432  00263E                     l4353:
  5433  00263E  5009               	movf	___awdiv@dividend+1,w,c
  5434  002640  0A80               	xorlw	128
  5435  002642  6EF3               	movwf	prodl,c
  5436  002644  0E80               	movlw	128
  5437  002646  5CF3               	subwf	prodl,w,c
  5438  002648  0E00               	movlw	0
  5439  00264A  B4D8               	btfsc	status,2,c
  5440  00264C  5C08               	subwf	___awdiv@dividend,w,c
  5441  00264E  B0D8               	btfsc	status,0,c
  5442  002650  D006               	goto	l4359
  5443  002652  6C08               	negf	___awdiv@dividend,c
  5444  002654  1E09               	comf	___awdiv@dividend+1,f,c
  5445  002656  B0D8               	btfsc	status,0,c
  5446  002658  2A09               	incf	___awdiv@dividend+1,f,c
  5447  00265A  0E01               	movlw	1
  5448  00265C  1A0E               	xorwf	___awdiv@sign,f,c
  5449  00265E                     l4359:
  5450  00265E  0E00               	movlw	0
  5451  002660  6E10               	movwf	___awdiv@quotient+1,c
  5452  002662  0E00               	movlw	0
  5453  002664  6E0F               	movwf	___awdiv@quotient,c
  5454  002666  500B               	movf	___awdiv@divisor+1,w,c
  5455  002668  100A               	iorwf	___awdiv@divisor,w,c
  5456  00266A  B4D8               	btfsc	status,2,c
  5457  00266C  D01E               	goto	l4381
  5458  00266E  6E0C               	movwf	??___awdiv& (0+255),c
  5459  002670  0E01               	movlw	1
  5460  002672  6E0D               	movwf	___awdiv@counter,c
  5461  002674  500C               	movf	??___awdiv& (0+255),w,c
  5462  002676  D004               	goto	l4367
  5463  002678                     l4365:
  5464  002678  90D8               	bcf	status,0,c
  5465  00267A  360A               	rlcf	___awdiv@divisor,f,c
  5466  00267C  360B               	rlcf	___awdiv@divisor+1,f,c
  5467  00267E  2A0D               	incf	___awdiv@counter,f,c
  5468  002680                     l4367:
  5469  002680  AE0B               	btfss	___awdiv@divisor+1,7,c
  5470  002682  D7FA               	goto	l4365
  5471  002684                     l4369:
  5472  002684  90D8               	bcf	status,0,c
  5473  002686  360F               	rlcf	___awdiv@quotient,f,c
  5474  002688  3610               	rlcf	___awdiv@quotient+1,f,c
  5475  00268A  500A               	movf	___awdiv@divisor,w,c
  5476  00268C  5C08               	subwf	___awdiv@dividend,w,c
  5477  00268E  500B               	movf	___awdiv@divisor+1,w,c
  5478  002690  5809               	subwfb	___awdiv@dividend+1,w,c
  5479  002692  A0D8               	btfss	status,0,c
  5480  002694  D005               	goto	l4377
  5481  002696  500A               	movf	___awdiv@divisor,w,c
  5482  002698  5E08               	subwf	___awdiv@dividend,f,c
  5483  00269A  500B               	movf	___awdiv@divisor+1,w,c
  5484  00269C  5A09               	subwfb	___awdiv@dividend+1,f,c
  5485  00269E  800F               	bsf	___awdiv@quotient,0,c
  5486  0026A0                     l4377:
  5487  0026A0  90D8               	bcf	status,0,c
  5488  0026A2  320B               	rrcf	___awdiv@divisor+1,f,c
  5489  0026A4  320A               	rrcf	___awdiv@divisor,f,c
  5490  0026A6  2E0D               	decfsz	___awdiv@counter,f,c
  5491  0026A8  D7ED               	goto	l4369
  5492  0026AA                     l4381:
  5493  0026AA  500E               	movf	___awdiv@sign,w,c
  5494  0026AC  B4D8               	btfsc	status,2,c
  5495  0026AE  D004               	goto	l4385
  5496  0026B0  6C0F               	negf	___awdiv@quotient,c
  5497  0026B2  1E10               	comf	___awdiv@quotient+1,f,c
  5498  0026B4  B0D8               	btfsc	status,0,c
  5499  0026B6  2A10               	incf	___awdiv@quotient+1,f,c
  5500  0026B8                     l4385:
  5501  0026B8  C00F  F008         	movff	___awdiv@quotient,?___awdiv
  5502  0026BC  C010  F009         	movff	___awdiv@quotient+1,?___awdiv+1
  5503  0026C0  0012               	return	
  5504  0026C2                     __end_of___awdiv:
  5505                           	opt stack 0
  5506                           tblptru	equ	0xFF8
  5507                           tblptrh	equ	0xFF7
  5508                           tblptrl	equ	0xFF6
  5509                           tablat	equ	0xFF5
  5510                           prodh	equ	0xFF4
  5511                           prodl	equ	0xFF3
  5512                           intcon2	equ	0xFF1
  5513                           wreg	equ	0xFE8
  5514                           indf2	equ	0xFDF
  5515                           postinc2	equ	0xFDE
  5516                           postdec2	equ	0xFDD
  5517                           fsr2h	equ	0xFDA
  5518                           fsr2l	equ	0xFD9
  5519                           status	equ	0xFD8
  5520                           
  5521 ;; *************** function __tdiv_to_l_ *****************
  5522 ;; Defined at:
  5523 ;;		line 60 in file "/opt/microchip/xc8/v1.31/sources/common/ftdivl.c"
  5524 ;; Parameters:    Size  Location     Type
  5525 ;;  f1              3    0[COMRAM] float 
  5526 ;;  f2              3    3[COMRAM] float 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  quot            4    9[COMRAM] unsigned long 
  5529 ;;  exp1            1   14[COMRAM] unsigned char 
  5530 ;;  cntr            1   13[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  4    0[COMRAM] unsigned long 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5540 ;;      Params:         6       0       0       0       0       0       0       0       0
  5541 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5542 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5543 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5544 ;;Total ram usage:       15 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_sprintf
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text23
  5554  001EB6                     __ptext23:
  5555                           	opt stack 0
  5556  001EB6                     __tdiv_to_l_:
  5557                           	opt stack 27
  5558                           
  5559                           ;incstack = 0
  5560  001EB6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5561  001EBA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5562  001EBC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5563  001EBE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5564  001EC0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5565  001EC2  E301               	bnc	u2081
  5566  001EC4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5567  001EC6                     u2081:
  5568  001EC6  5007               	movf	??__tdiv_to_l_,w,c
  5569  001EC8  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5570  001ECA  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  5571  001ECC  D009               	goto	l4513
  5572  001ECE  0E00               	movlw	0
  5573  001ED0  6E01               	movwf	?__tdiv_to_l_,c
  5574  001ED2  0E00               	movlw	0
  5575  001ED4  6E02               	movwf	?__tdiv_to_l_+1,c
  5576  001ED6  0E00               	movlw	0
  5577  001ED8  6E03               	movwf	?__tdiv_to_l_+2,c
  5578  001EDA  0E00               	movlw	0
  5579  001EDC  6E04               	movwf	?__tdiv_to_l_+3,c
  5580  001EDE  0012               	return	
  5581  001EE0                     l4513:
  5582  001EE0  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5583  001EE4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5584  001EE6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5585  001EE8  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5586  001EEA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5587  001EEC  E301               	bnc	u2101
  5588  001EEE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5589  001EF0                     u2101:
  5590  001EF0  5007               	movf	??__tdiv_to_l_,w,c
  5591  001EF2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5592  001EF4  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  5593  001EF6  D009               	goto	l4519
  5594  001EF8  0E00               	movlw	0
  5595  001EFA  6E01               	movwf	?__tdiv_to_l_,c
  5596  001EFC  0E00               	movlw	0
  5597  001EFE  6E02               	movwf	?__tdiv_to_l_+1,c
  5598  001F00  0E00               	movlw	0
  5599  001F02  6E03               	movwf	?__tdiv_to_l_+2,c
  5600  001F04  0E00               	movlw	0
  5601  001F06  6E04               	movwf	?__tdiv_to_l_+3,c
  5602  001F08  0012               	return	
  5603  001F0A                     l4519:
  5604  001F0A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5605  001F0C  0EFF               	movlw	255
  5606  001F0E  1601               	andwf	__tdiv_to_l_@f1,f,c
  5607  001F10  0EFF               	movlw	255
  5608  001F12  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5609  001F14  0E00               	movlw	0
  5610  001F16  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5611  001F18  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5612  001F1A  0EFF               	movlw	255
  5613  001F1C  1604               	andwf	__tdiv_to_l_@f2,f,c
  5614  001F1E  0EFF               	movlw	255
  5615  001F20  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5616  001F22  0E00               	movlw	0
  5617  001F24  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5618  001F26  0E00               	movlw	0
  5619  001F28  6E0A               	movwf	__tdiv_to_l_@quot,c
  5620  001F2A  0E00               	movlw	0
  5621  001F2C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5622  001F2E  0E00               	movlw	0
  5623  001F30  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5624  001F32  0E00               	movlw	0
  5625  001F34  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5626  001F36  0E7F               	movlw	127
  5627  001F38  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5628  001F3A  500E               	movf	__tdiv_to_l_@cntr,w,c
  5629  001F3C  0F98               	addlw	152
  5630  001F3E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5631  001F40  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  5632  001F42  0E18               	movlw	24
  5633  001F44  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5634  001F46  5007               	movf	??__tdiv_to_l_& (0+255),w,c
  5635  001F48                     l4533:
  5636  001F48  90D8               	bcf	status,0,c
  5637  001F4A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5638  001F4C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5639  001F4E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5640  001F50  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5641  001F52  5004               	movf	__tdiv_to_l_@f2,w,c
  5642  001F54  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5643  001F56  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5644  001F58  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5645  001F5A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5646  001F5C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5647  001F5E  A0D8               	btfss	status,0,c
  5648  001F60  D007               	goto	l693
  5649  001F62  5004               	movf	__tdiv_to_l_@f2,w,c
  5650  001F64  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5651  001F66  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5652  001F68  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5653  001F6A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5654  001F6C  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5655  001F6E  800A               	bsf	__tdiv_to_l_@quot,0,c
  5656  001F70                     l693:
  5657  001F70  90D8               	bcf	status,0,c
  5658  001F72  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5659  001F74  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5660  001F76  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5661  001F78  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5662  001F7A  D7E6               	goto	l4533
  5663  001F7C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5664  001F7E  D019               	goto	l4553
  5665  001F80  500F               	movf	__tdiv_to_l_@exp1,w,c
  5666  001F82  0A80               	xorlw	128
  5667  001F84  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  5668  001F86  0EE9               	movlw	233
  5669  001F88  0A80               	xorlw	128
  5670  001F8A  5C07               	subwf	??__tdiv_to_l_,w,c
  5671  001F8C  B0D8               	btfsc	status,0,c
  5672  001F8E  D009               	goto	l4549
  5673  001F90  0E00               	movlw	0
  5674  001F92  6E01               	movwf	?__tdiv_to_l_,c
  5675  001F94  0E00               	movlw	0
  5676  001F96  6E02               	movwf	?__tdiv_to_l_+1,c
  5677  001F98  0E00               	movlw	0
  5678  001F9A  6E03               	movwf	?__tdiv_to_l_+2,c
  5679  001F9C  0E00               	movlw	0
  5680  001F9E  6E04               	movwf	?__tdiv_to_l_+3,c
  5681  001FA0  0012               	return	
  5682  001FA2                     l4549:
  5683  001FA2  90D8               	bcf	status,0,c
  5684  001FA4  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5685  001FA6  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5686  001FA8  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5687  001FAA  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5688  001FAC  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5689  001FAE  D7F9               	goto	l4549
  5690  001FB0  D014               	goto	l699
  5691  001FB2                     l4553:
  5692  001FB2  0E17               	movlw	23
  5693  001FB4  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5694  001FB6  D00F               	goto	l4561
  5695  001FB8  0E00               	movlw	0
  5696  001FBA  6E01               	movwf	?__tdiv_to_l_,c
  5697  001FBC  0E00               	movlw	0
  5698  001FBE  6E02               	movwf	?__tdiv_to_l_+1,c
  5699  001FC0  0E00               	movlw	0
  5700  001FC2  6E03               	movwf	?__tdiv_to_l_+2,c
  5701  001FC4  0E00               	movlw	0
  5702  001FC6  6E04               	movwf	?__tdiv_to_l_+3,c
  5703  001FC8  0012               	return	
  5704  001FCA                     l4559:
  5705  001FCA  90D8               	bcf	status,0,c
  5706  001FCC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5707  001FCE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5708  001FD0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5709  001FD2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5710  001FD4  060F               	decf	__tdiv_to_l_@exp1,f,c
  5711  001FD6                     l4561:
  5712  001FD6  660F               	tstfsz	__tdiv_to_l_@exp1,c
  5713  001FD8  D7F8               	goto	l4559
  5714  001FDA                     l699:
  5715  001FDA  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5716  001FDE  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5717  001FE2  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5718  001FE6  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5719  001FEA  0012               	return	
  5720  001FEC                     __end_of__tdiv_to_l_:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           intcon2	equ	0xFF1
  5729                           wreg	equ	0xFE8
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8
  5736                           
  5737 ;; *************** function __div_to_l_ *****************
  5738 ;; Defined at:
  5739 ;;		line 60 in file "/opt/microchip/xc8/v1.31/sources/common/fldivl.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;  f1              3    0[COMRAM] unsigned long 
  5742 ;;  f2              3    3[COMRAM] unsigned long 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  quot            4   10[COMRAM] unsigned long 
  5745 ;;  exp1            1   15[COMRAM] unsigned char 
  5746 ;;  cntr            1   14[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  4    0[COMRAM] unsigned long 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5756 ;;      Params:         6       0       0       0       0       0       0       0       0
  5757 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5758 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5759 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5760 ;;Total ram usage:       16 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; This function calls:
  5763 ;;		Nothing
  5764 ;; This function is called by:
  5765 ;;		_sprintf
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text24
  5770  001C10                     __ptext24:
  5771                           	opt stack 0
  5772  001C10                     __div_to_l_:
  5773                           	opt stack 27
  5774                           
  5775                           ;incstack = 0
  5776  001C10  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  5777  001C14  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  5778  001C18  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  5779  001C1C  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  5780  001C20  0E18               	movlw	24
  5781  001C22  D005               	goto	u2170
  5782  001C24                     u2175:
  5783  001C24  90D8               	bcf	status,0,c
  5784  001C26  320A               	rrcf	??__div_to_l_+3,f,c
  5785  001C28  3209               	rrcf	??__div_to_l_+2,f,c
  5786  001C2A  3208               	rrcf	??__div_to_l_+1,f,c
  5787  001C2C  3207               	rrcf	??__div_to_l_,f,c
  5788  001C2E                     u2170:
  5789  001C2E  2EE8               	decfsz	wreg,f,c
  5790  001C30  D7F9               	goto	u2175
  5791  001C32  5007               	movf	??__div_to_l_,w,c
  5792  001C34  6E10               	movwf	__div_to_l_@exp1,c
  5793  001C36  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  5794  001C38  D009               	goto	l4569
  5795  001C3A  0E00               	movlw	0
  5796  001C3C  6E01               	movwf	?__div_to_l_,c
  5797  001C3E  0E00               	movlw	0
  5798  001C40  6E02               	movwf	?__div_to_l_+1,c
  5799  001C42  0E00               	movlw	0
  5800  001C44  6E03               	movwf	?__div_to_l_+2,c
  5801  001C46  0E00               	movlw	0
  5802  001C48  6E04               	movwf	?__div_to_l_+3,c
  5803  001C4A  0012               	return	
  5804  001C4C                     l4569:
  5805  001C4C  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  5806  001C50  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  5807  001C54  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  5808  001C58  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  5809  001C5C  0E18               	movlw	24
  5810  001C5E  D005               	goto	u2190
  5811  001C60                     u2195:
  5812  001C60  90D8               	bcf	status,0,c
  5813  001C62  320A               	rrcf	??__div_to_l_+3,f,c
  5814  001C64  3209               	rrcf	??__div_to_l_+2,f,c
  5815  001C66  3208               	rrcf	??__div_to_l_+1,f,c
  5816  001C68  3207               	rrcf	??__div_to_l_,f,c
  5817  001C6A                     u2190:
  5818  001C6A  2EE8               	decfsz	wreg,f,c
  5819  001C6C  D7F9               	goto	u2195
  5820  001C6E  5007               	movf	??__div_to_l_,w,c
  5821  001C70  6E0F               	movwf	__div_to_l_@cntr,c
  5822  001C72  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  5823  001C74  D009               	goto	l4575
  5824  001C76  0E00               	movlw	0
  5825  001C78  6E01               	movwf	?__div_to_l_,c
  5826  001C7A  0E00               	movlw	0
  5827  001C7C  6E02               	movwf	?__div_to_l_+1,c
  5828  001C7E  0E00               	movlw	0
  5829  001C80  6E03               	movwf	?__div_to_l_+2,c
  5830  001C82  0E00               	movlw	0
  5831  001C84  6E04               	movwf	?__div_to_l_+3,c
  5832  001C86  0012               	return	
  5833  001C88                     l4575:
  5834  001C88  8E03               	bsf	__div_to_l_@f1+2,7,c
  5835  001C8A  0EFF               	movlw	255
  5836  001C8C  1601               	andwf	__div_to_l_@f1,f,c
  5837  001C8E  0EFF               	movlw	255
  5838  001C90  1602               	andwf	__div_to_l_@f1+1,f,c
  5839  001C92  0EFF               	movlw	255
  5840  001C94  1603               	andwf	__div_to_l_@f1+2,f,c
  5841  001C96  0E00               	movlw	0
  5842  001C98  1604               	andwf	__div_to_l_@f1+3,f,c
  5843  001C9A  8E06               	bsf	__div_to_l_@f2+2,7,c
  5844  001C9C  0EFF               	movlw	255
  5845  001C9E  1604               	andwf	__div_to_l_@f2,f,c
  5846  001CA0  0EFF               	movlw	255
  5847  001CA2  1605               	andwf	__div_to_l_@f2+1,f,c
  5848  001CA4  0EFF               	movlw	255
  5849  001CA6  1606               	andwf	__div_to_l_@f2+2,f,c
  5850  001CA8  0E00               	movlw	0
  5851  001CAA  1607               	andwf	__div_to_l_@f2+3,f,c
  5852  001CAC  0E00               	movlw	0
  5853  001CAE  6E0B               	movwf	__div_to_l_@quot,c
  5854  001CB0  0E00               	movlw	0
  5855  001CB2  6E0C               	movwf	__div_to_l_@quot+1,c
  5856  001CB4  0E00               	movlw	0
  5857  001CB6  6E0D               	movwf	__div_to_l_@quot+2,c
  5858  001CB8  0E00               	movlw	0
  5859  001CBA  6E0E               	movwf	__div_to_l_@quot+3,c
  5860  001CBC  0E7F               	movlw	127
  5861  001CBE  5E10               	subwf	__div_to_l_@exp1,f,c
  5862  001CC0  500F               	movf	__div_to_l_@cntr,w,c
  5863  001CC2  0FA0               	addlw	160
  5864  001CC4  5E10               	subwf	__div_to_l_@exp1,f,c
  5865  001CC6  6E07               	movwf	??__div_to_l_& (0+255),c
  5866  001CC8  0E20               	movlw	32
  5867  001CCA  6E0F               	movwf	__div_to_l_@cntr,c
  5868  001CCC  5007               	movf	??__div_to_l_& (0+255),w,c
  5869  001CCE                     l574:
  5870  001CCE  90D8               	bcf	status,0,c
  5871  001CD0  360B               	rlcf	__div_to_l_@quot,f,c
  5872  001CD2  360C               	rlcf	__div_to_l_@quot+1,f,c
  5873  001CD4  360D               	rlcf	__div_to_l_@quot+2,f,c
  5874  001CD6  360E               	rlcf	__div_to_l_@quot+3,f,c
  5875  001CD8  5004               	movf	__div_to_l_@f2,w,c
  5876  001CDA  5C01               	subwf	__div_to_l_@f1,w,c
  5877  001CDC  5005               	movf	__div_to_l_@f2+1,w,c
  5878  001CDE  5802               	subwfb	__div_to_l_@f1+1,w,c
  5879  001CE0  5006               	movf	__div_to_l_@f2+2,w,c
  5880  001CE2  5803               	subwfb	__div_to_l_@f1+2,w,c
  5881  001CE4  5007               	movf	__div_to_l_@f2+3,w,c
  5882  001CE6  5804               	subwfb	__div_to_l_@f1+3,w,c
  5883  001CE8  A0D8               	btfss	status,0,c
  5884  001CEA  D009               	goto	l4595
  5885  001CEC  5004               	movf	__div_to_l_@f2,w,c
  5886  001CEE  5E01               	subwf	__div_to_l_@f1,f,c
  5887  001CF0  5005               	movf	__div_to_l_@f2+1,w,c
  5888  001CF2  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5889  001CF4  5006               	movf	__div_to_l_@f2+2,w,c
  5890  001CF6  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5891  001CF8  5007               	movf	__div_to_l_@f2+3,w,c
  5892  001CFA  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5893  001CFC  800B               	bsf	__div_to_l_@quot,0,c
  5894  001CFE                     l4595:
  5895  001CFE  90D8               	bcf	status,0,c
  5896  001D00  3601               	rlcf	__div_to_l_@f1,f,c
  5897  001D02  3602               	rlcf	__div_to_l_@f1+1,f,c
  5898  001D04  3603               	rlcf	__div_to_l_@f1+2,f,c
  5899  001D06  3604               	rlcf	__div_to_l_@f1+3,f,c
  5900  001D08  2E0F               	decfsz	__div_to_l_@cntr,f,c
  5901  001D0A  D7E1               	goto	l574
  5902  001D0C  AE10               	btfss	__div_to_l_@exp1,7,c
  5903  001D0E  D019               	goto	l4609
  5904  001D10  5010               	movf	__div_to_l_@exp1,w,c
  5905  001D12  0A80               	xorlw	128
  5906  001D14  6E07               	movwf	??__div_to_l_& (0+255),c
  5907  001D16  0EE1               	movlw	225
  5908  001D18  0A80               	xorlw	128
  5909  001D1A  5C07               	subwf	??__div_to_l_,w,c
  5910  001D1C  B0D8               	btfsc	status,0,c
  5911  001D1E  D009               	goto	l4605
  5912  001D20  0E00               	movlw	0
  5913  001D22  6E01               	movwf	?__div_to_l_,c
  5914  001D24  0E00               	movlw	0
  5915  001D26  6E02               	movwf	?__div_to_l_+1,c
  5916  001D28  0E00               	movlw	0
  5917  001D2A  6E03               	movwf	?__div_to_l_+2,c
  5918  001D2C  0E00               	movlw	0
  5919  001D2E  6E04               	movwf	?__div_to_l_+3,c
  5920  001D30  0012               	return	
  5921  001D32                     l4605:
  5922  001D32  90D8               	bcf	status,0,c
  5923  001D34  320E               	rrcf	__div_to_l_@quot+3,f,c
  5924  001D36  320D               	rrcf	__div_to_l_@quot+2,f,c
  5925  001D38  320C               	rrcf	__div_to_l_@quot+1,f,c
  5926  001D3A  320B               	rrcf	__div_to_l_@quot,f,c
  5927  001D3C  3E10               	incfsz	__div_to_l_@exp1,f,c
  5928  001D3E  D7F9               	goto	l4605
  5929  001D40  D014               	goto	l581
  5930  001D42                     l4609:
  5931  001D42  0E1F               	movlw	31
  5932  001D44  6410               	cpfsgt	__div_to_l_@exp1,c
  5933  001D46  D00F               	goto	l4617
  5934  001D48  0E00               	movlw	0
  5935  001D4A  6E01               	movwf	?__div_to_l_,c
  5936  001D4C  0E00               	movlw	0
  5937  001D4E  6E02               	movwf	?__div_to_l_+1,c
  5938  001D50  0E00               	movlw	0
  5939  001D52  6E03               	movwf	?__div_to_l_+2,c
  5940  001D54  0E00               	movlw	0
  5941  001D56  6E04               	movwf	?__div_to_l_+3,c
  5942  001D58  0012               	return	
  5943  001D5A                     l4615:
  5944  001D5A  90D8               	bcf	status,0,c
  5945  001D5C  360B               	rlcf	__div_to_l_@quot,f,c
  5946  001D5E  360C               	rlcf	__div_to_l_@quot+1,f,c
  5947  001D60  360D               	rlcf	__div_to_l_@quot+2,f,c
  5948  001D62  360E               	rlcf	__div_to_l_@quot+3,f,c
  5949  001D64  0610               	decf	__div_to_l_@exp1,f,c
  5950  001D66                     l4617:
  5951  001D66  6610               	tstfsz	__div_to_l_@exp1,c
  5952  001D68  D7F8               	goto	l4615
  5953  001D6A                     l581:
  5954  001D6A  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5955  001D6E  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5956  001D72  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5957  001D76  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5958  001D7A  0012               	return	
  5959  001D7C                     __end_of__div_to_l_:
  5960                           	opt stack 0
  5961                           tblptru	equ	0xFF8
  5962                           tblptrh	equ	0xFF7
  5963                           tblptrl	equ	0xFF6
  5964                           tablat	equ	0xFF5
  5965                           prodh	equ	0xFF4
  5966                           prodl	equ	0xFF3
  5967                           intcon2	equ	0xFF1
  5968                           wreg	equ	0xFE8
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function ___lltoft *****************
  5977 ;; Defined at:
  5978 ;;		line 35 in file "/opt/microchip/xc8/v1.31/sources/common/lltoft.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  c               4    8[COMRAM] unsigned long 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  exp             1   16[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  3    8[COMRAM] float 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5992 ;;      Params:         4       0       0       0       0       0       0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5994 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5995 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5996 ;;Total ram usage:        9 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    1
  5999 ;; This function calls:
  6000 ;;		___ftpack
  6001 ;; This function is called by:
  6002 ;;		_sprintf
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text25
  6007  002A1A                     __ptext25:
  6008                           	opt stack 0
  6009  002A1A                     ___lltoft:
  6010                           	opt stack 26
  6011                           
  6012                           ;incstack = 0
  6013  002A1A  6E0D               	movwf	??___lltoft& (0+255),c
  6014  002A1C  0E8E               	movlw	142
  6015  002A1E  6E11               	movwf	___lltoft@exp,c
  6016  002A20  500D               	movf	??___lltoft& (0+255),w,c
  6017  002A22  D006               	goto	l4753
  6018  002A24                     l4751:
  6019  002A24  90D8               	bcf	status,0,c
  6020  002A26  320C               	rrcf	___lltoft@c+3,f,c
  6021  002A28  320B               	rrcf	___lltoft@c+2,f,c
  6022  002A2A  320A               	rrcf	___lltoft@c+1,f,c
  6023  002A2C  3209               	rrcf	___lltoft@c,f,c
  6024  002A2E  2A11               	incf	___lltoft@exp,f,c
  6025  002A30                     l4753:
  6026  002A30  0E00               	movlw	0
  6027  002A32  1409               	andwf	___lltoft@c,w,c
  6028  002A34  6E0D               	movwf	??___lltoft& (0+255),c
  6029  002A36  0E00               	movlw	0
  6030  002A38  140A               	andwf	___lltoft@c+1,w,c
  6031  002A3A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6032  002A3C  0E00               	movlw	0
  6033  002A3E  140B               	andwf	___lltoft@c+2,w,c
  6034  002A40  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6035  002A42  0EFF               	movlw	255
  6036  002A44  140C               	andwf	___lltoft@c+3,w,c
  6037  002A46  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6038  002A48  5010               	movf	??___lltoft+3,w,c
  6039  002A4A  100D               	iorwf	??___lltoft,w,c
  6040  002A4C  100E               	iorwf	??___lltoft+1,w,c
  6041  002A4E  100F               	iorwf	??___lltoft+2,w,c
  6042  002A50  A4D8               	btfss	status,2,c
  6043  002A52  D7E8               	goto	l4751
  6044  002A54  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6045  002A58  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6046  002A5C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6047  002A60  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6048  002A64  6E0D               	movwf	??___lltoft& (0+255),c
  6049  002A66  0E00               	movlw	0
  6050  002A68  6E05               	movwf	___ftpack@sign,c
  6051  002A6A  500D               	movf	??___lltoft& (0+255),w,c
  6052  002A6C  EC61  F013         	call	___ftpack	;wreg free
  6053  002A70  C001  F009         	movff	?___ftpack,?___lltoft
  6054  002A74  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6055  002A78  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6056  002A7C  0012               	return	
  6057  002A7E                     __end_of___lltoft:
  6058                           	opt stack 0
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon2	equ	0xFF1
  6066                           wreg	equ	0xFE8
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function ___llmod *****************
  6075 ;; Defined at:
  6076 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/llmod.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  dividend        4    0[COMRAM] unsigned long 
  6079 ;;  divisor         4    4[COMRAM] unsigned long 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;  counter         1    9[COMRAM] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  4    0[COMRAM] unsigned long 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6091 ;;      Params:         8       0       0       0       0       0       0       0       0
  6092 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6093 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6094 ;;      Totals:        10       0       0       0       0       0       0       0       0
  6095 ;;Total ram usage:       10 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_sprintf
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text26
  6105  0029B0                     __ptext26:
  6106                           	opt stack 0
  6107  0029B0                     ___llmod:
  6108                           	opt stack 27
  6109                           
  6110                           ;incstack = 0
  6111  0029B0  5008               	movf	___llmod@divisor+3,w,c
  6112  0029B2  1005               	iorwf	___llmod@divisor,w,c
  6113  0029B4  1006               	iorwf	___llmod@divisor+1,w,c
  6114  0029B6  1007               	iorwf	___llmod@divisor+2,w,c
  6115  0029B8  B4D8               	btfsc	status,2,c
  6116  0029BA  D026               	goto	l788
  6117  0029BC  6E09               	movwf	??___llmod& (0+255),c
  6118  0029BE  0E01               	movlw	1
  6119  0029C0  6E0A               	movwf	___llmod@counter,c
  6120  0029C2  5009               	movf	??___llmod& (0+255),w,c
  6121  0029C4  D006               	goto	l4739
  6122  0029C6                     l4737:
  6123  0029C6  90D8               	bcf	status,0,c
  6124  0029C8  3605               	rlcf	___llmod@divisor,f,c
  6125  0029CA  3606               	rlcf	___llmod@divisor+1,f,c
  6126  0029CC  3607               	rlcf	___llmod@divisor+2,f,c
  6127  0029CE  3608               	rlcf	___llmod@divisor+3,f,c
  6128  0029D0  2A0A               	incf	___llmod@counter,f,c
  6129  0029D2                     l4739:
  6130  0029D2  AE08               	btfss	___llmod@divisor+3,7,c
  6131  0029D4  D7F8               	goto	l4737
  6132  0029D6                     l4741:
  6133  0029D6  5005               	movf	___llmod@divisor,w,c
  6134  0029D8  5C01               	subwf	___llmod@dividend,w,c
  6135  0029DA  5006               	movf	___llmod@divisor+1,w,c
  6136  0029DC  5802               	subwfb	___llmod@dividend+1,w,c
  6137  0029DE  5007               	movf	___llmod@divisor+2,w,c
  6138  0029E0  5803               	subwfb	___llmod@dividend+2,w,c
  6139  0029E2  5008               	movf	___llmod@divisor+3,w,c
  6140  0029E4  5804               	subwfb	___llmod@dividend+3,w,c
  6141  0029E6  A0D8               	btfss	status,0,c
  6142  0029E8  D008               	goto	l4745
  6143  0029EA  5005               	movf	___llmod@divisor,w,c
  6144  0029EC  5E01               	subwf	___llmod@dividend,f,c
  6145  0029EE  5006               	movf	___llmod@divisor+1,w,c
  6146  0029F0  5A02               	subwfb	___llmod@dividend+1,f,c
  6147  0029F2  5007               	movf	___llmod@divisor+2,w,c
  6148  0029F4  5A03               	subwfb	___llmod@dividend+2,f,c
  6149  0029F6  5008               	movf	___llmod@divisor+3,w,c
  6150  0029F8  5A04               	subwfb	___llmod@dividend+3,f,c
  6151  0029FA                     l4745:
  6152  0029FA  90D8               	bcf	status,0,c
  6153  0029FC  3208               	rrcf	___llmod@divisor+3,f,c
  6154  0029FE  3207               	rrcf	___llmod@divisor+2,f,c
  6155  002A00  3206               	rrcf	___llmod@divisor+1,f,c
  6156  002A02  3205               	rrcf	___llmod@divisor,f,c
  6157  002A04  2E0A               	decfsz	___llmod@counter,f,c
  6158  002A06  D7E7               	goto	l4741
  6159  002A08                     l788:
  6160  002A08  C001  F001         	movff	___llmod@dividend,?___llmod
  6161  002A0C  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  6162  002A10  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  6163  002A14  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  6164  002A18  0012               	return	
  6165  002A1A                     __end_of___llmod:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon2	equ	0xFF1
  6174                           wreg	equ	0xFE8
  6175                           indf2	equ	0xFDF
  6176                           postinc2	equ	0xFDE
  6177                           postdec2	equ	0xFDD
  6178                           fsr2h	equ	0xFDA
  6179                           fsr2l	equ	0xFD9
  6180                           status	equ	0xFD8
  6181                           
  6182 ;; *************** function ___lldiv *****************
  6183 ;; Defined at:
  6184 ;;		line 8 in file "/opt/microchip/xc8/v1.31/sources/common/lldiv.c"
  6185 ;; Parameters:    Size  Location     Type
  6186 ;;  dividend        4    0[COMRAM] unsigned long 
  6187 ;;  divisor         4    4[COMRAM] unsigned long 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  quotient        4    9[COMRAM] unsigned long 
  6190 ;;  counter         1   13[COMRAM] unsigned char 
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  4    0[COMRAM] unsigned long 
  6193 ;; Registers used:
  6194 ;;		wreg, status,2, status,0
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6200 ;;      Params:         8       0       0       0       0       0       0       0       0
  6201 ;;      Locals:         5       0       0       0       0       0       0       0       0
  6202 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6203 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6204 ;;Total ram usage:       14 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_sprintf
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text27
  6214  00292A                     __ptext27:
  6215                           	opt stack 0
  6216  00292A                     ___lldiv:
  6217                           	opt stack 27
  6218                           
  6219                           ;incstack = 0
  6220  00292A  0E00               	movlw	0
  6221  00292C  6E0A               	movwf	___lldiv@quotient,c
  6222  00292E  0E00               	movlw	0
  6223  002930  6E0B               	movwf	___lldiv@quotient+1,c
  6224  002932  0E00               	movlw	0
  6225  002934  6E0C               	movwf	___lldiv@quotient+2,c
  6226  002936  0E00               	movlw	0
  6227  002938  6E0D               	movwf	___lldiv@quotient+3,c
  6228  00293A  5008               	movf	___lldiv@divisor+3,w,c
  6229  00293C  1005               	iorwf	___lldiv@divisor,w,c
  6230  00293E  1006               	iorwf	___lldiv@divisor+1,w,c
  6231  002940  1007               	iorwf	___lldiv@divisor+2,w,c
  6232  002942  B4D8               	btfsc	status,2,c
  6233  002944  D02C               	goto	l778
  6234  002946  6E09               	movwf	??___lldiv& (0+255),c
  6235  002948  0E01               	movlw	1
  6236  00294A  6E0E               	movwf	___lldiv@counter,c
  6237  00294C  5009               	movf	??___lldiv& (0+255),w,c
  6238  00294E  D006               	goto	l4719
  6239  002950                     l4717:
  6240  002950  90D8               	bcf	status,0,c
  6241  002952  3605               	rlcf	___lldiv@divisor,f,c
  6242  002954  3606               	rlcf	___lldiv@divisor+1,f,c
  6243  002956  3607               	rlcf	___lldiv@divisor+2,f,c
  6244  002958  3608               	rlcf	___lldiv@divisor+3,f,c
  6245  00295A  2A0E               	incf	___lldiv@counter,f,c
  6246  00295C                     l4719:
  6247  00295C  AE08               	btfss	___lldiv@divisor+3,7,c
  6248  00295E  D7F8               	goto	l4717
  6249  002960                     l4721:
  6250  002960  90D8               	bcf	status,0,c
  6251  002962  360A               	rlcf	___lldiv@quotient,f,c
  6252  002964  360B               	rlcf	___lldiv@quotient+1,f,c
  6253  002966  360C               	rlcf	___lldiv@quotient+2,f,c
  6254  002968  360D               	rlcf	___lldiv@quotient+3,f,c
  6255  00296A  5005               	movf	___lldiv@divisor,w,c
  6256  00296C  5C01               	subwf	___lldiv@dividend,w,c
  6257  00296E  5006               	movf	___lldiv@divisor+1,w,c
  6258  002970  5802               	subwfb	___lldiv@dividend+1,w,c
  6259  002972  5007               	movf	___lldiv@divisor+2,w,c
  6260  002974  5803               	subwfb	___lldiv@dividend+2,w,c
  6261  002976  5008               	movf	___lldiv@divisor+3,w,c
  6262  002978  5804               	subwfb	___lldiv@dividend+3,w,c
  6263  00297A  A0D8               	btfss	status,0,c
  6264  00297C  D009               	goto	l4729
  6265  00297E  5005               	movf	___lldiv@divisor,w,c
  6266  002980  5E01               	subwf	___lldiv@dividend,f,c
  6267  002982  5006               	movf	___lldiv@divisor+1,w,c
  6268  002984  5A02               	subwfb	___lldiv@dividend+1,f,c
  6269  002986  5007               	movf	___lldiv@divisor+2,w,c
  6270  002988  5A03               	subwfb	___lldiv@dividend+2,f,c
  6271  00298A  5008               	movf	___lldiv@divisor+3,w,c
  6272  00298C  5A04               	subwfb	___lldiv@dividend+3,f,c
  6273  00298E  800A               	bsf	___lldiv@quotient,0,c
  6274  002990                     l4729:
  6275  002990  90D8               	bcf	status,0,c
  6276  002992  3208               	rrcf	___lldiv@divisor+3,f,c
  6277  002994  3207               	rrcf	___lldiv@divisor+2,f,c
  6278  002996  3206               	rrcf	___lldiv@divisor+1,f,c
  6279  002998  3205               	rrcf	___lldiv@divisor,f,c
  6280  00299A  2E0E               	decfsz	___lldiv@counter,f,c
  6281  00299C  D7E1               	goto	l4721
  6282  00299E                     l778:
  6283  00299E  C00A  F001         	movff	___lldiv@quotient,?___lldiv
  6284  0029A2  C00B  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6285  0029A6  C00C  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6286  0029AA  C00D  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6287  0029AE  0012               	return	
  6288  0029B0                     __end_of___lldiv:
  6289                           	opt stack 0
  6290                           tblptru	equ	0xFF8
  6291                           tblptrh	equ	0xFF7
  6292                           tblptrl	equ	0xFF6
  6293                           tablat	equ	0xFF5
  6294                           prodh	equ	0xFF4
  6295                           prodl	equ	0xFF3
  6296                           intcon2	equ	0xFF1
  6297                           wreg	equ	0xFE8
  6298                           indf2	equ	0xFDF
  6299                           postinc2	equ	0xFDE
  6300                           postdec2	equ	0xFDD
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           
  6305 ;; *************** function ___fttol *****************
  6306 ;; Defined at:
  6307 ;;		line 44 in file "/opt/microchip/xc8/v1.31/sources/common/fttol.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;  f1              3   79[COMRAM] float 
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;  lval            4   89[COMRAM] unsigned long 
  6312 ;;  exp1            1   93[COMRAM] unsigned char 
  6313 ;;  sign1           1   88[COMRAM] unsigned char 
  6314 ;; Return value:  Size  Location     Type
  6315 ;;                  4   79[COMRAM] long 
  6316 ;; Registers used:
  6317 ;;		wreg, status,2, status,0
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6323 ;;      Params:         4       0       0       0       0       0       0       0       0
  6324 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6325 ;;      Temps:          5       0       0       0       0       0       0       0       0
  6326 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6327 ;;Total ram usage:       15 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; This function calls:
  6330 ;;		Nothing
  6331 ;; This function is called by:
  6332 ;;		_set_fan_speed
  6333 ;;		_sprintf
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text28
  6338  0021EA                     __ptext28:
  6339                           	opt stack 0
  6340  0021EA                     ___fttol:
  6341                           	opt stack 28
  6342                           
  6343                           ;incstack = 0
  6344  0021EA  C052  F054         	movff	___fttol@f1+2,??___fttol
  6345  0021EE  6A55               	clrf	(??___fttol+1)& (0+255),c
  6346  0021F0  6A56               	clrf	(??___fttol+2)& (0+255),c
  6347  0021F2  3451               	rlcf	___fttol@f1+1,w,c
  6348  0021F4  3654               	rlcf	??___fttol& (0+255),f,c
  6349  0021F6  E301               	bnc	u2311
  6350  0021F8  8055               	bsf	(??___fttol+1)& (0+255),0,c
  6351  0021FA                     u2311:
  6352  0021FA  5054               	movf	??___fttol,w,c
  6353  0021FC  6E5E               	movwf	___fttol@exp1,c
  6354  0021FE  665E               	tstfsz	___fttol@exp1& (0+255),c
  6355  002200  D009               	goto	l4671
  6356  002202  0E00               	movlw	0
  6357  002204  6E50               	movwf	?___fttol,c
  6358  002206  0E00               	movlw	0
  6359  002208  6E51               	movwf	?___fttol+1,c
  6360  00220A  0E00               	movlw	0
  6361  00220C  6E52               	movwf	?___fttol+2,c
  6362  00220E  0E00               	movlw	0
  6363  002210  6E53               	movwf	?___fttol+3,c
  6364  002212  0012               	return	
  6365  002214                     l4671:
  6366  002214  0E17               	movlw	23
  6367  002216  6E54               	movwf	??___fttol& (0+255),c
  6368  002218  C050  F055         	movff	___fttol@f1,??___fttol+1
  6369  00221C  C051  F056         	movff	___fttol@f1+1,??___fttol+2
  6370  002220  C052  F057         	movff	___fttol@f1+2,??___fttol+3
  6371  002224  2854               	incf	??___fttol,w,c
  6372  002226  6E58               	movwf	(??___fttol+4)& (0+255),c
  6373  002228  D004               	goto	u2330
  6374  00222A                     u2335:
  6375  00222A  90D8               	bcf	status,0,c
  6376  00222C  3257               	rrcf	??___fttol+3,f,c
  6377  00222E  3256               	rrcf	??___fttol+2,f,c
  6378  002230  3255               	rrcf	??___fttol+1,f,c
  6379  002232                     u2330:
  6380  002232  2E58               	decfsz	(??___fttol+4)& (0+255),f,c
  6381  002234  D7FA               	goto	u2335
  6382  002236  5055               	movf	??___fttol+1,w,c
  6383  002238  6E59               	movwf	___fttol@sign1,c
  6384  00223A  8E51               	bsf	___fttol@f1+1,7,c
  6385  00223C  0EFF               	movlw	255
  6386  00223E  1650               	andwf	___fttol@f1,f,c
  6387  002240  0EFF               	movlw	255
  6388  002242  1651               	andwf	___fttol@f1+1,f,c
  6389  002244  0E00               	movlw	0
  6390  002246  1652               	andwf	___fttol@f1+2,f,c
  6391  002248  5050               	movf	___fttol@f1,w,c
  6392  00224A  6E5A               	movwf	___fttol@lval,c
  6393  00224C  5051               	movf	___fttol@f1+1,w,c
  6394  00224E  6E5B               	movwf	___fttol@lval+1,c
  6395  002250  5052               	movf	___fttol@f1+2,w,c
  6396  002252  6E5C               	movwf	___fttol@lval+2,c
  6397  002254  6A5D               	clrf	___fttol@lval+3,c
  6398  002256  0E8E               	movlw	142
  6399  002258  5E5E               	subwf	___fttol@exp1,f,c
  6400  00225A  AE5E               	btfss	___fttol@exp1,7,c
  6401  00225C  D019               	goto	l4693
  6402  00225E  505E               	movf	___fttol@exp1,w,c
  6403  002260  0A80               	xorlw	128
  6404  002262  6E54               	movwf	??___fttol& (0+255),c
  6405  002264  0EF1               	movlw	241
  6406  002266  0A80               	xorlw	128
  6407  002268  5C54               	subwf	??___fttol,w,c
  6408  00226A  B0D8               	btfsc	status,0,c
  6409  00226C  D009               	goto	l4689
  6410  00226E  0E00               	movlw	0
  6411  002270  6E50               	movwf	?___fttol,c
  6412  002272  0E00               	movlw	0
  6413  002274  6E51               	movwf	?___fttol+1,c
  6414  002276  0E00               	movlw	0
  6415  002278  6E52               	movwf	?___fttol+2,c
  6416  00227A  0E00               	movlw	0
  6417  00227C  6E53               	movwf	?___fttol+3,c
  6418  00227E  0012               	return	
  6419  002280                     l4689:
  6420  002280  90D8               	bcf	status,0,c
  6421  002282  325D               	rrcf	___fttol@lval+3,f,c
  6422  002284  325C               	rrcf	___fttol@lval+2,f,c
  6423  002286  325B               	rrcf	___fttol@lval+1,f,c
  6424  002288  325A               	rrcf	___fttol@lval,f,c
  6425  00228A  3E5E               	incfsz	___fttol@exp1,f,c
  6426  00228C  D7F9               	goto	l4689
  6427  00228E  D014               	goto	l4703
  6428  002290                     l4693:
  6429  002290  0E17               	movlw	23
  6430  002292  645E               	cpfsgt	___fttol@exp1,c
  6431  002294  D00F               	goto	l4701
  6432  002296  0E00               	movlw	0
  6433  002298  6E50               	movwf	?___fttol,c
  6434  00229A  0E00               	movlw	0
  6435  00229C  6E51               	movwf	?___fttol+1,c
  6436  00229E  0E00               	movlw	0
  6437  0022A0  6E52               	movwf	?___fttol+2,c
  6438  0022A2  0E00               	movlw	0
  6439  0022A4  6E53               	movwf	?___fttol+3,c
  6440  0022A6  0012               	return	
  6441  0022A8                     l4699:
  6442  0022A8  90D8               	bcf	status,0,c
  6443  0022AA  365A               	rlcf	___fttol@lval,f,c
  6444  0022AC  365B               	rlcf	___fttol@lval+1,f,c
  6445  0022AE  365C               	rlcf	___fttol@lval+2,f,c
  6446  0022B0  365D               	rlcf	___fttol@lval+3,f,c
  6447  0022B2  065E               	decf	___fttol@exp1,f,c
  6448  0022B4                     l4701:
  6449  0022B4  665E               	tstfsz	___fttol@exp1,c
  6450  0022B6  D7F8               	goto	l4699
  6451  0022B8                     l4703:
  6452  0022B8  5059               	movf	___fttol@sign1,w,c
  6453  0022BA  B4D8               	btfsc	status,2,c
  6454  0022BC  D008               	goto	l4707
  6455  0022BE  1E5D               	comf	___fttol@lval+3,f,c
  6456  0022C0  1E5C               	comf	___fttol@lval+2,f,c
  6457  0022C2  1E5B               	comf	___fttol@lval+1,f,c
  6458  0022C4  6C5A               	negf	___fttol@lval,c
  6459  0022C6  0E00               	movlw	0
  6460  0022C8  225B               	addwfc	___fttol@lval+1,f,c
  6461  0022CA  225C               	addwfc	___fttol@lval+2,f,c
  6462  0022CC  225D               	addwfc	___fttol@lval+3,f,c
  6463  0022CE                     l4707:
  6464  0022CE  C05A  F050         	movff	___fttol@lval,?___fttol
  6465  0022D2  C05B  F051         	movff	___fttol@lval+1,?___fttol+1
  6466  0022D6  C05C  F052         	movff	___fttol@lval+2,?___fttol+2
  6467  0022DA  C05D  F053         	movff	___fttol@lval+3,?___fttol+3
  6468  0022DE  0012               	return	
  6469  0022E0                     __end_of___fttol:
  6470                           	opt stack 0
  6471                           tblptru	equ	0xFF8
  6472                           tblptrh	equ	0xFF7
  6473                           tblptrl	equ	0xFF6
  6474                           tablat	equ	0xFF5
  6475                           prodh	equ	0xFF4
  6476                           prodl	equ	0xFF3
  6477                           intcon2	equ	0xFF1
  6478                           wreg	equ	0xFE8
  6479                           indf2	equ	0xFDF
  6480                           postinc2	equ	0xFDE
  6481                           postdec2	equ	0xFDD
  6482                           fsr2h	equ	0xFDA
  6483                           fsr2l	equ	0xFD9
  6484                           status	equ	0xFD8
  6485                           
  6486 ;; *************** function ___ftneg *****************
  6487 ;; Defined at:
  6488 ;;		line 15 in file "/opt/microchip/xc8/v1.31/sources/common/ftneg.c"
  6489 ;; Parameters:    Size  Location     Type
  6490 ;;  f1              3   27[COMRAM] float 
  6491 ;; Auto vars:     Size  Location     Type
  6492 ;;		None
  6493 ;; Return value:  Size  Location     Type
  6494 ;;                  3   27[COMRAM] float 
  6495 ;; Registers used:
  6496 ;;		wreg, status,2, status,0
  6497 ;; Tracked objects:
  6498 ;;		On entry : 0/0
  6499 ;;		On exit  : 0/0
  6500 ;;		Unchanged: 0/0
  6501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6502 ;;      Params:         3       0       0       0       0       0       0       0       0
  6503 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6505 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6506 ;;Total ram usage:        3 bytes
  6507 ;; Hardware stack levels used:    1
  6508 ;; This function calls:
  6509 ;;		Nothing
  6510 ;; This function is called by:
  6511 ;;		_get_temperature
  6512 ;;		_sprintf
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text29
  6517  002CF4                     __ptext29:
  6518                           	opt stack 0
  6519  002CF4                     ___ftneg:
  6520                           	opt stack 28
  6521                           
  6522                           ;incstack = 0
  6523  002CF4  0E7F               	movlw	127
  6524  002CF6  141E               	andwf	___ftneg@f1+2,w,c
  6525  002CF8  101D               	iorwf	___ftneg@f1+1,w,c
  6526  002CFA  101C               	iorwf	___ftneg@f1,w,c
  6527  002CFC  B4D8               	btfsc	status,2,c
  6528  002CFE  D006               	goto	l724
  6529  002D00  0E00               	movlw	0
  6530  002D02  1A1C               	xorwf	___ftneg@f1,f,c
  6531  002D04  0E00               	movlw	0
  6532  002D06  1A1D               	xorwf	___ftneg@f1+1,f,c
  6533  002D08  0E80               	movlw	128
  6534  002D0A  1A1E               	xorwf	___ftneg@f1+2,f,c
  6535  002D0C                     l724:
  6536  002D0C  C01C  F01C         	movff	___ftneg@f1,?___ftneg
  6537  002D10  C01D  F01D         	movff	___ftneg@f1+1,?___ftneg+1
  6538  002D14  C01E  F01E         	movff	___ftneg@f1+2,?___ftneg+2
  6539  002D18  0012               	return	
  6540  002D1A                     __end_of___ftneg:
  6541                           	opt stack 0
  6542                           tblptru	equ	0xFF8
  6543                           tblptrh	equ	0xFF7
  6544                           tblptrl	equ	0xFF6
  6545                           tablat	equ	0xFF5
  6546                           prodh	equ	0xFF4
  6547                           prodl	equ	0xFF3
  6548                           intcon2	equ	0xFF1
  6549                           wreg	equ	0xFE8
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function ___ftge *****************
  6558 ;; Defined at:
  6559 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/common/ftge.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  ff1             3    0[COMRAM] float 
  6562 ;;  ff2             3    3[COMRAM] float 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;		None
  6565 ;; Return value:  Size  Location     Type
  6566 ;;		None               void
  6567 ;; Registers used:
  6568 ;;		wreg, status,2, status,0
  6569 ;; Tracked objects:
  6570 ;;		On entry : 0/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6574 ;;      Params:         6       0       0       0       0       0       0       0       0
  6575 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6576 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6577 ;;      Totals:         9       0       0       0       0       0       0       0       0
  6578 ;;Total ram usage:        9 bytes
  6579 ;; Hardware stack levels used:    1
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_set_fan_speed
  6584 ;;		_MAX_7221_WRITE_FLOAT
  6585 ;;		_sprintf
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text30
  6590  00289A                     __ptext30:
  6591                           	opt stack 0
  6592  00289A                     ___ftge:
  6593                           	opt stack 28
  6594                           
  6595                           ;incstack = 0
  6596  00289A  AE03               	btfss	___ftge@ff1+2,7,c
  6597  00289C  D016               	goto	l4647
  6598  00289E  C001  F007         	movff	___ftge@ff1,??___ftge
  6599  0028A2  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6600  0028A6  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6601  0028AA  1E07               	comf	??___ftge,f,c
  6602  0028AC  1E08               	comf	??___ftge+1,f,c
  6603  0028AE  1E09               	comf	??___ftge+2,f,c
  6604  0028B0  2A07               	incf	??___ftge,f,c
  6605  0028B2  0E00               	movlw	0
  6606  0028B4  2208               	addwfc	??___ftge+1,f,c
  6607  0028B6  2209               	addwfc	??___ftge+2,f,c
  6608  0028B8  0E00               	movlw	0
  6609  0028BA  2407               	addwf	??___ftge,w,c
  6610  0028BC  6E01               	movwf	___ftge@ff1,c
  6611  0028BE  0E00               	movlw	0
  6612  0028C0  2008               	addwfc	??___ftge+1,w,c
  6613  0028C2  6E02               	movwf	___ftge@ff1+1,c
  6614  0028C4  0E80               	movlw	128
  6615  0028C6  2009               	addwfc	??___ftge+2,w,c
  6616  0028C8  6E03               	movwf	___ftge@ff1+2,c
  6617  0028CA                     l4647:
  6618  0028CA  AE06               	btfss	___ftge@ff2+2,7,c
  6619  0028CC  D016               	goto	l4651
  6620  0028CE  C004  F007         	movff	___ftge@ff2,??___ftge
  6621  0028D2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6622  0028D6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6623  0028DA  1E07               	comf	??___ftge,f,c
  6624  0028DC  1E08               	comf	??___ftge+1,f,c
  6625  0028DE  1E09               	comf	??___ftge+2,f,c
  6626  0028E0  2A07               	incf	??___ftge,f,c
  6627  0028E2  0E00               	movlw	0
  6628  0028E4  2208               	addwfc	??___ftge+1,f,c
  6629  0028E6  2209               	addwfc	??___ftge+2,f,c
  6630  0028E8  0E00               	movlw	0
  6631  0028EA  2407               	addwf	??___ftge,w,c
  6632  0028EC  6E04               	movwf	___ftge@ff2,c
  6633  0028EE  0E00               	movlw	0
  6634  0028F0  2008               	addwfc	??___ftge+1,w,c
  6635  0028F2  6E05               	movwf	___ftge@ff2+1,c
  6636  0028F4  0E80               	movlw	128
  6637  0028F6  2009               	addwfc	??___ftge+2,w,c
  6638  0028F8  6E06               	movwf	___ftge@ff2+2,c
  6639  0028FA                     l4651:
  6640  0028FA  0E00               	movlw	0
  6641  0028FC  1A01               	xorwf	___ftge@ff1,f,c
  6642  0028FE  0E00               	movlw	0
  6643  002900  1A02               	xorwf	___ftge@ff1+1,f,c
  6644  002902  0E80               	movlw	128
  6645  002904  1A03               	xorwf	___ftge@ff1+2,f,c
  6646  002906  0E00               	movlw	0
  6647  002908  1A04               	xorwf	___ftge@ff2,f,c
  6648  00290A  0E00               	movlw	0
  6649  00290C  1A05               	xorwf	___ftge@ff2+1,f,c
  6650  00290E  0E80               	movlw	128
  6651  002910  1A06               	xorwf	___ftge@ff2+2,f,c
  6652  002912  5004               	movf	___ftge@ff2,w,c
  6653  002914  5C01               	subwf	___ftge@ff1,w,c
  6654  002916  5005               	movf	___ftge@ff2+1,w,c
  6655  002918  5802               	subwfb	___ftge@ff1+1,w,c
  6656  00291A  5006               	movf	___ftge@ff2+2,w,c
  6657  00291C  5803               	subwfb	___ftge@ff1+2,w,c
  6658  00291E  B0D8               	btfsc	status,0,c
  6659  002920  D002               	goto	l4657
  6660  002922  90D8               	bcf	status,0,c
  6661  002924  0012               	return	
  6662  002926                     l4657:
  6663  002926  80D8               	bsf	status,0,c
  6664  002928  0012               	return	
  6665  00292A                     __end_of___ftge:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon2	equ	0xFF1
  6674                           wreg	equ	0xFE8
  6675                           indf2	equ	0xFDF
  6676                           postinc2	equ	0xFDE
  6677                           postdec2	equ	0xFDD
  6678                           fsr2h	equ	0xFDA
  6679                           fsr2l	equ	0xFD9
  6680                           status	equ	0xFD8
  6681                           
  6682 ;; *************** function ___asftsub *****************
  6683 ;; Defined at:
  6684 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftsub.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  f1p             2   48[COMRAM] PTR float 
  6687 ;;		 -> sprintf@fval(3), 
  6688 ;;  f2              3   50[COMRAM] float 
  6689 ;; Auto vars:     Size  Location     Type
  6690 ;;		None
  6691 ;; Return value:  Size  Location     Type
  6692 ;;                  3   48[COMRAM] float 
  6693 ;; Registers used:
  6694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6695 ;; Tracked objects:
  6696 ;;		On entry : 0/0
  6697 ;;		On exit  : 0/0
  6698 ;;		Unchanged: 0/0
  6699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6700 ;;      Params:         5       0       0       0       0       0       0       0       0
  6701 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6703 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6704 ;;Total ram usage:        5 bytes
  6705 ;; Hardware stack levels used:    1
  6706 ;; Hardware stack levels required when called:    3
  6707 ;; This function calls:
  6708 ;;		___ftsub
  6709 ;; This function is called by:
  6710 ;;		_sprintf
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text31
  6715  002B20                     __ptext31:
  6716                           	opt stack 0
  6717  002B20                     ___asftsub:
  6718                           	opt stack 24
  6719                           
  6720                           ;	Return value of ___asftsub is never used
  6721                           
  6722                           ;incstack = 0
  6723  002B20  C031  FFD9         	movff	___asftsub@f1p,fsr2l
  6724  002B24  C032  FFDA         	movff	___asftsub@f1p+1,fsr2h
  6725  002B28  CFDE F02B          	movff	postinc2,___ftsub@f1
  6726  002B2C  CFDE F02C          	movff	postinc2,___ftsub@f1+1
  6727  002B30  CFDD F02D          	movff	postdec2,___ftsub@f1+2
  6728  002B34  C033  F02E         	movff	___asftsub@f2,___ftsub@f2
  6729  002B38  C034  F02F         	movff	___asftsub@f2+1,___ftsub@f2+1
  6730  002B3C  C035  F030         	movff	___asftsub@f2+2,___ftsub@f2+2
  6731  002B40  EC07  F016         	call	___ftsub	;wreg free
  6732  002B44  C031  FFD9         	movff	___asftsub@f1p,fsr2l
  6733  002B48  C032  FFDA         	movff	___asftsub@f1p+1,fsr2h
  6734  002B4C  C02B  FFDE         	movff	?___ftsub,postinc2
  6735  002B50  C02C  FFDE         	movff	?___ftsub+1,postinc2
  6736  002B54  C02D  FFDD         	movff	?___ftsub+2,postdec2
  6737  002B58  52DD               	movf	postdec2,f,c
  6738  002B5A  0012               	return	
  6739  002B5C                     __end_of___asftsub:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           intcon2	equ	0xFF1
  6748                           wreg	equ	0xFE8
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function ___ftsub *****************
  6757 ;; Defined at:
  6758 ;;		line 20 in file "/opt/microchip/xc8/v1.31/sources/common/ftsub.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  f1              3   42[COMRAM] float 
  6761 ;;  f2              3   45[COMRAM] float 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  3   42[COMRAM] float 
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6773 ;;      Params:         6       0       0       0       0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6776 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6777 ;;Total ram usage:        6 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    2
  6780 ;; This function calls:
  6781 ;;		___ftadd
  6782 ;; This function is called by:
  6783 ;;		___asftsub
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text32
  6788  002C0E                     __ptext32:
  6789                           	opt stack 0
  6790  002C0E                     ___ftsub:
  6791                           	opt stack 24
  6792                           
  6793                           ;incstack = 0
  6794  002C0E  0E00               	movlw	0
  6795  002C10  1A2E               	xorwf	___ftsub@f2,f,c
  6796  002C12  0E00               	movlw	0
  6797  002C14  1A2F               	xorwf	___ftsub@f2+1,f,c
  6798  002C16  0E80               	movlw	128
  6799  002C18  1A30               	xorwf	___ftsub@f2+2,f,c
  6800  002C1A  C02B  F01F         	movff	___ftsub@f1,___ftadd@f1
  6801  002C1E  C02C  F020         	movff	___ftsub@f1+1,___ftadd@f1+1
  6802  002C22  C02D  F021         	movff	___ftsub@f1+2,___ftadd@f1+2
  6803  002C26  C02E  F022         	movff	___ftsub@f2,___ftadd@f2
  6804  002C2A  C02F  F023         	movff	___ftsub@f2+1,___ftadd@f2+1
  6805  002C2E  C030  F024         	movff	___ftsub@f2+2,___ftadd@f2+2
  6806  002C32  EC2C  F00D         	call	___ftadd	;wreg free
  6807  002C36  C01F  F02B         	movff	?___ftadd,?___ftsub
  6808  002C3A  C020  F02C         	movff	?___ftadd+1,?___ftsub+1
  6809  002C3E  C021  F02D         	movff	?___ftadd+2,?___ftsub+2
  6810  002C42  0012               	return	
  6811  002C44                     __end_of___ftsub:
  6812                           	opt stack 0
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon2	equ	0xFF1
  6820                           wreg	equ	0xFE8
  6821                           indf2	equ	0xFDF
  6822                           postinc2	equ	0xFDE
  6823                           postdec2	equ	0xFDD
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function ___asftmul *****************
  6829 ;; Defined at:
  6830 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftmul.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  f1p             2   72[COMRAM] PTR float 
  6833 ;;		 -> sprintf@integ(3), 
  6834 ;;  f2              3   74[COMRAM] float 
  6835 ;; Auto vars:     Size  Location     Type
  6836 ;;		None
  6837 ;; Return value:  Size  Location     Type
  6838 ;;                  3   72[COMRAM] float 
  6839 ;; Registers used:
  6840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6841 ;; Tracked objects:
  6842 ;;		On entry : 0/0
  6843 ;;		On exit  : 0/0
  6844 ;;		Unchanged: 0/0
  6845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6846 ;;      Params:         5       0       0       0       0       0       0       0       0
  6847 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6849 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6850 ;;Total ram usage:        5 bytes
  6851 ;; Hardware stack levels used:    1
  6852 ;; Hardware stack levels required when called:    2
  6853 ;; This function calls:
  6854 ;;		___ftmul
  6855 ;; This function is called by:
  6856 ;;		_sprintf
  6857 ;; This function uses a non-reentrant model
  6858 ;;
  6859                           
  6860                           	psect	text33
  6861  002B5C                     __ptext33:
  6862                           	opt stack 0
  6863  002B5C                     ___asftmul:
  6864                           	opt stack 25
  6865                           
  6866                           ;	Return value of ___asftmul is never used
  6867                           
  6868                           ;incstack = 0
  6869  002B5C  C049  FFD9         	movff	___asftmul@f1p,fsr2l
  6870  002B60  C04A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  6871  002B64  CFDE F03A          	movff	postinc2,___ftmul@f1
  6872  002B68  CFDE F03B          	movff	postinc2,___ftmul@f1+1
  6873  002B6C  CFDD F03C          	movff	postdec2,___ftmul@f1+2
  6874  002B70  C04B  F03D         	movff	___asftmul@f2,___ftmul@f2
  6875  002B74  C04C  F03E         	movff	___asftmul@f2+1,___ftmul@f2+1
  6876  002B78  C04D  F03F         	movff	___asftmul@f2+2,___ftmul@f2+2
  6877  002B7C  EC79  F010         	call	___ftmul	;wreg free
  6878  002B80  C049  FFD9         	movff	___asftmul@f1p,fsr2l
  6879  002B84  C04A  FFDA         	movff	___asftmul@f1p+1,fsr2h
  6880  002B88  C03A  FFDE         	movff	?___ftmul,postinc2
  6881  002B8C  C03B  FFDE         	movff	?___ftmul+1,postinc2
  6882  002B90  C03C  FFDD         	movff	?___ftmul+2,postdec2
  6883  002B94  52DD               	movf	postdec2,f,c
  6884  002B96  0012               	return	
  6885  002B98                     __end_of___asftmul:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           tblptrh	equ	0xFF7
  6889                           tblptrl	equ	0xFF6
  6890                           tablat	equ	0xFF5
  6891                           prodh	equ	0xFF4
  6892                           prodl	equ	0xFF3
  6893                           intcon2	equ	0xFF1
  6894                           wreg	equ	0xFE8
  6895                           indf2	equ	0xFDF
  6896                           postinc2	equ	0xFDE
  6897                           postdec2	equ	0xFDD
  6898                           fsr2h	equ	0xFDA
  6899                           fsr2l	equ	0xFD9
  6900                           status	equ	0xFD8
  6901                           
  6902 ;; *************** function ___ftmul *****************
  6903 ;; Defined at:
  6904 ;;		line 51 in file "/opt/microchip/xc8/v1.31/sources/common/ftmul.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;  f1              3   57[COMRAM] float 
  6907 ;;  f2              3   60[COMRAM] float 
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;  f3_as_produc    3   67[COMRAM] unsigned um
  6910 ;;  sign            1   71[COMRAM] unsigned char 
  6911 ;;  cntr            1   70[COMRAM] unsigned char 
  6912 ;;  exp             1   66[COMRAM] unsigned char 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  3   57[COMRAM] float 
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6922 ;;      Params:         6       0       0       0       0       0       0       0       0
  6923 ;;      Locals:         6       0       0       0       0       0       0       0       0
  6924 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6925 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6926 ;;Total ram usage:       15 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:    1
  6929 ;; This function calls:
  6930 ;;		___ftpack
  6931 ;; This function is called by:
  6932 ;;		_set_fan_speed
  6933 ;;		_get_temperature
  6934 ;;		_fround
  6935 ;;		_scale
  6936 ;;		_sprintf
  6937 ;;		___asftmul
  6938 ;;		_log
  6939 ;;		_eval_poly
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text34
  6944  0020F2                     __ptext34:
  6945                           	opt stack 0
  6946  0020F2                     ___ftmul:
  6947                           	opt stack 27
  6948                           
  6949                           ;incstack = 0
  6950  0020F2  C03C  F040         	movff	___ftmul@f1+2,??___ftmul
  6951  0020F6  6A41               	clrf	(??___ftmul+1)& (0+255),c
  6952  0020F8  6A42               	clrf	(??___ftmul+2)& (0+255),c
  6953  0020FA  343B               	rlcf	___ftmul@f1+1,w,c
  6954  0020FC  3640               	rlcf	??___ftmul& (0+255),f,c
  6955  0020FE  E301               	bnc	u1801
  6956  002100  8041               	bsf	(??___ftmul+1)& (0+255),0,c
  6957  002102                     u1801:
  6958  002102  5040               	movf	??___ftmul,w,c
  6959  002104  6E43               	movwf	___ftmul@exp,c
  6960  002106  6643               	tstfsz	___ftmul@exp& (0+255),c
  6961  002108  D007               	goto	l4297
  6962  00210A  0E00               	movlw	0
  6963  00210C  6E3A               	movwf	?___ftmul,c
  6964  00210E  0E00               	movlw	0
  6965  002110  6E3B               	movwf	?___ftmul+1,c
  6966  002112  0E00               	movlw	0
  6967  002114  6E3C               	movwf	?___ftmul+2,c
  6968  002116  0012               	return	
  6969  002118                     l4297:
  6970  002118  C03F  F040         	movff	___ftmul@f2+2,??___ftmul
  6971  00211C  6A41               	clrf	(??___ftmul+1)& (0+255),c
  6972  00211E  6A42               	clrf	(??___ftmul+2)& (0+255),c
  6973  002120  343E               	rlcf	___ftmul@f2+1,w,c
  6974  002122  3640               	rlcf	??___ftmul& (0+255),f,c
  6975  002124  E301               	bnc	u1821
  6976  002126  8041               	bsf	(??___ftmul+1)& (0+255),0,c
  6977  002128                     u1821:
  6978  002128  5040               	movf	??___ftmul,w,c
  6979  00212A  6E48               	movwf	___ftmul@sign,c
  6980  00212C  6648               	tstfsz	___ftmul@sign& (0+255),c
  6981  00212E  D007               	goto	l4303
  6982  002130  0E00               	movlw	0
  6983  002132  6E3A               	movwf	?___ftmul,c
  6984  002134  0E00               	movlw	0
  6985  002136  6E3B               	movwf	?___ftmul+1,c
  6986  002138  0E00               	movlw	0
  6987  00213A  6E3C               	movwf	?___ftmul+2,c
  6988  00213C  0012               	return	
  6989  00213E                     l4303:
  6990  00213E  5048               	movf	___ftmul@sign,w,c
  6991  002140  0F7B               	addlw	123
  6992  002142  2643               	addwf	___ftmul@exp,f,c
  6993  002144  C03C  F048         	movff	___ftmul@f1+2,___ftmul@sign
  6994  002148  503F               	movf	___ftmul@f2+2,w,c
  6995  00214A  1A48               	xorwf	___ftmul@sign,f,c
  6996  00214C  0E80               	movlw	128
  6997  00214E  1648               	andwf	___ftmul@sign,f,c
  6998  002150  8E3B               	bsf	___ftmul@f1+1,7,c
  6999  002152  8E3E               	bsf	___ftmul@f2+1,7,c
  7000  002154  0EFF               	movlw	255
  7001  002156  163D               	andwf	___ftmul@f2,f,c
  7002  002158  0EFF               	movlw	255
  7003  00215A  163E               	andwf	___ftmul@f2+1,f,c
  7004  00215C  0E00               	movlw	0
  7005  00215E  163F               	andwf	___ftmul@f2+2,f,c
  7006  002160  0E00               	movlw	0
  7007  002162  6E44               	movwf	___ftmul@f3_as_product,c
  7008  002164  0E00               	movlw	0
  7009  002166  6E45               	movwf	___ftmul@f3_as_product+1,c
  7010  002168  0E00               	movlw	0
  7011  00216A  6E46               	movwf	___ftmul@f3_as_product+2,c
  7012  00216C  6E40               	movwf	??___ftmul& (0+255),c
  7013  00216E  0E07               	movlw	7
  7014  002170  6E47               	movwf	___ftmul@cntr,c
  7015  002172  5040               	movf	??___ftmul& (0+255),w,c
  7016  002174                     l4317:
  7017  002174  A03A               	btfss	___ftmul@f1,0,c
  7018  002176  D006               	goto	l4321
  7019  002178  503D               	movf	___ftmul@f2,w,c
  7020  00217A  2644               	addwf	___ftmul@f3_as_product,f,c
  7021  00217C  503E               	movf	___ftmul@f2+1,w,c
  7022  00217E  2245               	addwfc	___ftmul@f3_as_product+1,f,c
  7023  002180  503F               	movf	___ftmul@f2+2,w,c
  7024  002182  2246               	addwfc	___ftmul@f3_as_product+2,f,c
  7025  002184                     l4321:
  7026  002184  90D8               	bcf	status,0,c
  7027  002186  323C               	rrcf	___ftmul@f1+2,f,c
  7028  002188  323B               	rrcf	___ftmul@f1+1,f,c
  7029  00218A  323A               	rrcf	___ftmul@f1,f,c
  7030  00218C  90D8               	bcf	status,0,c
  7031  00218E  363D               	rlcf	___ftmul@f2,f,c
  7032  002190  363E               	rlcf	___ftmul@f2+1,f,c
  7033  002192  363F               	rlcf	___ftmul@f2+2,f,c
  7034  002194  2E47               	decfsz	___ftmul@cntr,f,c
  7035  002196  D7EE               	goto	l4317
  7036  002198  6E40               	movwf	??___ftmul& (0+255),c
  7037  00219A  0E09               	movlw	9
  7038  00219C  6E47               	movwf	___ftmul@cntr,c
  7039  00219E  5040               	movf	??___ftmul& (0+255),w,c
  7040  0021A0                     l4327:
  7041  0021A0  A03A               	btfss	___ftmul@f1,0,c
  7042  0021A2  D006               	goto	l4331
  7043  0021A4  503D               	movf	___ftmul@f2,w,c
  7044  0021A6  2644               	addwf	___ftmul@f3_as_product,f,c
  7045  0021A8  503E               	movf	___ftmul@f2+1,w,c
  7046  0021AA  2245               	addwfc	___ftmul@f3_as_product+1,f,c
  7047  0021AC  503F               	movf	___ftmul@f2+2,w,c
  7048  0021AE  2246               	addwfc	___ftmul@f3_as_product+2,f,c
  7049  0021B0                     l4331:
  7050  0021B0  90D8               	bcf	status,0,c
  7051  0021B2  323C               	rrcf	___ftmul@f1+2,f,c
  7052  0021B4  323B               	rrcf	___ftmul@f1+1,f,c
  7053  0021B6  323A               	rrcf	___ftmul@f1,f,c
  7054  0021B8  90D8               	bcf	status,0,c
  7055  0021BA  3246               	rrcf	___ftmul@f3_as_product+2,f,c
  7056  0021BC  3245               	rrcf	___ftmul@f3_as_product+1,f,c
  7057  0021BE  3244               	rrcf	___ftmul@f3_as_product,f,c
  7058  0021C0  2E47               	decfsz	___ftmul@cntr,f,c
  7059  0021C2  D7EE               	goto	l4327
  7060  0021C4  C044  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7061  0021C8  C045  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7062  0021CC  C046  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7063  0021D0  C043  F004         	movff	___ftmul@exp,___ftpack@exp
  7064  0021D4  C048  F005         	movff	___ftmul@sign,___ftpack@sign
  7065  0021D8  EC61  F013         	call	___ftpack	;wreg free
  7066  0021DC  C001  F03A         	movff	?___ftpack,?___ftmul
  7067  0021E0  C002  F03B         	movff	?___ftpack+1,?___ftmul+1
  7068  0021E4  C003  F03C         	movff	?___ftpack+2,?___ftmul+2
  7069  0021E8  0012               	return	
  7070  0021EA                     __end_of___ftmul:
  7071                           	opt stack 0
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           intcon2	equ	0xFF1
  7079                           wreg	equ	0xFE8
  7080                           indf2	equ	0xFDF
  7081                           postinc2	equ	0xFDE
  7082                           postdec2	equ	0xFDD
  7083                           fsr2h	equ	0xFDA
  7084                           fsr2l	equ	0xFD9
  7085                           status	equ	0xFD8
  7086                           
  7087 ;; *************** function ___asftadd *****************
  7088 ;; Defined at:
  7089 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/pic18/asftadd.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;  f1p             2   82[COMRAM] PTR float 
  7092 ;;		 -> sprintf@fval(3), 
  7093 ;;  f2              3   84[COMRAM] float 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  3   82[COMRAM] float 
  7098 ;; Registers used:
  7099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7105 ;;      Params:         5       0       0       0       0       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7107 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7108 ;;      Totals:         5       0       0       0       0       0       0       0       0
  7109 ;;Total ram usage:        5 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    2
  7112 ;; This function calls:
  7113 ;;		___ftadd
  7114 ;; This function is called by:
  7115 ;;		_sprintf
  7116 ;; This function uses a non-reentrant model
  7117 ;;
  7118                           
  7119                           	psect	text35
  7120  002B98                     __ptext35:
  7121                           	opt stack 0
  7122  002B98                     ___asftadd:
  7123                           	opt stack 25
  7124                           
  7125                           ;	Return value of ___asftadd is never used
  7126                           
  7127                           ;incstack = 0
  7128  002B98  C053  FFD9         	movff	___asftadd@f1p,fsr2l
  7129  002B9C  C054  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7130  002BA0  CFDE F01F          	movff	postinc2,___ftadd@f1
  7131  002BA4  CFDE F020          	movff	postinc2,___ftadd@f1+1
  7132  002BA8  CFDD F021          	movff	postdec2,___ftadd@f1+2
  7133  002BAC  C055  F022         	movff	___asftadd@f2,___ftadd@f2
  7134  002BB0  C056  F023         	movff	___asftadd@f2+1,___ftadd@f2+1
  7135  002BB4  C057  F024         	movff	___asftadd@f2+2,___ftadd@f2+2
  7136  002BB8  EC2C  F00D         	call	___ftadd	;wreg free
  7137  002BBC  C053  FFD9         	movff	___asftadd@f1p,fsr2l
  7138  002BC0  C054  FFDA         	movff	___asftadd@f1p+1,fsr2h
  7139  002BC4  C01F  FFDE         	movff	?___ftadd,postinc2
  7140  002BC8  C020  FFDE         	movff	?___ftadd+1,postinc2
  7141  002BCC  C021  FFDD         	movff	?___ftadd+2,postdec2
  7142  002BD0  52DD               	movf	postdec2,f,c
  7143  002BD2  0012               	return	
  7144  002BD4                     __end_of___asftadd:
  7145                           	opt stack 0
  7146                           tblptru	equ	0xFF8
  7147                           tblptrh	equ	0xFF7
  7148                           tblptrl	equ	0xFF6
  7149                           tablat	equ	0xFF5
  7150                           prodh	equ	0xFF4
  7151                           prodl	equ	0xFF3
  7152                           intcon2	equ	0xFF1
  7153                           wreg	equ	0xFE8
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function ___ftadd *****************
  7162 ;; Defined at:
  7163 ;;		line 86 in file "/opt/microchip/xc8/v1.31/sources/common/ftadd.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  f1              3   30[COMRAM] float 
  7166 ;;  f2              3   33[COMRAM] float 
  7167 ;; Auto vars:     Size  Location     Type
  7168 ;;  exp1            1   41[COMRAM] unsigned char 
  7169 ;;  exp2            1   40[COMRAM] unsigned char 
  7170 ;;  sign            1   39[COMRAM] unsigned char 
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  3   30[COMRAM] float 
  7173 ;; Registers used:
  7174 ;;		wreg, status,2, status,0, cstack
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7180 ;;      Params:         6       0       0       0       0       0       0       0       0
  7181 ;;      Locals:         3       0       0       0       0       0       0       0       0
  7182 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7183 ;;      Totals:        12       0       0       0       0       0       0       0       0
  7184 ;;Total ram usage:       12 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; Hardware stack levels required when called:    1
  7187 ;; This function calls:
  7188 ;;		___ftpack
  7189 ;; This function is called by:
  7190 ;;		_get_temperature
  7191 ;;		___asftadd
  7192 ;;		___ftsub
  7193 ;;		_log
  7194 ;;		_eval_poly
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           	psect	text36
  7199  001A58                     __ptext36:
  7200                           	opt stack 0
  7201  001A58                     ___ftadd:
  7202                           	opt stack 25
  7203                           
  7204                           ;incstack = 0
  7205  001A58  C021  F025         	movff	___ftadd@f1+2,??___ftadd
  7206  001A5C  6A26               	clrf	(??___ftadd+1)& (0+255),c
  7207  001A5E  6A27               	clrf	(??___ftadd+2)& (0+255),c
  7208  001A60  3420               	rlcf	___ftadd@f1+1,w,c
  7209  001A62  3625               	rlcf	??___ftadd& (0+255),f,c
  7210  001A64  E301               	bnc	u1591
  7211  001A66  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  7212  001A68                     u1591:
  7213  001A68  5025               	movf	??___ftadd,w,c
  7214  001A6A  6E2A               	movwf	___ftadd@exp1,c
  7215  001A6C  C024  F025         	movff	___ftadd@f2+2,??___ftadd
  7216  001A70  6A26               	clrf	(??___ftadd+1)& (0+255),c
  7217  001A72  6A27               	clrf	(??___ftadd+2)& (0+255),c
  7218  001A74  3423               	rlcf	___ftadd@f2+1,w,c
  7219  001A76  3625               	rlcf	??___ftadd& (0+255),f,c
  7220  001A78  E301               	bnc	u1601
  7221  001A7A  8026               	bsf	(??___ftadd+1)& (0+255),0,c
  7222  001A7C                     u1601:
  7223  001A7C  5025               	movf	??___ftadd,w,c
  7224  001A7E  6E29               	movwf	___ftadd@exp2,c
  7225  001A80  502A               	movf	___ftadd@exp1,w,c
  7226  001A82  B4D8               	btfsc	status,2,c
  7227  001A84  D00C               	goto	l650
  7228  001A86  5029               	movf	___ftadd@exp2,w,c
  7229  001A88  5C2A               	subwf	___ftadd@exp1,w,c
  7230  001A8A  B0D8               	btfsc	status,0,c
  7231  001A8C  D00F               	goto	l4229
  7232  001A8E  502A               	movf	___ftadd@exp1,w,c
  7233  001A90  0800               	sublw	0
  7234  001A92  2429               	addwf	___ftadd@exp2,w,c
  7235  001A94  6E25               	movwf	??___ftadd& (0+255),c
  7236  001A96  0E19               	movlw	25
  7237  001A98  5C25               	subwf	??___ftadd,w,c
  7238  001A9A  A0D8               	btfss	status,0,c
  7239  001A9C  D007               	goto	l4229
  7240  001A9E                     l650:
  7241  001A9E  C022  F01F         	movff	___ftadd@f2,?___ftadd
  7242  001AA2  C023  F020         	movff	___ftadd@f2+1,?___ftadd+1
  7243  001AA6  C024  F021         	movff	___ftadd@f2+2,?___ftadd+2
  7244  001AAA  0012               	return	
  7245  001AAC                     l4229:
  7246  001AAC  5029               	movf	___ftadd@exp2,w,c
  7247  001AAE  B4D8               	btfsc	status,2,c
  7248  001AB0  D00C               	goto	l654
  7249  001AB2  502A               	movf	___ftadd@exp1,w,c
  7250  001AB4  5C29               	subwf	___ftadd@exp2,w,c
  7251  001AB6  B0D8               	btfsc	status,0,c
  7252  001AB8  D00F               	goto	l4235
  7253  001ABA  5029               	movf	___ftadd@exp2,w,c
  7254  001ABC  0800               	sublw	0
  7255  001ABE  242A               	addwf	___ftadd@exp1,w,c
  7256  001AC0  6E25               	movwf	??___ftadd& (0+255),c
  7257  001AC2  0E19               	movlw	25
  7258  001AC4  5C25               	subwf	??___ftadd,w,c
  7259  001AC6  A0D8               	btfss	status,0,c
  7260  001AC8  D007               	goto	l4235
  7261  001ACA                     l654:
  7262  001ACA  C01F  F01F         	movff	___ftadd@f1,?___ftadd
  7263  001ACE  C020  F020         	movff	___ftadd@f1+1,?___ftadd+1
  7264  001AD2  C021  F021         	movff	___ftadd@f1+2,?___ftadd+2
  7265  001AD6  0012               	return	
  7266  001AD8                     l4235:
  7267  001AD8  6E25               	movwf	??___ftadd& (0+255),c
  7268  001ADA  0E06               	movlw	6
  7269  001ADC  6E28               	movwf	___ftadd@sign,c
  7270  001ADE  5025               	movf	??___ftadd& (0+255),w,c
  7271  001AE0  BE21               	btfsc	___ftadd@f1+2,7,c
  7272  001AE2  8E28               	bsf	___ftadd@sign,7,c
  7273  001AE4  BE24               	btfsc	___ftadd@f2+2,7,c
  7274  001AE6  8C28               	bsf	___ftadd@sign,6,c
  7275  001AE8  8E20               	bsf	___ftadd@f1+1,7,c
  7276  001AEA  0EFF               	movlw	255
  7277  001AEC  161F               	andwf	___ftadd@f1,f,c
  7278  001AEE  0EFF               	movlw	255
  7279  001AF0  1620               	andwf	___ftadd@f1+1,f,c
  7280  001AF2  0E00               	movlw	0
  7281  001AF4  1621               	andwf	___ftadd@f1+2,f,c
  7282  001AF6  8E23               	bsf	___ftadd@f2+1,7,c
  7283  001AF8  0EFF               	movlw	255
  7284  001AFA  1622               	andwf	___ftadd@f2,f,c
  7285  001AFC  0EFF               	movlw	255
  7286  001AFE  1623               	andwf	___ftadd@f2+1,f,c
  7287  001B00  0E00               	movlw	0
  7288  001B02  1624               	andwf	___ftadd@f2+2,f,c
  7289  001B04  5029               	movf	___ftadd@exp2,w,c
  7290  001B06  5C2A               	subwf	___ftadd@exp1,w,c
  7291  001B08  B0D8               	btfsc	status,0,c
  7292  001B0A  D01A               	goto	l4261
  7293  001B0C                     l4251:
  7294  001B0C  90D8               	bcf	status,0,c
  7295  001B0E  3622               	rlcf	___ftadd@f2,f,c
  7296  001B10  3623               	rlcf	___ftadd@f2+1,f,c
  7297  001B12  3624               	rlcf	___ftadd@f2+2,f,c
  7298  001B14  0629               	decf	___ftadd@exp2,f,c
  7299  001B16  5029               	movf	___ftadd@exp2,w,c
  7300  001B18  182A               	xorwf	___ftadd@exp1,w,c
  7301  001B1A  B4D8               	btfsc	status,2,c
  7302  001B1C  D00D               	goto	l4259
  7303  001B1E  0628               	decf	___ftadd@sign,f,c
  7304  001B20  C028  F025         	movff	___ftadd@sign,??___ftadd
  7305  001B24  0E07               	movlw	7
  7306  001B26  1625               	andwf	??___ftadd,f,c
  7307  001B28  B4D8               	btfsc	status,2,c
  7308  001B2A  D006               	goto	l4259
  7309  001B2C  D7EF               	goto	l4251
  7310  001B2E                     l4257:
  7311  001B2E  90D8               	bcf	status,0,c
  7312  001B30  3221               	rrcf	___ftadd@f1+2,f,c
  7313  001B32  3220               	rrcf	___ftadd@f1+1,f,c
  7314  001B34  321F               	rrcf	___ftadd@f1,f,c
  7315  001B36  2A2A               	incf	___ftadd@exp1,f,c
  7316  001B38                     l4259:
  7317  001B38  5029               	movf	___ftadd@exp2,w,c
  7318  001B3A  622A               	cpfseq	___ftadd@exp1,c
  7319  001B3C  D7F8               	goto	l4257
  7320  001B3E  D01D               	goto	l665
  7321  001B40                     l4261:
  7322  001B40  502A               	movf	___ftadd@exp1,w,c
  7323  001B42  5C29               	subwf	___ftadd@exp2,w,c
  7324  001B44  B0D8               	btfsc	status,0,c
  7325  001B46  D019               	goto	l665
  7326  001B48                     l4263:
  7327  001B48  90D8               	bcf	status,0,c
  7328  001B4A  361F               	rlcf	___ftadd@f1,f,c
  7329  001B4C  3620               	rlcf	___ftadd@f1+1,f,c
  7330  001B4E  3621               	rlcf	___ftadd@f1+2,f,c
  7331  001B50  062A               	decf	___ftadd@exp1,f,c
  7332  001B52  5029               	movf	___ftadd@exp2,w,c
  7333  001B54  182A               	xorwf	___ftadd@exp1,w,c
  7334  001B56  B4D8               	btfsc	status,2,c
  7335  001B58  D00D               	goto	l4271
  7336  001B5A  0628               	decf	___ftadd@sign,f,c
  7337  001B5C  C028  F025         	movff	___ftadd@sign,??___ftadd
  7338  001B60  0E07               	movlw	7
  7339  001B62  1625               	andwf	??___ftadd,f,c
  7340  001B64  B4D8               	btfsc	status,2,c
  7341  001B66  D006               	goto	l4271
  7342  001B68  D7EF               	goto	l4263
  7343  001B6A                     l4269:
  7344  001B6A  90D8               	bcf	status,0,c
  7345  001B6C  3224               	rrcf	___ftadd@f2+2,f,c
  7346  001B6E  3223               	rrcf	___ftadd@f2+1,f,c
  7347  001B70  3222               	rrcf	___ftadd@f2,f,c
  7348  001B72  2A29               	incf	___ftadd@exp2,f,c
  7349  001B74                     l4271:
  7350  001B74  5029               	movf	___ftadd@exp2,w,c
  7351  001B76  622A               	cpfseq	___ftadd@exp1,c
  7352  001B78  D7F8               	goto	l4269
  7353  001B7A                     l665:
  7354  001B7A  AE28               	btfss	___ftadd@sign,7,c
  7355  001B7C  D00C               	goto	l674
  7356  001B7E  0EFF               	movlw	255
  7357  001B80  1A1F               	xorwf	___ftadd@f1,f,c
  7358  001B82  0EFF               	movlw	255
  7359  001B84  1A20               	xorwf	___ftadd@f1+1,f,c
  7360  001B86  0EFF               	movlw	255
  7361  001B88  1A21               	xorwf	___ftadd@f1+2,f,c
  7362  001B8A  0E01               	movlw	1
  7363  001B8C  261F               	addwf	___ftadd@f1,f,c
  7364  001B8E  0E00               	movlw	0
  7365  001B90  2220               	addwfc	___ftadd@f1+1,f,c
  7366  001B92  0E00               	movlw	0
  7367  001B94  2221               	addwfc	___ftadd@f1+2,f,c
  7368  001B96                     l674:
  7369  001B96  AC28               	btfss	___ftadd@sign,6,c
  7370  001B98  D00C               	goto	l4277
  7371  001B9A  0EFF               	movlw	255
  7372  001B9C  1A22               	xorwf	___ftadd@f2,f,c
  7373  001B9E  0EFF               	movlw	255
  7374  001BA0  1A23               	xorwf	___ftadd@f2+1,f,c
  7375  001BA2  0EFF               	movlw	255
  7376  001BA4  1A24               	xorwf	___ftadd@f2+2,f,c
  7377  001BA6  0E01               	movlw	1
  7378  001BA8  2622               	addwf	___ftadd@f2,f,c
  7379  001BAA  0E00               	movlw	0
  7380  001BAC  2223               	addwfc	___ftadd@f2+1,f,c
  7381  001BAE  0E00               	movlw	0
  7382  001BB0  2224               	addwfc	___ftadd@f2+2,f,c
  7383  001BB2                     l4277:
  7384  001BB2  6E25               	movwf	??___ftadd& (0+255),c
  7385  001BB4  0E00               	movlw	0
  7386  001BB6  6E28               	movwf	___ftadd@sign,c
  7387  001BB8  5025               	movf	??___ftadd& (0+255),w,c
  7388  001BBA  501F               	movf	___ftadd@f1,w,c
  7389  001BBC  2622               	addwf	___ftadd@f2,f,c
  7390  001BBE  5020               	movf	___ftadd@f1+1,w,c
  7391  001BC0  2223               	addwfc	___ftadd@f2+1,f,c
  7392  001BC2  5021               	movf	___ftadd@f1+2,w,c
  7393  001BC4  2224               	addwfc	___ftadd@f2+2,f,c
  7394  001BC6  AE24               	btfss	___ftadd@f2+2,7,c
  7395  001BC8  D010               	goto	l4287
  7396  001BCA  0EFF               	movlw	255
  7397  001BCC  1A22               	xorwf	___ftadd@f2,f,c
  7398  001BCE  0EFF               	movlw	255
  7399  001BD0  1A23               	xorwf	___ftadd@f2+1,f,c
  7400  001BD2  0EFF               	movlw	255
  7401  001BD4  1A24               	xorwf	___ftadd@f2+2,f,c
  7402  001BD6  0E01               	movlw	1
  7403  001BD8  2622               	addwf	___ftadd@f2,f,c
  7404  001BDA  0E00               	movlw	0
  7405  001BDC  2223               	addwfc	___ftadd@f2+1,f,c
  7406  001BDE  0E00               	movlw	0
  7407  001BE0  2224               	addwfc	___ftadd@f2+2,f,c
  7408  001BE2  6E25               	movwf	??___ftadd& (0+255),c
  7409  001BE4  0E01               	movlw	1
  7410  001BE6  6E28               	movwf	___ftadd@sign,c
  7411  001BE8  5025               	movf	??___ftadd& (0+255),w,c
  7412  001BEA                     l4287:
  7413  001BEA  C022  F001         	movff	___ftadd@f2,___ftpack@arg
  7414  001BEE  C023  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7415  001BF2  C024  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7416  001BF6  C02A  F004         	movff	___ftadd@exp1,___ftpack@exp
  7417  001BFA  C028  F005         	movff	___ftadd@sign,___ftpack@sign
  7418  001BFE  EC61  F013         	call	___ftpack	;wreg free
  7419  001C02  C001  F01F         	movff	?___ftpack,?___ftadd
  7420  001C06  C002  F020         	movff	?___ftpack+1,?___ftadd+1
  7421  001C0A  C003  F021         	movff	?___ftpack+2,?___ftadd+2
  7422  001C0E  0012               	return	
  7423  001C10                     __end_of___ftadd:
  7424                           	opt stack 0
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon2	equ	0xFF1
  7432                           wreg	equ	0xFE8
  7433                           indf2	equ	0xFDF
  7434                           postinc2	equ	0xFDE
  7435                           postdec2	equ	0xFDD
  7436                           fsr2h	equ	0xFDA
  7437                           fsr2l	equ	0xFD9
  7438                           status	equ	0xFD8
  7439                           
  7440 ;; *************** function ___ftpack *****************
  7441 ;; Defined at:
  7442 ;;		line 62 in file "/opt/microchip/xc8/v1.31/sources/common/float.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;  arg             3    0[COMRAM] unsigned um
  7445 ;;  exp             1    3[COMRAM] unsigned char 
  7446 ;;  sign            1    4[COMRAM] unsigned char 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;		None
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  3    0[COMRAM] float 
  7451 ;; Registers used:
  7452 ;;		wreg, status,2, status,0
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7458 ;;      Params:         5       0       0       0       0       0       0       0       0
  7459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7460 ;;      Temps:          3       0       0       0       0       0       0       0       0
  7461 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7462 ;;Total ram usage:        8 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; This function calls:
  7465 ;;		Nothing
  7466 ;; This function is called by:
  7467 ;;		___awtoft
  7468 ;;		___ftadd
  7469 ;;		___ftdiv
  7470 ;;		___ftmul
  7471 ;;		___lltoft
  7472 ;;		___lwtoft
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text37
  7477  0026C2                     __ptext37:
  7478                           	opt stack 0
  7479  0026C2                     ___ftpack:
  7480                           	opt stack 27
  7481                           
  7482                           ;incstack = 0
  7483  0026C2  5004               	movf	___ftpack@exp,w,c
  7484  0026C4  B4D8               	btfsc	status,2,c
  7485  0026C6  D005               	goto	l4191
  7486  0026C8  5001               	movf	___ftpack@arg,w,c
  7487  0026CA  1002               	iorwf	___ftpack@arg+1,w,c
  7488  0026CC  1003               	iorwf	___ftpack@arg+2,w,c
  7489  0026CE  A4D8               	btfss	status,2,c
  7490  0026D0  D00C               	goto	l4197
  7491  0026D2                     l4191:
  7492  0026D2  0E00               	movlw	0
  7493  0026D4  6E01               	movwf	?___ftpack,c
  7494  0026D6  0E00               	movlw	0
  7495  0026D8  6E02               	movwf	?___ftpack+1,c
  7496  0026DA  0E00               	movlw	0
  7497  0026DC  6E03               	movwf	?___ftpack+2,c
  7498  0026DE  0012               	return	
  7499  0026E0                     l4195:
  7500  0026E0  2A04               	incf	___ftpack@exp,f,c
  7501  0026E2  90D8               	bcf	status,0,c
  7502  0026E4  3203               	rrcf	___ftpack@arg+2,f,c
  7503  0026E6  3202               	rrcf	___ftpack@arg+1,f,c
  7504  0026E8  3201               	rrcf	___ftpack@arg,f,c
  7505  0026EA                     l4197:
  7506  0026EA  0E00               	movlw	0
  7507  0026EC  1401               	andwf	___ftpack@arg,w,c
  7508  0026EE  6E06               	movwf	??___ftpack& (0+255),c
  7509  0026F0  0E00               	movlw	0
  7510  0026F2  1402               	andwf	___ftpack@arg+1,w,c
  7511  0026F4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7512  0026F6  0EFE               	movlw	254
  7513  0026F8  1403               	andwf	___ftpack@arg+2,w,c
  7514  0026FA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7515  0026FC  5006               	movf	??___ftpack,w,c
  7516  0026FE  1007               	iorwf	??___ftpack+1,w,c
  7517  002700  1008               	iorwf	??___ftpack+2,w,c
  7518  002702  B4D8               	btfsc	status,2,c
  7519  002704  D00C               	goto	l4203
  7520  002706  D7EC               	goto	l4195
  7521  002708                     l4199:
  7522  002708  2A04               	incf	___ftpack@exp,f,c
  7523  00270A  0E01               	movlw	1
  7524  00270C  2601               	addwf	___ftpack@arg,f,c
  7525  00270E  0E00               	movlw	0
  7526  002710  2202               	addwfc	___ftpack@arg+1,f,c
  7527  002712  0E00               	movlw	0
  7528  002714  2203               	addwfc	___ftpack@arg+2,f,c
  7529  002716  90D8               	bcf	status,0,c
  7530  002718  3203               	rrcf	___ftpack@arg+2,f,c
  7531  00271A  3202               	rrcf	___ftpack@arg+1,f,c
  7532  00271C  3201               	rrcf	___ftpack@arg,f,c
  7533  00271E                     l4203:
  7534  00271E  0E00               	movlw	0
  7535  002720  1401               	andwf	___ftpack@arg,w,c
  7536  002722  6E06               	movwf	??___ftpack& (0+255),c
  7537  002724  0E00               	movlw	0
  7538  002726  1402               	andwf	___ftpack@arg+1,w,c
  7539  002728  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7540  00272A  0EFF               	movlw	255
  7541  00272C  1403               	andwf	___ftpack@arg+2,w,c
  7542  00272E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7543  002730  5006               	movf	??___ftpack,w,c
  7544  002732  1007               	iorwf	??___ftpack+1,w,c
  7545  002734  1008               	iorwf	??___ftpack+2,w,c
  7546  002736  B4D8               	btfsc	status,2,c
  7547  002738  D006               	goto	l4207
  7548  00273A  D7E6               	goto	l4199
  7549  00273C                     l4205:
  7550  00273C  0604               	decf	___ftpack@exp,f,c
  7551  00273E  90D8               	bcf	status,0,c
  7552  002740  3601               	rlcf	___ftpack@arg,f,c
  7553  002742  3602               	rlcf	___ftpack@arg+1,f,c
  7554  002744  3603               	rlcf	___ftpack@arg+2,f,c
  7555  002746                     l4207:
  7556  002746  AE02               	btfss	___ftpack@arg+1,7,c
  7557  002748  D7F9               	goto	l4205
  7558  00274A  A004               	btfss	___ftpack@exp,0,c
  7559  00274C  9E02               	bcf	___ftpack@arg+1,7,c
  7560  00274E  90D8               	bcf	status,0,c
  7561  002750  3204               	rrcf	___ftpack@exp,f,c
  7562  002752  5004               	movf	___ftpack@exp,w,c
  7563  002754  1203               	iorwf	___ftpack@arg+2,f,c
  7564  002756  5005               	movf	___ftpack@sign,w,c
  7565  002758  A4D8               	btfss	status,2,c
  7566  00275A  8E03               	bsf	___ftpack@arg+2,7,c
  7567  00275C  C001  F001         	movff	___ftpack@arg,?___ftpack
  7568  002760  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7569  002764  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7570  002768  0012               	return	
  7571  00276A                     __end_of___ftpack:
  7572                           	opt stack 0
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon2	equ	0xFF1
  7580                           wreg	equ	0xFE8
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function _MAX_7221_INIT *****************
  7589 ;; Defined at:
  7590 ;;		line 64 in file "max7221.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;		None
  7593 ;; Auto vars:     Size  Location     Type
  7594 ;;		None
  7595 ;; Return value:  Size  Location     Type
  7596 ;;		None               void
  7597 ;; Registers used:
  7598 ;;		wreg, status,2, cstack
  7599 ;; Tracked objects:
  7600 ;;		On entry : 0/0
  7601 ;;		On exit  : 0/0
  7602 ;;		Unchanged: 0/0
  7603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7604 ;;      Params:         0       0       0       0       0       0       0       0       0
  7605 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7606 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7607 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7608 ;;Total ram usage:        1 bytes
  7609 ;; Hardware stack levels used:    1
  7610 ;; Hardware stack levels required when called:    2
  7611 ;; This function calls:
  7612 ;;		_MAX_7221_INTENSITY
  7613 ;;		_MAX_7221_SCAN_LIMIT
  7614 ;;		_MAX_7221_WRITE
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text38
  7621  002CCA                     __ptext38:
  7622                           	opt stack 0
  7623  002CCA                     _MAX_7221_INIT:
  7624                           	opt stack 27
  7625                           
  7626                           ;max7221.c: 66: MAX_7221_INTENSITY(0x0d);
  7627                           
  7628                           ;incstack = 0
  7629  002CCA  0E0D               	movlw	13
  7630  002CCC  ECC2  F016         	call	_MAX_7221_INTENSITY
  7631                           
  7632                           ;max7221.c: 67: MAX_7221_SCAN_LIMIT(0x02);
  7633  002CD0  0E02               	movlw	2
  7634  002CD2  ECB7  F016         	call	_MAX_7221_SCAN_LIMIT
  7635                           
  7636                           ;max7221.c: 68: MAX_7221_WRITE(0x09, 0x07);
  7637  002CD6  6E04               	movwf	??_MAX_7221_INIT& (0+255),c
  7638  002CD8  0E07               	movlw	7
  7639  002CDA  6E02               	movwf	MAX_7221_WRITE@value,c
  7640  002CDC  5004               	movf	??_MAX_7221_INIT& (0+255),w,c
  7641  002CDE  0E09               	movlw	9
  7642  002CE0  ECAC  F016         	call	_MAX_7221_WRITE
  7643                           
  7644                           ;max7221.c: 69: MAX_7221_WRITE(0x0c, 0x01);
  7645  002CE4  6E04               	movwf	??_MAX_7221_INIT& (0+255),c
  7646  002CE6  0E01               	movlw	1
  7647  002CE8  6E02               	movwf	MAX_7221_WRITE@value,c
  7648  002CEA  5004               	movf	??_MAX_7221_INIT& (0+255),w,c
  7649  002CEC  0E0C               	movlw	12
  7650  002CEE  ECAC  F016         	call	_MAX_7221_WRITE
  7651  002CF2  0012               	return	
  7652  002CF4                     __end_of_MAX_7221_INIT:
  7653                           	opt stack 0
  7654                           tblptru	equ	0xFF8
  7655                           tblptrh	equ	0xFF7
  7656                           tblptrl	equ	0xFF6
  7657                           tablat	equ	0xFF5
  7658                           prodh	equ	0xFF4
  7659                           prodl	equ	0xFF3
  7660                           intcon2	equ	0xFF1
  7661                           wreg	equ	0xFE8
  7662                           indf2	equ	0xFDF
  7663                           postinc2	equ	0xFDE
  7664                           postdec2	equ	0xFDD
  7665                           fsr2h	equ	0xFDA
  7666                           fsr2l	equ	0xFD9
  7667                           status	equ	0xFD8
  7668                           
  7669 ;; *************** function _MAX_7221_WRITE *****************
  7670 ;; Defined at:
  7671 ;;		line 22 in file "max7221.c"
  7672 ;; Parameters:    Size  Location     Type
  7673 ;;  reg             1    wreg     unsigned char 
  7674 ;;  value           1    1[COMRAM] unsigned char 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  reg             1    2[COMRAM] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;		None               void
  7679 ;; Registers used:
  7680 ;;		wreg, status,2, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7686 ;;      Params:         1       0       0       0       0       0       0       0       0
  7687 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7688 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7689 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7690 ;;Total ram usage:        2 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    1
  7693 ;; This function calls:
  7694 ;;		_SPI1_Exchange8bit
  7695 ;; This function is called by:
  7696 ;;		_MAX_7221_WRITE_FLOAT
  7697 ;;		_MAX_7221_INIT
  7698 ;;		_MAX_7221_WRITE_NUMBER
  7699 ;;		_MAX_7221_TESTMODE
  7700 ;; This function uses a non-reentrant model
  7701 ;;
  7702                           
  7703                           	psect	text39
  7704  002D58                     __ptext39:
  7705                           	opt stack 0
  7706  002D58                     _MAX_7221_WRITE:
  7707                           	opt stack 27
  7708                           
  7709                           ;incstack = 0
  7710                           ;MAX_7221_WRITE@reg stored from wreg
  7711  002D58  CFE8 F003          	movff	wreg,MAX_7221_WRITE@reg
  7712                           
  7713                           ;max7221.c: 24: LATCbits.LATC6 = 0;
  7714  002D5C  9C8B               	bcf	3979,6,c	;volatile
  7715                           
  7716                           ;max7221.c: 25: SPI1_Exchange8bit(reg);
  7717  002D5E  5003               	movf	MAX_7221_WRITE@reg,w,c
  7718  002D60  ECD6  F016         	call	_SPI1_Exchange8bit
  7719                           
  7720                           ;max7221.c: 26: SPI1_Exchange8bit(value);
  7721  002D64  5002               	movf	MAX_7221_WRITE@value,w,c
  7722  002D66  ECD6  F016         	call	_SPI1_Exchange8bit
  7723                           
  7724                           ;max7221.c: 27: LATCbits.LATC6 = 1;
  7725  002D6A  8C8B               	bsf	3979,6,c	;volatile
  7726  002D6C  0012               	return	
  7727  002D6E                     __end_of_MAX_7221_WRITE:
  7728                           	opt stack 0
  7729                           tblptru	equ	0xFF8
  7730                           tblptrh	equ	0xFF7
  7731                           tblptrl	equ	0xFF6
  7732                           tablat	equ	0xFF5
  7733                           prodh	equ	0xFF4
  7734                           prodl	equ	0xFF3
  7735                           intcon2	equ	0xFF1
  7736                           wreg	equ	0xFE8
  7737                           indf2	equ	0xFDF
  7738                           postinc2	equ	0xFDE
  7739                           postdec2	equ	0xFDD
  7740                           fsr2h	equ	0xFDA
  7741                           fsr2l	equ	0xFD9
  7742                           status	equ	0xFD8
  7743                           
  7744 ;; *************** function _MAX_7221_SCAN_LIMIT *****************
  7745 ;; Defined at:
  7746 ;;		line 13 in file "max7221.c"
  7747 ;; Parameters:    Size  Location     Type
  7748 ;;  limit           1    wreg     unsigned char 
  7749 ;; Auto vars:     Size  Location     Type
  7750 ;;  limit           1    1[COMRAM] unsigned char 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;		None               void
  7753 ;; Registers used:
  7754 ;;		wreg, status,2, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7760 ;;      Params:         0       0       0       0       0       0       0       0       0
  7761 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7762 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7763 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7764 ;;Total ram usage:        1 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    1
  7767 ;; This function calls:
  7768 ;;		_SPI1_Exchange8bit
  7769 ;; This function is called by:
  7770 ;;		_MAX_7221_INIT
  7771 ;; This function uses a non-reentrant model
  7772 ;;
  7773                           
  7774                           	psect	text40
  7775  002D6E                     __ptext40:
  7776                           	opt stack 0
  7777  002D6E                     _MAX_7221_SCAN_LIMIT:
  7778                           	opt stack 27
  7779                           
  7780                           ;incstack = 0
  7781                           ;MAX_7221_SCAN_LIMIT@limit stored from wreg
  7782  002D6E  CFE8 F002          	movff	wreg,MAX_7221_SCAN_LIMIT@limit
  7783                           
  7784                           ;max7221.c: 15: LATCbits.LATC6 = 0;
  7785  002D72  9C8B               	bcf	3979,6,c	;volatile
  7786                           
  7787                           ;max7221.c: 16: SPI1_Exchange8bit(0x0b);
  7788  002D74  0E0B               	movlw	11
  7789  002D76  ECD6  F016         	call	_SPI1_Exchange8bit
  7790                           
  7791                           ;max7221.c: 17: SPI1_Exchange8bit(limit);
  7792  002D7A  5002               	movf	MAX_7221_SCAN_LIMIT@limit,w,c
  7793  002D7C  ECD6  F016         	call	_SPI1_Exchange8bit
  7794                           
  7795                           ;max7221.c: 18: LATCbits.LATC6 = 1;
  7796  002D80  8C8B               	bsf	3979,6,c	;volatile
  7797  002D82  0012               	return	
  7798  002D84                     __end_of_MAX_7221_SCAN_LIMIT:
  7799                           	opt stack 0
  7800                           tblptru	equ	0xFF8
  7801                           tblptrh	equ	0xFF7
  7802                           tblptrl	equ	0xFF6
  7803                           tablat	equ	0xFF5
  7804                           prodh	equ	0xFF4
  7805                           prodl	equ	0xFF3
  7806                           intcon2	equ	0xFF1
  7807                           wreg	equ	0xFE8
  7808                           indf2	equ	0xFDF
  7809                           postinc2	equ	0xFDE
  7810                           postdec2	equ	0xFDD
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function _MAX_7221_INTENSITY *****************
  7816 ;; Defined at:
  7817 ;;		line 5 in file "max7221.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  value           1    wreg     unsigned char 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  value           1    1[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;		None               void
  7824 ;; Registers used:
  7825 ;;		wreg, status,2, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0
  7832 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7834 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7835 ;;Total ram usage:        1 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; Hardware stack levels required when called:    1
  7838 ;; This function calls:
  7839 ;;		_SPI1_Exchange8bit
  7840 ;; This function is called by:
  7841 ;;		_MAX_7221_INIT
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text41
  7846  002D84                     __ptext41:
  7847                           	opt stack 0
  7848  002D84                     _MAX_7221_INTENSITY:
  7849                           	opt stack 27
  7850                           
  7851                           ;incstack = 0
  7852                           ;MAX_7221_INTENSITY@value stored from wreg
  7853  002D84  CFE8 F002          	movff	wreg,MAX_7221_INTENSITY@value
  7854                           
  7855                           ;max7221.c: 7: LATCbits.LATC6 = 0;
  7856  002D88  9C8B               	bcf	3979,6,c	;volatile
  7857                           
  7858                           ;max7221.c: 8: SPI1_Exchange8bit(0x0a);
  7859  002D8A  0E0A               	movlw	10
  7860  002D8C  ECD6  F016         	call	_SPI1_Exchange8bit
  7861                           
  7862                           ;max7221.c: 9: SPI1_Exchange8bit(value);
  7863  002D90  5002               	movf	MAX_7221_INTENSITY@value,w,c
  7864  002D92  ECD6  F016         	call	_SPI1_Exchange8bit
  7865                           
  7866                           ;max7221.c: 10: LATCbits.LATC6 = 1;
  7867  002D96  8C8B               	bsf	3979,6,c	;volatile
  7868  002D98  0012               	return	
  7869  002D9A                     __end_of_MAX_7221_INTENSITY:
  7870                           	opt stack 0
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           intcon2	equ	0xFF1
  7878                           wreg	equ	0xFE8
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _SPI1_Exchange8bit *****************
  7887 ;; Defined at:
  7888 ;;		line 20 in file "spi.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  data            1    wreg     unsigned char 
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  data            1    0[COMRAM] unsigned char 
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      unsigned char 
  7895 ;; Registers used:
  7896 ;;		wreg, status,2
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0
  7903 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7905 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7906 ;;Total ram usage:        1 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; This function calls:
  7909 ;;		Nothing
  7910 ;; This function is called by:
  7911 ;;		_MAX_7221_INTENSITY
  7912 ;;		_MAX_7221_SCAN_LIMIT
  7913 ;;		_MAX_7221_WRITE
  7914 ;;		_SPI1_Exchange8bitBuffer
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           	psect	text42
  7919  002DAC                     __ptext42:
  7920                           	opt stack 0
  7921  002DAC                     _SPI1_Exchange8bit:
  7922                           	opt stack 27
  7923                           
  7924                           ;incstack = 0
  7925                           ;SPI1_Exchange8bit@data stored from wreg
  7926  002DAC  CFE8 F001          	movff	wreg,SPI1_Exchange8bit@data
  7927                           
  7928                           ;spi.c: 23: SSP1CON1bits.WCOL = 0;
  7929  002DB0  9EC6               	bcf	4038,7,c	;volatile
  7930                           
  7931                           ;spi.c: 25: SSP1BUF = data;
  7932  002DB2  C001  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  7933  002DB6                     l163:
  7934  002DB6  A0C7               	btfss	4039,0,c	;volatile
  7935  002DB8  D7FE               	goto	l163
  7936                           
  7937                           ;spi.c: 29: }
  7938                           ;spi.c: 31: return (SSP1BUF);
  7939  002DBA  50C9               	movf	4041,w,c	;volatile
  7940  002DBC  0012               	return	
  7941  002DBE                     __end_of_SPI1_Exchange8bit:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           intcon2	equ	0xFF1
  7950                           wreg	equ	0xFE8
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           fsr2h	equ	0xFDA
  7955                           fsr2l	equ	0xFD9
  7956                           status	equ	0xFD8
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodh	equ	0xFF4
  7962                           prodl	equ	0xFF3
  7963                           intcon2	equ	0xFF1
  7964                           wreg	equ	0xFE8
  7965                           indf2	equ	0xFDF
  7966                           postinc2	equ	0xFDE
  7967                           postdec2	equ	0xFDD
  7968                           fsr2h	equ	0xFDA
  7969                           fsr2l	equ	0xFD9
  7970                           status	equ	0xFD8
  7971                           
  7972                           	psect	rparam
  7973  0000                     tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           intcon2	equ	0xFF1
  7980                           wreg	equ	0xFE8
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8


Data Sizes:
    Strings     5
    Constant    158
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     60      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    __asftsub@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    __asftmul@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@integ(BANK0[3]), 

    __asftadd@f1p	PTR float  size(2) Largest target is 3
		 -> sprintf@fval(BANK0[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 4
		 -> MAX_7221_WRITE_FLOAT@digits(BANK0[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S965$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_MAX_7221_WRITE_FLOAT
    _set_fan_speed->___fttol
    _get_temperature->_log
    _log->_eval_poly
    _eval_poly->___ftmul
    ___awtoft->___ftpack
    ___lwtoft->___wmul
    ___ftdiv->___ftadd
    _sprintf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftneg->___lwtoft
    ___asftsub->___ftsub
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___ftmul->___ftdiv
    ___asftadd->_fround
    ___ftadd->___ftneg
    _MAX_7221_INIT->_MAX_7221_WRITE
    _MAX_7221_WRITE->_SPI1_Exchange8bit
    _MAX_7221_SCAN_LIMIT->_SPI1_Exchange8bit
    _MAX_7221_INTENSITY->_SPI1_Exchange8bit

Critical Paths under _main in BANK0

    _main->_MAX_7221_WRITE_FLOAT
    _MAX_7221_WRITE_FLOAT->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  114498
                                             55 BANK0      5     5      0
                      _MAX_7221_INIT
               _MAX_7221_WRITE_FLOAT
                    _SPI1_Initialize
                            ___awmod
                      _configure_adc
                      _configure_pwm
                    _get_temperature
                    _init_oscillator
                          _init_pins
                      _set_fan_speed
 ---------------------------------------------------------------------------------
 (1) _set_fan_speed                                       12     9      3   12195
                                              0 BANK0     12     9      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _init_pins                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_oscillator                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_temperature                                     27    24      3   42996
                                             89 COMRAM     3     0      3
                                              0 BANK0     24    24      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                           ___lwtoft
                             ___wmul
                        _adc_convert
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   24702
                                             84 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
                           ___lwtoft (ARG)
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     3      5     352
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   12407
                                             72 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             5     2      3    2345
                                              8 COMRAM     5     2      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _adc_convert                                          4     2      2      86
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             5     2      3    2532
                                             22 COMRAM     5     2      3
                           ___ftpack
                             ___wmul (ARG)
                        _adc_convert (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3020
                                             42 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _configure_pwm                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configure_adc                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MAX_7221_WRITE_FLOAT                                 8     5      3   56760
                                             94 COMRAM     1     1      0
                                             48 BANK0      7     4      3
                     _MAX_7221_WRITE
                             ___ftge
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             54    47      7   54692
                                              0 BANK0     48    41      7
                          ___asftadd
                          ___asftmul
                          ___asftsub
                            ___awdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   11606
                                             72 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   11408
                                             72 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2719
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4    1576
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMRAM     9     5      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          16    10      6     574
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2259
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     508
                                             79 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                             27 COMRAM     3     0      3
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     904
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) ___asftsub                                            5     0      5    4443
                                             48 COMRAM     5     0      5
                            ___ftsub
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4249
                                             42 COMRAM     6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (3) ___asftmul                                            5     0      5    5436
                                             72 COMRAM     5     0      5
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5242
                                             57 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                        _adc_convert (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___asftadd                                            5     0      5    4270
                                             82 COMRAM     5     0      5
                            ___ftadd
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4076
                                             30 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2126
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _MAX_7221_INIT                                        1     1      0     922
                                              3 COMRAM     1     1      0
                 _MAX_7221_INTENSITY
                _MAX_7221_SCAN_LIMIT
                     _MAX_7221_WRITE
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_WRITE                                       2     1      1     834
                                              1 COMRAM     2     1      1
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_SCAN_LIMIT                                  1     1      0      44
                                              1 COMRAM     1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _MAX_7221_INTENSITY                                   1     1      0      44
                                              1 COMRAM     1     1      0
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX_7221_INIT
     _MAX_7221_INTENSITY
       _SPI1_Exchange8bit
     _MAX_7221_SCAN_LIMIT
       _SPI1_Exchange8bit
     _MAX_7221_WRITE
       _SPI1_Exchange8bit
   _MAX_7221_WRITE_FLOAT
     _MAX_7221_WRITE
       _SPI1_Exchange8bit
     ___ftge
     _sprintf
       ___asftadd
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _adc_convert (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___asftmul
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
       ___asftsub
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       ___ftneg
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftneg (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                     ___wmul (ARG)
                       ___awdiv (ARG)
                         ___awmod (ARG)
                       ___awmod (ARG)
                     _adc_convert (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _frexp (ARG)
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
             _frexp (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _SPI1_Initialize
   ___awmod
   _configure_adc
   _configure_pwm
   _get_temperature
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _frexp (ARG)
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
       _frexp (ARG)
     ___ftneg
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
     ___lwtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _adc_convert
     _log
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       _eval_poly (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _frexp (ARG)
   _init_oscillator
   _init_pins
   _set_fan_speed
     ___awtoft
       ___ftpack
     ___ftdiv
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftneg (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _frexp (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftneg (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _adc_convert (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _frexp (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftneg (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _adc_convert (ARG)
         _frexp (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _frexp (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftneg (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _adc_convert (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _frexp (ARG)
             ___ftneg (ARG)
               ___lwtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _adc_convert (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _adc_convert (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _adc_convert (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _adc_convert (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      3E       5       38.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9D       6        0.0%
DATA                 0      0      9D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sat Dec  3 20:53:24 2016

            _SPI1_Exchange8bit 2DAC                   ___asftadd@f2 0055                  ___asftadd@f1p 0053  
           ?_SPI1_Exchange8bit 0001                   ___awdiv@sign 000E                 ?_configure_adc 0001  
          ___wmul@multiplicand 0013                 ?_configure_pwm 0001                   ___asftmul@f2 004B  
                 __CFG_CP0$OFF 000000                   ___asftsub@f2 0033                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   ___ftadd@exp1 002A  
                 ___ftadd@exp2 0029                    __CFG_LVP$ON 000000                   ___ftadd@sign 0028  
                          l106 2596                            l203 2C58                            l163 2DB6  
                          l287 0EF0                            l650 1A9E           __size_of_adc_convert 0030  
                          l724 2D0C                            l581 1D6A                            l654 1ACA  
                          l574 1CCE                            l665 1B7A                            l674 1B96  
                          l684 236E                            l693 1F70                            l685 2394  
                          l778 299E                            l699 1FDA                            l788 2A08  
                 __CFG_CPB$OFF 000000                            _PR2 000FBB                   __CFG_CPD$OFF 000000  
          ??_SPI1_Exchange8bit 0001                            _log 1D7C                   ___awmod@sign 0007  
                          wreg 000FE8                  ___asftmul@f1p 0049                    _sprintf$976 0070  
                _MAX_7221_INIT 2CCA                  ___asftsub@f1p 0031                   ___ftdiv@cntr 0034  
                 ___ftdiv@sign 0039                           l5001 113C                           l4203 271E  
                         l4205 273C                           l4207 2746                           l4303 213E  
                         l5007 1172                           l4321 2184                           l4401 27B2  
                         l5009 1196                           l5033 1DD6                           l4251 1B0C  
                         l4235 1AD8                           l4331 21B0                           l5027 1DAE  
                         l5123 202A                           l4261 1B40                           l4229 1AAC  
                         l4317 2174                           l4421 27FC                           l4413 27E4  
                         l4405 27C4                           l4191 26D2                           l4271 1B74  
                         l4263 1B48                           l4327 21A0                           l4407 27CC  
                         l4503 2CC2                           l5055 232C                           l4257 1B2E  
                         l4513 1EE0                           l4353 263E                           l4409 27D0  
                         l4417 27EE                           l5049 2306                           l5129 2090  
                         l4195 26E0                           l4259 1B38                           l5171 2532  
                         l4197 26EA                           l4277 1BB2                           l4269 1B6A  
                         l4701 22B4                           l4605 1D32                           l4533 1F48  
                         l4365 2678                           l4381 26AA                           l4453 1A18  
                         l4445 194C                           l4199 2708                           l4287 1BEA  
                         l4703 22B8                           l4615 1D5A                           l4519 1F0A  
                         l4367 2680                           l4359 265E                           l4297 2118  
                         l4721 2960                           l4617 1D66                           l4609 1D42  
                         l4561 1FD6                           l4553 1FB2                           l4385 26B8  
                         l4377 26A0                           l4369 2684                           l4473 138A  
                         l5169 2528                           l4651 28FA                           l4707 22CE  
                         l4491 158A                           l4467 12DA                           l4811 08DC  
                         l4717 2950                           l4741 29D6                           l4549 1FA2  
                         l4397 2796                           l4485 14DA                           l4477 13AE  
                         l4805 08BE                           l4647 28CA                           l4671 2214  
                         l4719 295C                           l4751 2A24                           l4575 1C88  
                         l4559 1FCA                           l4823 0962                           l4639 2AAA  
                         l5199 2608                           l4657 2926                           l4729 2990  
                         l4745 29FA                           l4737 29C6                           l4753 2A30  
                         l4569 1C4C                           l4913 0D5A                           l4841 09EA  
                         l4833 099A                           l4825 097C                           l4739 29D2  
                         l4595 1CFE                           l4907 0CFC                           l4851 0A54  
                         l4835 09C8                           l4819 091E                           l4693 2290  
                         l4933 0DE6                           l4941 0E84                           l4829 0992  
                         l4781 2406                           ?_log 0055                           l4943 0E94  
                         l4927 0DB8                           l4783 2482                           l4767 2830  
                         l4689 2280                           l4699 22A8                           l4963 0F2C  
                         l4955 0EF4                           l4891 0C5C                           l4883 0BEE  
                         l4875 0B88                           l4867 0B28                           l4949 0EB2  
                         l4967 0F80                           l4895 0C82                           l4879 0BB0  
                         l4993 10CE                           l4985 109C                           l4977 106E  
                         l4979 107E                           l4987 10AA                           l4997 10FC  
                         STR_1 089F                           u2101 1EF0                           _LATA 000F89  
                         _LATB 000F8A                           u2311 21FA                           _LATC 000F8B  
                         _LATD 000F8C                           u1601 1A7C                           u2081 1EC6  
                         _LATE 000F8D                           u2330 2232                           u2170 1C2E  
                         u2190 1C6A                           u2335 222A                           u2175 1C24  
                         u1801 2102                           u2195 1C60                           u1821 2128  
                         u2470 285A                           u1591 1A68                           u2560 0AA8  
                         u2545 0A2C                           u2565 0A9C                           u2478 285C  
                         u2851 22F0                           u2835 1D8E                           u2935 24D2  
                         u2871 2316   __size_of_MAX_7221_SCAN_LIMIT 0016                           _main 255A  
                 ___ftpack@arg 0001                   ___ftpack@exp 0004                           fsr2h 000FDA  
                         indf2 000FDF                           fsr2l 000FD9                  __CFG_BORV$190 000000  
            ??_init_oscillator 0001                           log@x 0055                           prodh 000FF4  
                         prodl 000FF3                           start 0002      __end_of_SPI1_Exchange8bit 2DBE  
                __CFG_IESO$OFF 000000                   _sprintf$1701 006D                   ___ftmul@cntr 0047  
                 ___ftmul@sign 0048              get_temperature@R1 006C              get_temperature@R2 0071  
            get_temperature@Tn 006E                 _MAX_7221_WRITE 2D58                   ___fttol@exp1 005E  
                 ___fttol@lval 005A                          ??_log 0058            MAX_7221_WRITE@value 0002  
                        ?_main 0001               __end_of_MAX_TEMP 087D                __end_of___awdiv 26C2  
              __end_of___ftadd 1C10                __end_of___awmod 2806                __end_of___ftdiv 23C6  
              __end_of___ftneg 2D1A                __end_of___lldiv 29B0                __end_of___ftmul 21EA  
              ___awdiv@divisor 000A                __end_of___llmod 2A1A                __end_of___ftsub 2C44  
              __end_of___fttol 22E0                          _T2CON 000FBA                 __CFG_DEBUG$OFF 000000  
             __end_of_MIN_TEMP 0880                ___awdiv@counter 000D                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96               ?_get_temperature 005A                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
                 ___lltoft@exp 0011                 ?_MAX_7221_INIT 0001                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                  ___awtoft@sign 000D  
              __end_of_dpowers 0829                          _frexp 2806                          _errno 009C  
                        _scale 11A4                __end_of_isdigit 2CCA                  ___ftpack@sign 0005  
                        tablat 000FF5                          status 000FD8                 __CFG_T3CMX$RC0 000000  
              __end_of_sprintf 11A4                 __CFG_ICPRT$OFF 000000       __size_of_SPI1_Initialize 000E  
               __CFG_MCLRE$OFF 000000         __end_of_MAX_7221_WRITE 2D6E                __initialization 2DBE  
           _MAX_7221_INTENSITY 2D84                    log@exponent 0058                   __end_of_main 2612  
              ??_configure_adc 0001                ??_configure_pwm 0001                 __CFG_PCLKEN$ON 000000  
           get_temperature@Bth 0073             get_temperature@Rth 0063            ?_MAX_7221_INTENSITY 0001  
                       ??_main 0060                  ___fttol@sign1 0059                  __activetblptr 000002  
         __size_of__tdiv_to_l_ 0136                 __CFG_SDOMX$RB3 000000                __CFG_CCP2MX$RC1 000000  
                       ?_frexp 0001               ___llmod@dividend 0001                         _ACTCON 000FB5  
                       ?_scale 0049                         _ADRESH 000FC4                         _ADRESL 000FC3  
                       _CCPR1L 000FBE               ___awdiv@dividend 0008               __end_of___awtoft 2AD2  
                       _ANSELA 000F5B                         _ANSELB 000F5C                         _ANSELC 000F5D  
                       _ANSELD 000F5E                         _ANSELE 000F5F               __end_of___ftpack 276A  
             __end_of___lltoft 2A7E                 __CFG_WDTEN$OFF 000000               __end_of___lwtoft 2CA0  
                       _OSCCON 000FD3           ??_MAX_7221_INTENSITY 0002          get_temperature@sensor 005A  
        SPI1_Exchange8bit@data 0001     __size_of_SPI1_Exchange8bit 0012                 __CFG_XINST$OFF 000000  
             __end_of__powers_ 0877                ?_MAX_7221_WRITE 0002        MAX_7221_INTENSITY@value 0002  
                       ___ftge 289A                         ___wmul 2BD4                      ??___awdiv 000C  
                    ??___ftadd 0025                 __CFG_STVREN$ON 000000                      ??___awmod 0005  
                    ??___ftdiv 0031                      ??___ftneg 001F                      ??___lldiv 0009  
                    ??___ftmul 0040                      ??___llmod 0009                      ??___ftsub 0031  
                    ??___fttol 0054                         _fround 1804               ___awdiv@quotient 000F  
              ___awmod@divisor 0003                ___awmod@counter 0006          ___ftmul@f3_as_product 0044  
              ??_MAX_7221_INIT 0004                      ??_isdigit 0001          __end_of_set_fan_speed 20F2  
                 __mediumconst 0000                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                      ??_sprintf 0067             __size_of___asftadd 003C  
           __size_of___asftmul 003C             __size_of___asftsub 003C           __CFG_LS48MHZ$SYS24X4 000000  
             __end_oflog@coeff 089F                     __accesstop 0060        __end_of__initialization 2DC4  
              __CFG_PBADEN$OFF 000000                     ___ftadd@f1 001F                     ___ftadd@f2 0022  
                   ___ftge@ff1 0001                     ___ftge@ff2 0004                   eval_poly@res 0052  
                   ___ftdiv@f1 002B                     ___ftdiv@f2 002E                     ___ftdiv@f3 0035  
                   ___ftneg@f1 001C                     ___awtoft@c 0009                     ___ftmul@f1 003A  
                   ___ftmul@f2 003D                     ___ftsub@f1 002B                     ___ftsub@f2 002E  
                   ___fttol@f1 0050                 __pcstackCOMRAM 0001       MAX_7221_SCAN_LIMIT@limit 0002  
             __CFG_nPWRTEN$OFF 000000                     ___lltoft@c 0009                  __end_of_frexp 289A  
                __end_of_scale 15AE              ??_SPI1_Initialize 0001            _MAX_7221_SCAN_LIMIT 2D6E  
                   ___lwtoft@c 0017                     __div_to_l_ 1C10            get_temperature@Vout 0060  
          get_temperature@temp 0075                _init_oscillator 2D9A                __div_to_l_@exp1 0010  
              __div_to_l_@cntr 000F                   sprintf@integ 0085                        ??_frexp 0006  
                      ??_scale 004C                __div_to_l_@quot 000B                     __pbssBANK0 009C  
           __size_of_eval_poly 00D2           ?_MAX_7221_SCAN_LIMIT 0001  __size_of_MAX_7221_WRITE_FLOAT 00C2  
                __div_to_l_@f1 0001                  __div_to_l_@f2 0004             __size_of_init_pins 004E  
            __CFG_PLLSEL$PLL4X 000000                        ?___ftge 0001                        ?___wmul 0011  
               _ADC_RESOLUTION 0877                  ??_adc_convert 0003                        _CCP1CON 000FBD  
                      _ECCP1AS 000FB6              __end_of___asftadd 2BD4                        ?_fround 0049  
            __end_of___asftmul 2B98              __end_of___asftsub 2B5C                      ?___awtoft 0009  
                    ?___ftpack 0001                      ?___lltoft 0009                      ?___lwtoft 0017  
                      _OSCCON2 000FD2    set_fan_speed@new_duty_cycle 0067                        _OSCTUNE 000F9B  
                      _SSP1ADD 000FC8                        _SSP1BUF 000FC9      MAX_7221_WRITE_FLOAT@value 0090  
        ??_MAX_7221_SCAN_LIMIT 0002               __CFG_CFGPLLEN$ON 000000              __end_of__npowers_ 0850  
                      __Hparam 0000                     _scale$1700 004C                        __Lparam 0000  
       __end_of_ADC_RESOLUTION 087A                __size_of___ftge 0090                        ___awdiv 2612  
                      ___ftadd 1A58                        ___awmod 276A                        ___ftdiv 22E0  
                      ___ftneg 2CF4                        ___lldiv 292A                __size_of___wmul 003A  
                      ___ftmul 20F2                        ___llmod 29B0                        ___ftsub 2C0E  
                      ___fttol 21EA                   __psmallconst 0800                        __pcinit 2DBE  
                   ??___awtoft 000C                     ??___ftpack 0006              __end_of_eval_poly 2498  
              __size_of_fround 0254        __end_of_init_oscillator 2DAC                        __ramtop 0800  
                   ??___lltoft 000D                        __ptext0 255A                        __ptext1 1FEC  
                      __ptext2 2AD2                        __ptext3 2D9A                        __ptext4 15AE  
                      __ptext5 1D7C                        __ptext6 2806                        __ptext7 23C6  
                      __ptext8 2A7E                        __ptext9 2C44                     ??___lwtoft 001A  
                  ?__div_to_l_ 0001                        _dpowers 0801                   __size_of_log 013A  
                      _isdigit 2CA0              __end_of_init_pins 2B20               ___awmod@dividend 0001  
          __end_of_adc_convert 2C74                        _sprintf 08A6                 _MAX_DUTY_CYCLE 0880  
         end_of_initialization 2DC4       __size_of_get_temperature 0256                  __Lmediumconst 0000  
             ??_MAX_7221_WRITE 0003                ___lldiv@divisor 0005                ___lldiv@counter 000E  
                      postdec2 000FDD                        postinc2 000FDE             set_fan_speed@tTemp 0069  
               __tdiv_to_l_@f1 0001                 __tdiv_to_l_@f2 0004          __end_of_configure_adc 2D3A  
        __end_of_configure_pwm 2D58                  ??__tdiv_to_l_ 0007                      _TRISAbits 000F92  
                    _TRISCbits 000F94         __end_of_MAX_DUTY_CYCLE 0882    __size_of_MAX_7221_INTENSITY 0016  
            MAX_7221_WRITE@reg 0003                    _CCP1CONbits 000FBD                    ___ftdiv@exp 0038  
              _SPI1_Initialize 2DCE            __size_of__div_to_l_ 016C                    ___ftmul@exp 0043  
           adc_convert@channel 0001                 __end_of___ftge 292A                 __end_of___wmul 2C0E  
                  _adc_convert 2C44               ?_init_oscillator 0001                 __end_of_fround 1A58  
          start_initialization 2DBE                     eval_poly@d 004C                     eval_poly@n 004E  
                   eval_poly@x 0049          __end_of_MAX_7221_INIT 2CF4            __end_of__tdiv_to_l_ 1FEC  
                  __end_of_log 1EB6                     frexp@value 0001                __CFG_nLPBOR$OFF 000000  
              ___llmod@divisor 0005                ___llmod@counter 000A              ??_get_temperature 005D  
       __size_of_set_fan_speed 0106                       ??___ftge 0007                       ??___wmul 0015  
                sprintf@vd_978 007A                       ??_fround 004C   __end_of_MAX_7221_WRITE_FLOAT 255A  
                   fround@prec 0052              __size_of___awtoft 0054              __size_of___ftpack 00A8  
                    ___asftadd 2B98                      ___asftmul 2B5C                      ___asftsub 2B20  
            __size_of___lltoft 0064              __size_of___lwtoft 002C                  __pcstackBANK0 0060  
          __end_of__stringdata 08A4        __end_of_SPI1_Initialize 2DDC                   _isdigit$1251 0002  
               _MIN_DUTY_CYCLE 0882                    sprintf@_val 0080                    sprintf@flag 007E  
                  sprintf@fval 008C                    sprintf@prec 008A                       ?___awdiv 0008  
                     ?___ftadd 001F                       ?___awmod 0001                       ?___ftdiv 002B  
                     ?___ftneg 001C                       ?___lldiv 0001                       ?___ftmul 003A  
                     ?___llmod 0001                       ?___ftsub 002B                      __npowers_ 0829  
                     ?___fttol 0050                    __tdiv_to_l_ 1EB6                   ??__div_to_l_ 0007  
                  __smallconst 0800                     ?___asftadd 0053                       ?_isdigit 0001  
                   ?___asftmul 0049                     ?___asftsub 0031                      _eval_poly 23C6  
  __end_of_MAX_7221_SCAN_LIMIT 2D84                  _set_fan_speed 1FEC         __end_of_MIN_DUTY_CYCLE 0884  
                     ?_sprintf 0060                 __size_of_frexp 0094                      _init_pins 2AD2  
               __size_of_scale 040A                 ___wmul@product 0015                       _LATCbits 000F8B  
                     _MAX_TEMP 087A                       _MIN_TEMP 087D             __end_of__div_to_l_ 1D7C  
             __CFG_WDTPS$32768 000000              set_fan_speed@temp 0060                       _SSP1CON1 000FC6  
                     _PSTR1CON 000FB9                       _SSP1STAT 000FC7     MAX_7221_WRITE_FLOAT@digits 0093  
                   _ADCON0bits 000FC2                     _ADCON1bits 000FC1                    __stringdata 089F  
                   _ADCON2bits 000FC0              ___wmul@multiplier 0011                     ?_eval_poly 0049  
                    main@ticks 009A                 ?_set_fan_speed 0060               ?_SPI1_Initialize 0001  
                   ?_init_pins 0001                    _INTCON2bits 000FF1           _MAX_7221_WRITE_FLOAT 2498  
                    frexp@eptr 0004                       __Hrparam 0000                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000               __size_of___awdiv 00B0               __size_of___ftadd 01B8  
             __size_of___awmod 009C               __size_of___ftdiv 00E6                   ?_adc_convert 0001  
             __size_of___ftneg 0026               __size_of___lldiv 0086               __size_of___ftmul 00F8  
             __size_of___llmod 006A               __size_of___ftsub 0036               __size_of___fttol 00F6  
                     ___awtoft 2A7E                       ___ftpack 26C2                    _fround$1698 004F  
                  _fround$1699 004C                       ___lltoft 2A1A                     _ANSELAbits 000F5B  
                     ___lwtoft 2C74                    ??___asftadd 0058                     sprintf@exp 0088  
                  ??___asftmul 004E                    ??___asftsub 0036               __size_of_isdigit 002A  
                     __ptext10 2C74                       __ptext11 22E0                       __ptext20 2BD4  
                     __ptext12 2D3A                       __ptext21 276A                       __ptext13 2D1A  
                     __ptext30 289A                       __ptext22 2612                       __ptext14 2DCE  
                     __ptext31 2B20                       __ptext23 1EB6                       __ptext15 2498  
                     __ptext40 2D6E                       __ptext32 2C0E                       __ptext24 1C10  
                     __ptext16 08A6                       __ptext41 2D84                       __ptext33 2B5C  
                     __ptext25 2A1A                       __ptext17 11A4                       __ptext42 2DAC  
                     __ptext34 20F2                       __ptext26 29B0                       __ptext18 2CA0  
                     __ptext35 2B98                       __ptext27 292A                       __ptext19 1804  
                     __ptext36 1A58                       __ptext28 21EA                       __ptext37 26C2  
                     __ptext29 2CF4                       __ptext38 2CCA                       __ptext39 2D58  
                 _SSP1CON1bits 000FC6                       __powers_ 0850     __end_of_MAX_7221_INTENSITY 2D9A  
              _get_temperature 15AE               __size_of_sprintf 08FE         __size_of_configure_adc 0020  
       __size_of_configure_pwm 001E                  __size_of_main 00B8          ?_MAX_7221_WRITE_FLOAT 0090  
      __size_of_MAX_7221_WRITE 0016                   _SSP1STATbits 000FC7                       main@temp 0097  
                     log@coeff 0884                ??_set_fan_speed 0063                    ??_eval_poly 0050  
                     isdigit@c 0003       __size_of_init_oscillator 0012                       scale@scl 004F  
                  ??_init_pins 0001                      sprintf@ap 0074               __tdiv_to_l_@exp1 000F  
                    sprintf@vd 0076               __tdiv_to_l_@cntr 000E                      sprintf@sp 0060  
             __tdiv_to_l_@quot 000A               ___lldiv@dividend 0001         __size_of_MAX_7221_INIT 002A  
         __CFG_CPUDIV$NOCLKDIV 000000                  _configure_adc 2D1A                   ?__tdiv_to_l_ 0001  
                _configure_pwm 2D3A                       sprintf@c 008F                       sprintf@f 0062  
             ___lldiv@quotient 000A        __end_of_get_temperature 1804             __CFG_FOSC$INTOSCIO 000000  
       ??_MAX_7221_WRITE_FLOAT 005F           _get_temperature$1696 0066           _get_temperature$1697 0069  
